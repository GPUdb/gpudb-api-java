/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminDeleteNode(AdminDeleteNodeRequest)}.
 * <p>
 * Delete a node from the system.  To delete a node, the data is first
 * distributed from the deleted node to all the other nodes.  Then the node is
 * taken out of service.
 */
public class AdminDeleteNodeRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminDeleteNodeRequest")
            .namespace("com.gpudb")
            .fields()
                .name("rank").type().intType().noDefault()
                .name("authorization").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private int rank;
    private String authorization;
    private Map<String, String> options;


    /**
     * Constructs an AdminDeleteNodeRequest object with default parameters.
     */
    public AdminDeleteNodeRequest() {
        authorization = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminDeleteNodeRequest object with the specified
     * parameters.
     * 
     * @param rank  Rank number of the node being removed from the system.
     * @param authorization  The password that GPUdb is configured with during
     *                       startup. Incorrect or missing authorization code
     *                       will result in an error.
     * @param options  Optional parameters.
     * 
     */
    public AdminDeleteNodeRequest(int rank, String authorization, Map<String, String> options) {
        this.rank = rank;
        this.authorization = (authorization == null) ? "" : authorization;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Rank number of the node being removed from the system.
     * 
     */
    public int getRank() {
        return rank;
    }

    /**
     * 
     * @param rank  Rank number of the node being removed from the system.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminDeleteNodeRequest setRank(int rank) {
        this.rank = rank;
        return this;
    }

    /**
     * 
     * @return The password that GPUdb is configured with during startup.
     *         Incorrect or missing authorization code will result in an error.
     * 
     */
    public String getAuthorization() {
        return authorization;
    }

    /**
     * 
     * @param authorization  The password that GPUdb is configured with during
     *                       startup. Incorrect or missing authorization code
     *                       will result in an error.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminDeleteNodeRequest setAuthorization(String authorization) {
        this.authorization = (authorization == null) ? "" : authorization;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminDeleteNodeRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.rank;

            case 1:
                return this.authorization;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.rank = (Integer)value;
                break;

            case 1:
                this.authorization = (String)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminDeleteNodeRequest that = (AdminDeleteNodeRequest)obj;

        return ( ( this.rank == that.rank )
                 && this.authorization.equals( that.authorization )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "rank" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rank ) );
        builder.append( ", " );
        builder.append( gd.toString( "authorization" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.authorization ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.rank;
        hashCode = (31 * hashCode) + this.authorization.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
