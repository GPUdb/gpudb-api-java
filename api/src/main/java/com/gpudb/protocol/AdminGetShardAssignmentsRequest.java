/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminGetShardAssignments(AdminGetShardAssignmentsRequest)}.
 */
public class AdminGetShardAssignmentsRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminGetShardAssignmentsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("dummy").type().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String dummy;


    /**
     * Constructs an AdminGetShardAssignmentsRequest object with default
     * parameters.
     */
    public AdminGetShardAssignmentsRequest() {
        dummy = "";
    }

    /**
     * Constructs an AdminGetShardAssignmentsRequest object with the specified
     * parameters.
     * 
     * @param dummy
     * 
     */
    public AdminGetShardAssignmentsRequest(String dummy) {
        this.dummy = (dummy == null) ? "" : dummy;
    }
    public String getDummy() {
        return dummy;
    }

    /**
     * 
     * @param dummy
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminGetShardAssignmentsRequest setDummy(String dummy) {
        this.dummy = (dummy == null) ? "" : dummy;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.dummy;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.dummy = (String)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminGetShardAssignmentsRequest that = (AdminGetShardAssignmentsRequest)obj;

        return ( this.dummy.equals( that.dummy ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "dummy" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dummy ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.dummy.hashCode();
        return hashCode;
    }

}
