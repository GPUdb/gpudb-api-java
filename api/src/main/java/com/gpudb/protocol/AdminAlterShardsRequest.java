
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class AdminAlterShardsRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("AdminAlterShardsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("version").type().longType().noDefault()
                .name("useIndex").type().booleanType().noDefault()
                .name("rank").type().array().items().intType().noDefault()
                .name("tom").type().array().items().intType().noDefault()
                .name("index").type().array().items().intType().noDefault()
                .name("backupMapList").type().array().items().intType().noDefault()
                .name("backupMapValues").type().array().items().array().items().intType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    private long version;
    private boolean useIndex;
    private List<Integer> rank;
    private List<Integer> tom;
    private List<Integer> index;
    private List<Integer> backupMapList;
    private List<List<Integer>> backupMapValues;
    private Map<String, String> options;


    public AdminAlterShardsRequest() {
        rank = new ArrayList<>();
        tom = new ArrayList<>();
        index = new ArrayList<>();
        backupMapList = new ArrayList<>();
        backupMapValues = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    public AdminAlterShardsRequest(long version, boolean useIndex, List<Integer> rank, List<Integer> tom, List<Integer> index, List<Integer> backupMapList, List<List<Integer>> backupMapValues, Map<String, String> options) {
        this.version = version;
        this.useIndex = useIndex;
        this.rank = (rank == null) ? new ArrayList<Integer>() : rank;
        this.tom = (tom == null) ? new ArrayList<Integer>() : tom;
        this.index = (index == null) ? new ArrayList<Integer>() : index;
        this.backupMapList = (backupMapList == null) ? new ArrayList<Integer>() : backupMapList;
        this.backupMapValues = (backupMapValues == null) ? new ArrayList<List<Integer>>() : backupMapValues;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public long getVersion() {
        return version;
    }

    public AdminAlterShardsRequest setVersion(long version) {
        this.version = version;
        return this;
    }

    public boolean getUseIndex() {
        return useIndex;
    }

    public AdminAlterShardsRequest setUseIndex(boolean useIndex) {
        this.useIndex = useIndex;
        return this;
    }

    public List<Integer> getRank() {
        return rank;
    }

    public AdminAlterShardsRequest setRank(List<Integer> rank) {
        this.rank = (rank == null) ? new ArrayList<Integer>() : rank;
        return this;
    }

    public List<Integer> getTom() {
        return tom;
    }

    public AdminAlterShardsRequest setTom(List<Integer> tom) {
        this.tom = (tom == null) ? new ArrayList<Integer>() : tom;
        return this;
    }

    public List<Integer> getIndex() {
        return index;
    }

    public AdminAlterShardsRequest setIndex(List<Integer> index) {
        this.index = (index == null) ? new ArrayList<Integer>() : index;
        return this;
    }

    public List<Integer> getBackupMapList() {
        return backupMapList;
    }

    public AdminAlterShardsRequest setBackupMapList(List<Integer> backupMapList) {
        this.backupMapList = (backupMapList == null) ? new ArrayList<Integer>() : backupMapList;
        return this;
    }

    public List<List<Integer>> getBackupMapValues() {
        return backupMapValues;
    }

    public AdminAlterShardsRequest setBackupMapValues(List<List<Integer>> backupMapValues) {
        this.backupMapValues = (backupMapValues == null) ? new ArrayList<List<Integer>>() : backupMapValues;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public AdminAlterShardsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.version;

            case 1:
                return this.useIndex;

            case 2:
                return this.rank;

            case 3:
                return this.tom;

            case 4:
                return this.index;

            case 5:
                return this.backupMapList;

            case 6:
                return this.backupMapValues;

            case 7:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.version = (Long)value;
                break;

            case 1:
                this.useIndex = (Boolean)value;
                break;

            case 2:
                this.rank = (List<Integer>)value;
                break;

            case 3:
                this.tom = (List<Integer>)value;
                break;

            case 4:
                this.index = (List<Integer>)value;
                break;

            case 5:
                this.backupMapList = (List<Integer>)value;
                break;

            case 6:
                this.backupMapValues = (List<List<Integer>>)value;
                break;

            case 7:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminAlterShardsRequest that = (AdminAlterShardsRequest)obj;

        return ( ( this.version == that.version )
                 && ( this.useIndex == that.useIndex )
                 && this.rank.equals( that.rank )
                 && this.tom.equals( that.tom )
                 && this.index.equals( that.index )
                 && this.backupMapList.equals( that.backupMapList )
                 && this.backupMapValues.equals( that.backupMapValues )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "version" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.version ) );
        builder.append( ", " );
        builder.append( gd.toString( "useIndex" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.useIndex ) );
        builder.append( ", " );
        builder.append( gd.toString( "rank" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rank ) );
        builder.append( ", " );
        builder.append( gd.toString( "tom" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tom ) );
        builder.append( ", " );
        builder.append( gd.toString( "index" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.index ) );
        builder.append( ", " );
        builder.append( gd.toString( "backupMapList" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupMapList ) );
        builder.append( ", " );
        builder.append( gd.toString( "backupMapValues" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupMapValues ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + ((Long)this.version).hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.useIndex).hashCode();
        hashCode = (31 * hashCode) + this.rank.hashCode();
        hashCode = (31 * hashCode) + this.tom.hashCode();
        hashCode = (31 * hashCode) + this.index.hashCode();
        hashCode = (31 * hashCode) + this.backupMapList.hashCode();
        hashCode = (31 * hashCode) + this.backupMapValues.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
