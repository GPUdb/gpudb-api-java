/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link com.gpudb.GPUdb#aggregateUniqueRaw(AggregateUniqueRequest)}.
 * <br />
 * <br />Returns all the unique values from a particular column (specified by {@code columnName}) of a particular table (specified
 * by {@code tableName}). If {@code columnName} is a numeric column the values will be in {@code binaryEncodedResponse}. Otherwise
 * if {@code columnName} is a string column the values will be in {@code jsonEncodedResponse}.  {@code offset} and {@code limit} are
 * used to page through the results if there are large numbers of unique values. To get the first 10 unique values sorted in
 * descending order {@code options} would be::
 * <br />
 * <br />{"limit":"10","sort_order":"descending"}.
 * <br />
 * <br />The response is returned as a dynamic schema. For details see: <a href="../../../../../concepts/index.html#dynamic-schemas"
 * target="_top">dynamic schemas documentation</a>. If the 'result_table' option is provided then the results are stored in a table
 * with the name given in the option and the results are not returned in the response.
 */
public class AggregateUniqueRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AggregateUniqueRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("columnName").type().stringType().noDefault()
                .name("offset").type().longType().noDefault()
                .name("limit").type().longType().noDefault()
                .name("encoding").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Specifies the encoding for returned records. Values: binary, json.
     * <br />
     * <br />A set of string constants for the parameter {@code encoding}.
     */
    public static final class Encoding {

        /**
         * Indicates that the returned records should be binary encoded.
         */
        public static final String BINARY = "binary";

        /**
         * Indicates that the returned records should be json encoded.
         */
        public static final String JSON = "json";

        private Encoding() {  }
    }


    /**
     * Optional parameters.
     * <br /><ul>
     * <br />  <li> expression: Optional filter expression to apply to the table.
     * <br />  <li> sort_order: String indicating how the returned values should be sorted. Values: ascending, descending.
     * <br />
     * <br />  <li> result_table: The name of the table used to store the results. If present no results are returned in the
     * response.
     * <br /></ul>
     * <br />A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Optional filter expression to apply to the table.
         */
        public static final String EXPRESSION = "expression";

        /**
         * String indicating how the returned values should be sorted. Values: ascending, descending.
         * <br />
         */
        public static final String SORT_ORDER = "sort_order";
        public static final String ASCENDING = "ascending";
        public static final String DESCENDING = "descending";

        /**
         * The name of the table used to store the results. If present no results are returned in the response.
         */
        public static final String RESULT_TABLE = "result_table";

        private Options() {  }
    }

    private String tableName;
    private String columnName;
    private long offset;
    private long limit;
    private String encoding;
    private Map<String, String> options;


    /**
     * Constructs an AggregateUniqueRequest object with default parameters.
     */
    public AggregateUniqueRequest() {
        tableName = "";
        columnName = "";
        encoding = Encoding.BINARY;
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AggregateUniqueRequest object with the specified parameters.
     * 
     * @param tableName  Name of the table on which the operation will be performed. Must be an existing table.
     * @param columnName  Name of the column or an expression containing one or more column names on which the unique function would
     *                    be applied.
     * @param offset  A positive integer indicating the number of initial results to skip (this can be useful for paging through the
     *                results).  The minimum allowed value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> expression: Optional filter expression to apply to the table.
     *                         <li> sort_order: String indicating how the returned values should be sorted. Values: ascending,
     *                 descending.
     *                         <li> result_table: The name of the table used to store the results. If present no results are
     *                 returned in the response.
     *                 </ul>
     * 
     */
    public AggregateUniqueRequest(String tableName, String columnName, long offset, long limit, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.columnName = (columnName == null) ? "" : columnName;
        this.offset = offset;
        this.limit = limit;
        this.encoding = Encoding.BINARY;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Constructs an AggregateUniqueRequest object with the specified parameters.
     * 
     * @param tableName  Name of the table on which the operation will be performed. Must be an existing table.
     * @param columnName  Name of the column or an expression containing one or more column names on which the unique function would
     *                    be applied.
     * @param offset  A positive integer indicating the number of initial results to skip (this can be useful for paging through the
     *                results).  The minimum allowed value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param encoding  Specifies the encoding for returned records. Values: binary, json.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> expression: Optional filter expression to apply to the table.
     *                         <li> sort_order: String indicating how the returned values should be sorted. Values: ascending,
     *                 descending.
     *                         <li> result_table: The name of the table used to store the results. If present no results are
     *                 returned in the response.
     *                 </ul>
     * 
     */
    public AggregateUniqueRequest(String tableName, String columnName, long offset, long limit, String encoding, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.columnName = (columnName == null) ? "" : columnName;
        this.offset = offset;
        this.limit = limit;
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the table on which the operation will be performed. Must be an existing table.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Name of the table on which the operation will be performed. Must be an existing table.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AggregateUniqueRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Name of the column or an expression containing one or more column names on which the unique function would be
     *         applied.
     * 
     */
    public String getColumnName() {
        return columnName;
    }

    /**
     * 
     * @param columnName  Name of the column or an expression containing one or more column names on which the unique function would
     *                    be applied.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AggregateUniqueRequest setColumnName(String columnName) {
        this.columnName = (columnName == null) ? "" : columnName;
        return this;
    }

    /**
     * 
     * @return A positive integer indicating the number of initial results to skip (this can be useful for paging through the
     *         results).  The minimum allowed value is 0. The maximum allowed value is MAX_INT.
     * 
     */
    public long getOffset() {
        return offset;
    }

    /**
     * 
     * @param offset  A positive integer indicating the number of initial results to skip (this can be useful for paging through the
     *                results).  The minimum allowed value is 0. The maximum allowed value is MAX_INT.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AggregateUniqueRequest setOffset(long offset) {
        this.offset = offset;
        return this;
    }

    /**
     * 
     * @return A positive integer indicating the maximum number of results to be returned. Or END_OF_SET (-9999) to indicate that
     *         the max number of results should be returned.
     * 
     */
    public long getLimit() {
        return limit;
    }

    /**
     * 
     * @param limit  A positive integer indicating the maximum number of results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AggregateUniqueRequest setLimit(long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * 
     * @return Specifies the encoding for returned records. Values: binary, json.
     * 
     */
    public String getEncoding() {
        return encoding;
    }

    /**
     * 
     * @param encoding  Specifies the encoding for returned records. Values: binary, json.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AggregateUniqueRequest setEncoding(String encoding) {
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> expression: Optional filter expression to apply to the table.
     *                 <li> sort_order: String indicating how the returned values should be sorted. Values: ascending, descending.
     *                 <li> result_table: The name of the table used to store the results. If present no results are returned in the
     *         response.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> expression: Optional filter expression to apply to the table.
     *                         <li> sort_order: String indicating how the returned values should be sorted. Values: ascending,
     *                 descending.
     *                         <li> result_table: The name of the table used to store the results. If present no results are
     *                 returned in the response.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AggregateUniqueRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.columnName;

            case 2:
                return this.offset;

            case 3:
                return this.limit;

            case 4:
                return this.encoding;

            case 5:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.columnName = (String)value;
                break;

            case 2:
                this.offset = (Long)value;
                break;

            case 3:
                this.limit = (Long)value;
                break;

            case 4:
                this.encoding = (String)value;
                break;

            case 5:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AggregateUniqueRequest that = (AggregateUniqueRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.columnName.equals( that.columnName )
                 && ( this.offset == that.offset )
                 && ( this.limit == that.limit )
                 && this.encoding.equals( that.encoding )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "offset" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.offset ) );
        builder.append( ", " );
        builder.append( gd.toString( "limit" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.limit ) );
        builder.append( ", " );
        builder.append( gd.toString( "encoding" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.encoding ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.columnName.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.offset).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.limit).hashCode();
        hashCode = (31 * hashCode) + this.encoding.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
