/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#queryGraph(QueryGraphRequest)}.
 * <p>
 * Employs a topological query on a network graph generated a-priori by {@link
 * com.gpudb.GPUdb#createGraph(CreateGraphRequest)} and returns a list of
 * adjacent edge(s) or node(s), also known as an adjacency list, depending on
 * what's been provided to the endpoint; providing edges will return nodes and
 * providing nodes will return edges. There are two ways to provide edge(s) or
 * node(s) to be queried: using column names and <a
 * href="../../../../../graph_solver/network_graph_solver.html#query-identifiers"
 * target="_top">query identifiers</a> with the {@code queries} with or using a
 * list of specific IDs with one of the {@code edgeOrNodeIntIds}, {@code
 * edgeOrNodeStringIds}, and {@code edgeOrNodeWktIds} arrays and {@code
 * edgeToNode} to determine if the IDs are edges or nodes.
 * <p>
 * To determine the node(s) or edge(s) adjacent to a value from a given column,
 * provide a list of column names aliased as a particular query identifier to
 * {@code queries}. This field can be populated with column values from any
 * table as long as the type is supported by the given identifier. See <a
 * href="../../../../../graph_solver/network_graph_solver.html#query-identifiers"
 * target="_top">Query Identifiers</a> for more information. I
 * <p>
 * To query for nodes that are adjacent to a given set of edges, set {@code
 * edgeToNode} to {@code true} and provide values to the {@code
 * edgeOrNodeIntIds}, {@code edgeOrNodeStringIds}, and {@code edgeOrNodeWktIds}
 * arrays; it is assumed the values in the arrays are edges and the
 * corresponding adjacency list array in the response will be populated with
 * nodes.
 * <p>
 * To query for edges that are adjacent to a given set of nodes, set {@code
 * edgeToNode} to {@code false} and provide values to the {@code
 * edgeOrNodeIntIds}, {@code edgeOrNodeStringIds}, and {@code edgeOrNodeWktIds}
 * arrays; it is assumed the values in arrays are nodes and the given node(s)
 * will be queried for adjacent edges and the corresponding adjacency list
 * array in the response will be populated with edges.
 * <p>
 * To query for adjacencies relative to a given column and a given set of
 * edges/nodes, the {@code queries} and {@code edgeOrNodeIntIds} / {@code
 * edgeOrNodeStringIds} / {@code edgeOrNodeWktIds} parameters can be used in
 * conjuction with each other. If both {@code queries} and one of the arrays
 * are populated, values from {@code queries} will be prioritized over values
 * in the array and all values parsed from the {@code queries} array will be
 * appended to the corresponding arrays (depending on the type). If using both
 * {@code queries} and the edge_or_node arrays, the types must match, e.g., if
 * {@code queries} utilizes the 'QUERY_NODE_ID' identifier, only the {@code
 * edgeOrNodeIntIds} array should be used. Note that using {@code queries} will
 * override {@code edgeToNode}, so if {@code queries} contains a node-based
 * query identifier, e.g., 'table.column AS QUERY_NODE_ID', it is assumed that
 * the {@code edgeOrNodeIntIds} will contain node IDs.
 * <p>
 * To return the adjacency list in the response, leave {@code adjacencyTable}
 * empty. To return the adjacency list in a table and not in the response,
 * provide a value to {@code adjacencyTable} and set {@code
 * export_query_results} to {@code false}. To return the adjacency list both in
 * a table and the response, provide a value to {@code adjacencyTable} and set
 * {@code export_query_results} to {@code true}.
 * <p>
 * See <a href="../../../../../graph_solver/network_graph_solver.html"
 * target="_top">Network Graph Solver</a> for more information.
 */
public class QueryGraphRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("QueryGraphRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("queries").type().array().items().stringType().noDefault()
                .name("edgeToNode").type().booleanType().noDefault()
                .name("edgeOrNodeIntIds").type().array().items().longType().noDefault()
                .name("edgeOrNodeStringIds").type().array().items().stringType().noDefault()
                .name("edgeOrNodeWktIds").type().array().items().stringType().noDefault()
                .name("adjacencyTable").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * If set to {@code true}, the given edge(s) will be queried for adjacent
     * nodes. If set to {@code false}, the given node(s) will be queried for
     * adjacent edges.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE
     * TRUE}
     *         <li> {@link
     * com.gpudb.protocol.QueryGraphRequest.EdgeToNode#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE TRUE}.
     * A set of string constants for the parameter {@code edgeToNode}.
     */
    public static final class EdgeToNode {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private EdgeToNode() {  }
    }


    /**
     * Additional parameters
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#NUMBER_OF_RINGS
     * NUMBER_OF_RINGS}: Sets the number of rings of edges around the node to
     * query for adjacency, with '1' being the edges directly attached to the
     * queried nodes. For example, if {@code number_of_rings} is set to '2',
     * the edge(s) directly attached to the queried nodes will be returned; in
     * addition, the edge(s) attached to the node(s) attached to the initial
     * ring of edge(s) surrounding the queried node(s) will be returned. This
     * setting is ignored if {@code edgeToNode} is set to {@code true}. This
     * setting cannot be less than '1'.  The default value is '1'.
     *         <li> {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#INCLUDE_ALL_EDGES
     * INCLUDE_ALL_EDGES}: This parameter is only applicable if the queried
     * graph is directed and {@code edgeToNode} is set to {@code false}. If set
     * to {@code true}, all inbound edges and outbound edges relative to the
     * node will be returned. If set to {@code false}, only outbound edges
     * relative to the node will be returned.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#EXPORT_QUERY_RESULTS
     * EXPORT_QUERY_RESULTS}: Returns query results in the response if set to
     * {@code true}.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#ENABLE_GRAPH_DRAW
     * ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a WKT-type column named
     * 'QUERY_EDGE_WKTLINE' to the given {@code adjacencyTable} and inputs WKT
     * values from the source graph (if available) or auto-generated WKT values
     * (if there are no WKT values in the source graph). A subsequent call to
     * the <a href="../../../../../api/rest/wms_rest.html"
     * target="_top">/wms</a> endpoint can then be made to display the query
     * results on a map.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Sets the number of rings of edges around the node to query for
         * adjacency, with '1' being the edges directly attached to the queried
         * nodes. For example, if {@code number_of_rings} is set to '2', the
         * edge(s) directly attached to the queried nodes will be returned; in
         * addition, the edge(s) attached to the node(s) attached to the
         * initial ring of edge(s) surrounding the queried node(s) will be
         * returned. This setting is ignored if {@code edgeToNode} is set to
         * {@code true}. This setting cannot be less than '1'.  The default
         * value is '1'.
         */
        public static final String NUMBER_OF_RINGS = "number_of_rings";

        /**
         * This parameter is only applicable if the queried graph is directed
         * and {@code edgeToNode} is set to {@code false}. If set to {@code
         * true}, all inbound edges and outbound edges relative to the node
         * will be returned. If set to {@code false}, only outbound edges
         * relative to the node will be returned.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}.
         */
        public static final String INCLUDE_ALL_EDGES = "include_all_edges";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Returns query results in the response if set to {@code true}.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}.
         */
        public static final String EXPORT_QUERY_RESULTS = "export_query_results";

        /**
         * If set to {@code true}, adds a WKT-type column named
         * 'QUERY_EDGE_WKTLINE' to the given {@code adjacencyTable} and inputs
         * WKT values from the source graph (if available) or auto-generated
         * WKT values (if there are no WKT values in the source graph). A
         * subsequent call to the <a
         * href="../../../../../api/rest/wms_rest.html" target="_top">/wms</a>
         * endpoint can then be made to display the query results on a map.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}.
         */
        public static final String ENABLE_GRAPH_DRAW = "enable_graph_draw";

        private Options() {  }
    }

    private String graphName;
    private List<String> queries;
    private boolean edgeToNode;
    private List<Long> edgeOrNodeIntIds;
    private List<String> edgeOrNodeStringIds;
    private List<String> edgeOrNodeWktIds;
    private String adjacencyTable;
    private Map<String, String> options;


    /**
     * Constructs a QueryGraphRequest object with default parameters.
     */
    public QueryGraphRequest() {
        graphName = "";
        queries = new ArrayList<>();
        edgeOrNodeIntIds = new ArrayList<>();
        edgeOrNodeStringIds = new ArrayList<>();
        edgeOrNodeWktIds = new ArrayList<>();
        adjacencyTable = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a QueryGraphRequest object with the specified parameters.
     * 
     * @param graphName  Name of the graph resource to query.
     * @param queries  Nodes or edges to be queried specified using <a
     *                 href="../../../../../graph_solver/network_graph_solver.html#query-identifiers"
     *                 target="_top">query identifiers</a>, e.g., 'table.column
     *                 AS QUERY_NODE_ID' or 'table.column AS
     *                 QUERY_EDGE_WKTLINE'. Multiple columns can be used as
     *                 long as the same identifier is used for all columns.
     *                 Passing in a query identifier will override the {@code
     *                 edgeToNode} parameter.
     * @param edgeToNode  If set to {@code true}, the given edge(s) will be
     *                    queried for adjacent nodes. If set to {@code false},
     *                    the given node(s) will be queried for adjacent edges.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE
     *                    TRUE}
     *                            <li> {@link
     *                    com.gpudb.protocol.QueryGraphRequest.EdgeToNode#FALSE
     *                    FALSE}
     *                    </ul>
     *                    The default value is {@link
     *                    com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE
     *                    TRUE}.
     * @param edgeOrNodeIntIds  The unique list of edge or node integer
     *                          identifiers that will be queried for
     *                          adjacencies.
     * @param edgeOrNodeStringIds  The unique list of edge or node string
     *                             identifiers that will be queried for
     *                             adjacencies.
     * @param edgeOrNodeWktIds  The unique list of edge or node WKTPOINT or
     *                          WKTLINE string identifiers that will be queried
     *                          for adjacencies.
     * @param adjacencyTable  Name of the table to store the resulting
     *                        adjacencies. If left blank, the query results are
     *                        instead returned in the response even if {@code
     *                        export_query_results} is set to {@code false}.
     *                        The default value is ''.
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#NUMBER_OF_RINGS
     *                 NUMBER_OF_RINGS}: Sets the number of rings of edges
     *                 around the node to query for adjacency, with '1' being
     *                 the edges directly attached to the queried nodes. For
     *                 example, if {@code number_of_rings} is set to '2', the
     *                 edge(s) directly attached to the queried nodes will be
     *                 returned; in addition, the edge(s) attached to the
     *                 node(s) attached to the initial ring of edge(s)
     *                 surrounding the queried node(s) will be returned. This
     *                 setting is ignored if {@code edgeToNode} is set to
     *                 {@code true}. This setting cannot be less than '1'.  The
     *                 default value is '1'.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#INCLUDE_ALL_EDGES
     *                 INCLUDE_ALL_EDGES}: This parameter is only applicable if
     *                 the queried graph is directed and {@code edgeToNode} is
     *                 set to {@code false}. If set to {@code true}, all
     *                 inbound edges and outbound edges relative to the node
     *                 will be returned. If set to {@code false}, only outbound
     *                 edges relative to the node will be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#EXPORT_QUERY_RESULTS
     *                 EXPORT_QUERY_RESULTS}: Returns query results in the
     *                 response if set to {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#ENABLE_GRAPH_DRAW
     *                 ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a
     *                 WKT-type column named 'QUERY_EDGE_WKTLINE' to the given
     *                 {@code adjacencyTable} and inputs WKT values from the
     *                 source graph (if available) or auto-generated WKT values
     *                 (if there are no WKT values in the source graph). A
     *                 subsequent call to the <a
     *                 href="../../../../../api/rest/wms_rest.html"
     *                 target="_top">/wms</a> endpoint can then be made to
     *                 display the query results on a map.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public QueryGraphRequest(String graphName, List<String> queries, boolean edgeToNode, List<Long> edgeOrNodeIntIds, List<String> edgeOrNodeStringIds, List<String> edgeOrNodeWktIds, String adjacencyTable, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.queries = (queries == null) ? new ArrayList<String>() : queries;
        this.edgeToNode = edgeToNode;
        this.edgeOrNodeIntIds = (edgeOrNodeIntIds == null) ? new ArrayList<Long>() : edgeOrNodeIntIds;
        this.edgeOrNodeStringIds = (edgeOrNodeStringIds == null) ? new ArrayList<String>() : edgeOrNodeStringIds;
        this.edgeOrNodeWktIds = (edgeOrNodeWktIds == null) ? new ArrayList<String>() : edgeOrNodeWktIds;
        this.adjacencyTable = (adjacencyTable == null) ? "" : adjacencyTable;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the graph resource to query.
     * 
     */
    public String getGraphName() {
        return graphName;
    }

    /**
     * 
     * @param graphName  Name of the graph resource to query.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    /**
     * 
     * @return Nodes or edges to be queried specified using <a
     *         href="../../../../../graph_solver/network_graph_solver.html#query-identifiers"
     *         target="_top">query identifiers</a>, e.g., 'table.column AS
     *         QUERY_NODE_ID' or 'table.column AS QUERY_EDGE_WKTLINE'. Multiple
     *         columns can be used as long as the same identifier is used for
     *         all columns. Passing in a query identifier will override the
     *         {@code edgeToNode} parameter.
     * 
     */
    public List<String> getQueries() {
        return queries;
    }

    /**
     * 
     * @param queries  Nodes or edges to be queried specified using <a
     *                 href="../../../../../graph_solver/network_graph_solver.html#query-identifiers"
     *                 target="_top">query identifiers</a>, e.g., 'table.column
     *                 AS QUERY_NODE_ID' or 'table.column AS
     *                 QUERY_EDGE_WKTLINE'. Multiple columns can be used as
     *                 long as the same identifier is used for all columns.
     *                 Passing in a query identifier will override the {@code
     *                 edgeToNode} parameter.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setQueries(List<String> queries) {
        this.queries = (queries == null) ? new ArrayList<String>() : queries;
        return this;
    }

    /**
     * 
     * @return If set to {@code true}, the given edge(s) will be queried for
     *         adjacent nodes. If set to {@code false}, the given node(s) will
     *         be queried for adjacent edges.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.EdgeToNode#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE TRUE}.
     * 
     */
    public boolean getEdgeToNode() {
        return edgeToNode;
    }

    /**
     * 
     * @param edgeToNode  If set to {@code true}, the given edge(s) will be
     *                    queried for adjacent nodes. If set to {@code false},
     *                    the given node(s) will be queried for adjacent edges.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE
     *                    TRUE}
     *                            <li> {@link
     *                    com.gpudb.protocol.QueryGraphRequest.EdgeToNode#FALSE
     *                    FALSE}
     *                    </ul>
     *                    The default value is {@link
     *                    com.gpudb.protocol.QueryGraphRequest.EdgeToNode#TRUE
     *                    TRUE}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setEdgeToNode(boolean edgeToNode) {
        this.edgeToNode = edgeToNode;
        return this;
    }

    /**
     * 
     * @return The unique list of edge or node integer identifiers that will be
     *         queried for adjacencies.
     * 
     */
    public List<Long> getEdgeOrNodeIntIds() {
        return edgeOrNodeIntIds;
    }

    /**
     * 
     * @param edgeOrNodeIntIds  The unique list of edge or node integer
     *                          identifiers that will be queried for
     *                          adjacencies.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setEdgeOrNodeIntIds(List<Long> edgeOrNodeIntIds) {
        this.edgeOrNodeIntIds = (edgeOrNodeIntIds == null) ? new ArrayList<Long>() : edgeOrNodeIntIds;
        return this;
    }

    /**
     * 
     * @return The unique list of edge or node string identifiers that will be
     *         queried for adjacencies.
     * 
     */
    public List<String> getEdgeOrNodeStringIds() {
        return edgeOrNodeStringIds;
    }

    /**
     * 
     * @param edgeOrNodeStringIds  The unique list of edge or node string
     *                             identifiers that will be queried for
     *                             adjacencies.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setEdgeOrNodeStringIds(List<String> edgeOrNodeStringIds) {
        this.edgeOrNodeStringIds = (edgeOrNodeStringIds == null) ? new ArrayList<String>() : edgeOrNodeStringIds;
        return this;
    }

    /**
     * 
     * @return The unique list of edge or node WKTPOINT or WKTLINE string
     *         identifiers that will be queried for adjacencies.
     * 
     */
    public List<String> getEdgeOrNodeWktIds() {
        return edgeOrNodeWktIds;
    }

    /**
     * 
     * @param edgeOrNodeWktIds  The unique list of edge or node WKTPOINT or
     *                          WKTLINE string identifiers that will be queried
     *                          for adjacencies.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setEdgeOrNodeWktIds(List<String> edgeOrNodeWktIds) {
        this.edgeOrNodeWktIds = (edgeOrNodeWktIds == null) ? new ArrayList<String>() : edgeOrNodeWktIds;
        return this;
    }

    /**
     * 
     * @return Name of the table to store the resulting adjacencies. If left
     *         blank, the query results are instead returned in the response
     *         even if {@code export_query_results} is set to {@code false}.
     *         The default value is ''.
     * 
     */
    public String getAdjacencyTable() {
        return adjacencyTable;
    }

    /**
     * 
     * @param adjacencyTable  Name of the table to store the resulting
     *                        adjacencies. If left blank, the query results are
     *                        instead returned in the response even if {@code
     *                        export_query_results} is set to {@code false}.
     *                        The default value is ''.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setAdjacencyTable(String adjacencyTable) {
        this.adjacencyTable = (adjacencyTable == null) ? "" : adjacencyTable;
        return this;
    }

    /**
     * 
     * @return Additional parameters
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#NUMBER_OF_RINGS
     *         NUMBER_OF_RINGS}: Sets the number of rings of edges around the
     *         node to query for adjacency, with '1' being the edges directly
     *         attached to the queried nodes. For example, if {@code
     *         number_of_rings} is set to '2', the edge(s) directly attached to
     *         the queried nodes will be returned; in addition, the edge(s)
     *         attached to the node(s) attached to the initial ring of edge(s)
     *         surrounding the queried node(s) will be returned. This setting
     *         is ignored if {@code edgeToNode} is set to {@code true}. This
     *         setting cannot be less than '1'.  The default value is '1'.
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#INCLUDE_ALL_EDGES
     *         INCLUDE_ALL_EDGES}: This parameter is only applicable if the
     *         queried graph is directed and {@code edgeToNode} is set to
     *         {@code false}. If set to {@code true}, all inbound edges and
     *         outbound edges relative to the node will be returned. If set to
     *         {@code false}, only outbound edges relative to the node will be
     *         returned.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#EXPORT_QUERY_RESULTS
     *         EXPORT_QUERY_RESULTS}: Returns query results in the response if
     *         set to {@code true}.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#ENABLE_GRAPH_DRAW
     *         ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a WKT-type
     *         column named 'QUERY_EDGE_WKTLINE' to the given {@code
     *         adjacencyTable} and inputs WKT values from the source graph (if
     *         available) or auto-generated WKT values (if there are no WKT
     *         values in the source graph). A subsequent call to the <a
     *         href="../../../../../api/rest/wms_rest.html"
     *         target="_top">/wms</a> endpoint can then be made to display the
     *         query results on a map.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.QueryGraphRequest.Options#FALSE FALSE}.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#NUMBER_OF_RINGS
     *                 NUMBER_OF_RINGS}: Sets the number of rings of edges
     *                 around the node to query for adjacency, with '1' being
     *                 the edges directly attached to the queried nodes. For
     *                 example, if {@code number_of_rings} is set to '2', the
     *                 edge(s) directly attached to the queried nodes will be
     *                 returned; in addition, the edge(s) attached to the
     *                 node(s) attached to the initial ring of edge(s)
     *                 surrounding the queried node(s) will be returned. This
     *                 setting is ignored if {@code edgeToNode} is set to
     *                 {@code true}. This setting cannot be less than '1'.  The
     *                 default value is '1'.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#INCLUDE_ALL_EDGES
     *                 INCLUDE_ALL_EDGES}: This parameter is only applicable if
     *                 the queried graph is directed and {@code edgeToNode} is
     *                 set to {@code false}. If set to {@code true}, all
     *                 inbound edges and outbound edges relative to the node
     *                 will be returned. If set to {@code false}, only outbound
     *                 edges relative to the node will be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#EXPORT_QUERY_RESULTS
     *                 EXPORT_QUERY_RESULTS}: Returns query results in the
     *                 response if set to {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#ENABLE_GRAPH_DRAW
     *                 ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a
     *                 WKT-type column named 'QUERY_EDGE_WKTLINE' to the given
     *                 {@code adjacencyTable} and inputs WKT values from the
     *                 source graph (if available) or auto-generated WKT values
     *                 (if there are no WKT values in the source graph). A
     *                 subsequent call to the <a
     *                 href="../../../../../api/rest/wms_rest.html"
     *                 target="_top">/wms</a> endpoint can then be made to
     *                 display the query results on a map.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public QueryGraphRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.queries;

            case 2:
                return this.edgeToNode;

            case 3:
                return this.edgeOrNodeIntIds;

            case 4:
                return this.edgeOrNodeStringIds;

            case 5:
                return this.edgeOrNodeWktIds;

            case 6:
                return this.adjacencyTable;

            case 7:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.queries = (List<String>)value;
                break;

            case 2:
                this.edgeToNode = (Boolean)value;
                break;

            case 3:
                this.edgeOrNodeIntIds = (List<Long>)value;
                break;

            case 4:
                this.edgeOrNodeStringIds = (List<String>)value;
                break;

            case 5:
                this.edgeOrNodeWktIds = (List<String>)value;
                break;

            case 6:
                this.adjacencyTable = (String)value;
                break;

            case 7:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        QueryGraphRequest that = (QueryGraphRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.queries.equals( that.queries )
                 && ( this.edgeToNode == that.edgeToNode )
                 && this.edgeOrNodeIntIds.equals( that.edgeOrNodeIntIds )
                 && this.edgeOrNodeStringIds.equals( that.edgeOrNodeStringIds )
                 && this.edgeOrNodeWktIds.equals( that.edgeOrNodeWktIds )
                 && this.adjacencyTable.equals( that.adjacencyTable )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "queries" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.queries ) );
        builder.append( ", " );
        builder.append( gd.toString( "edgeToNode" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.edgeToNode ) );
        builder.append( ", " );
        builder.append( gd.toString( "edgeOrNodeIntIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.edgeOrNodeIntIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "edgeOrNodeStringIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.edgeOrNodeStringIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "edgeOrNodeWktIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.edgeOrNodeWktIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "adjacencyTable" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.adjacencyTable ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.queries.hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.edgeToNode).hashCode();
        hashCode = (31 * hashCode) + this.edgeOrNodeIntIds.hashCode();
        hashCode = (31 * hashCode) + this.edgeOrNodeStringIds.hashCode();
        hashCode = (31 * hashCode) + this.edgeOrNodeWktIds.hashCode();
        hashCode = (31 * hashCode) + this.adjacencyTable.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
