/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminAddNode(AdminAddNodeRequest)}.
 * <p>
 * Add a new node to the GPUdb cluster. By default this will only add the node
 * to the cluster but will not be assigned any data shards. Set the {@code
 * reshard} option to {@code true} to move some shards from the other nodes in
 * the cluster to this node.
 */
public class AdminAddNodeRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminAddNodeRequest")
            .namespace("com.gpudb")
            .fields()
                .name("hostName").type().stringType().noDefault()
                .name("gpuIndex").type().intType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminAddNodeRequest.Options#RESHARD RESHARD}: If
     * {@code true}, then some of the shards from all the existing nodes will
     * be moved to the new node being added. Note that for big clusters, this
     * data transfer could be time consuming and also result in delay in
     * responding to queries for busy clusters.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AdminAddNodeRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE FALSE}.
     * </ul>
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * If {@code true}, then some of the shards from all the existing nodes
         * will be moved to the new node being added. Note that for big
         * clusters, this data transfer could be time consuming and also result
         * in delay in responding to queries for busy clusters.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AdminAddNodeRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE FALSE}.
         */
        public static final String RESHARD = "reshard";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private String hostName;
    private int gpuIndex;
    private Map<String, String> options;


    /**
     * Constructs an AdminAddNodeRequest object with default parameters.
     */
    public AdminAddNodeRequest() {
        hostName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminAddNodeRequest object with the specified parameters.
     * 
     * @param hostName  host name of the node being added to the system.
     * @param gpuIndex
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#RESHARD
     *                 RESHARD}: If {@code true}, then some of the shards from
     *                 all the existing nodes will be moved to the new node
     *                 being added. Note that for big clusters, this data
     *                 transfer could be time consuming and also result in
     *                 delay in responding to queries for busy clusters.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     */
    public AdminAddNodeRequest(String hostName, int gpuIndex, Map<String, String> options) {
        this.hostName = (hostName == null) ? "" : hostName;
        this.gpuIndex = gpuIndex;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return host name of the node being added to the system.
     * 
     */
    public String getHostName() {
        return hostName;
    }

    /**
     * 
     * @param hostName  host name of the node being added to the system.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminAddNodeRequest setHostName(String hostName) {
        this.hostName = (hostName == null) ? "" : hostName;
        return this;
    }
    public int getGpuIndex() {
        return gpuIndex;
    }

    /**
     * 
     * @param gpuIndex
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminAddNodeRequest setGpuIndex(int gpuIndex) {
        this.gpuIndex = gpuIndex;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminAddNodeRequest.Options#RESHARD RESHARD}:
     *         If {@code true}, then some of the shards from all the existing
     *         nodes will be moved to the new node being added. Note that for
     *         big clusters, this data transfer could be time consuming and
     *         also result in delay in responding to queries for busy clusters.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminAddNodeRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE FALSE}.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#RESHARD
     *                 RESHARD}: If {@code true}, then some of the shards from
     *                 all the existing nodes will be moved to the new node
     *                 being added. Note that for big clusters, this data
     *                 transfer could be time consuming and also result in
     *                 delay in responding to queries for busy clusters.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminAddNodeRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.hostName;

            case 1:
                return this.gpuIndex;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.hostName = (String)value;
                break;

            case 1:
                this.gpuIndex = (Integer)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminAddNodeRequest that = (AdminAddNodeRequest)obj;

        return ( this.hostName.equals( that.hostName )
                 && ( this.gpuIndex == that.gpuIndex )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "hostName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.hostName ) );
        builder.append( ", " );
        builder.append( gd.toString( "gpuIndex" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.gpuIndex ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.hostName.hashCode();
        hashCode = (31 * hashCode) + this.gpuIndex;
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
