
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class AdminSetShardAssignmentsRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("AdminSetShardAssignmentsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("version").type().longType().noDefault()
                .name("partialReassignment").type().booleanType().noDefault()
                .name("shardAssignmentsRank").type().array().items().intType().noDefault()
                .name("shardAssignmentsTom").type().array().items().intType().noDefault()
                .name("assignmentIndex").type().array().items().intType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    private long version;
    private boolean partialReassignment;
    private List<Integer> shardAssignmentsRank;
    private List<Integer> shardAssignmentsTom;
    private List<Integer> assignmentIndex;
    private Map<String, String> options;


    public AdminSetShardAssignmentsRequest() {
        shardAssignmentsRank = new ArrayList<>();
        shardAssignmentsTom = new ArrayList<>();
        assignmentIndex = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    public AdminSetShardAssignmentsRequest(long version, boolean partialReassignment, List<Integer> shardAssignmentsRank, List<Integer> shardAssignmentsTom, List<Integer> assignmentIndex, Map<String, String> options) {
        this.version = version;
        this.partialReassignment = partialReassignment;
        this.shardAssignmentsRank = (shardAssignmentsRank == null) ? new ArrayList<Integer>() : shardAssignmentsRank;
        this.shardAssignmentsTom = (shardAssignmentsTom == null) ? new ArrayList<Integer>() : shardAssignmentsTom;
        this.assignmentIndex = (assignmentIndex == null) ? new ArrayList<Integer>() : assignmentIndex;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public long getVersion() {
        return version;
    }

    public AdminSetShardAssignmentsRequest setVersion(long version) {
        this.version = version;
        return this;
    }

    public boolean getPartialReassignment() {
        return partialReassignment;
    }

    public AdminSetShardAssignmentsRequest setPartialReassignment(boolean partialReassignment) {
        this.partialReassignment = partialReassignment;
        return this;
    }

    public List<Integer> getShardAssignmentsRank() {
        return shardAssignmentsRank;
    }

    public AdminSetShardAssignmentsRequest setShardAssignmentsRank(List<Integer> shardAssignmentsRank) {
        this.shardAssignmentsRank = (shardAssignmentsRank == null) ? new ArrayList<Integer>() : shardAssignmentsRank;
        return this;
    }

    public List<Integer> getShardAssignmentsTom() {
        return shardAssignmentsTom;
    }

    public AdminSetShardAssignmentsRequest setShardAssignmentsTom(List<Integer> shardAssignmentsTom) {
        this.shardAssignmentsTom = (shardAssignmentsTom == null) ? new ArrayList<Integer>() : shardAssignmentsTom;
        return this;
    }

    public List<Integer> getAssignmentIndex() {
        return assignmentIndex;
    }

    public AdminSetShardAssignmentsRequest setAssignmentIndex(List<Integer> assignmentIndex) {
        this.assignmentIndex = (assignmentIndex == null) ? new ArrayList<Integer>() : assignmentIndex;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public AdminSetShardAssignmentsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.version;

            case 1:
                return this.partialReassignment;

            case 2:
                return this.shardAssignmentsRank;

            case 3:
                return this.shardAssignmentsTom;

            case 4:
                return this.assignmentIndex;

            case 5:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.version = (Long)value;
                break;

            case 1:
                this.partialReassignment = (Boolean)value;
                break;

            case 2:
                this.shardAssignmentsRank = (List<Integer>)value;
                break;

            case 3:
                this.shardAssignmentsTom = (List<Integer>)value;
                break;

            case 4:
                this.assignmentIndex = (List<Integer>)value;
                break;

            case 5:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminSetShardAssignmentsRequest that = (AdminSetShardAssignmentsRequest)obj;

        return ( ( this.version == that.version )
                 && ( this.partialReassignment == that.partialReassignment )
                 && this.shardAssignmentsRank.equals( that.shardAssignmentsRank )
                 && this.shardAssignmentsTom.equals( that.shardAssignmentsTom )
                 && this.assignmentIndex.equals( that.assignmentIndex )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "version" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.version ) );
        builder.append( ", " );
        builder.append( gd.toString( "partialReassignment" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.partialReassignment ) );
        builder.append( ", " );
        builder.append( gd.toString( "shardAssignmentsRank" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.shardAssignmentsRank ) );
        builder.append( ", " );
        builder.append( gd.toString( "shardAssignmentsTom" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.shardAssignmentsTom ) );
        builder.append( ", " );
        builder.append( gd.toString( "assignmentIndex" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.assignmentIndex ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + ((Long)this.version).hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.partialReassignment).hashCode();
        hashCode = (31 * hashCode) + this.shardAssignmentsRank.hashCode();
        hashCode = (31 * hashCode) + this.shardAssignmentsTom.hashCode();
        hashCode = (31 * hashCode) + this.assignmentIndex.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
