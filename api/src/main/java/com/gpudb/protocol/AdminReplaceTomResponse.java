
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class AdminReplaceTomResponse implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("AdminReplaceTomResponse")
            .namespace("com.gpudb")
            .fields()
                .name("oldRankTom").type().longType().noDefault()
                .name("newRankTom").type().longType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    private long oldRankTom;
    private long newRankTom;
    private Map<String, String> info;


    public AdminReplaceTomResponse() {
    }

    public long getOldRankTom() {
        return oldRankTom;
    }

    public AdminReplaceTomResponse setOldRankTom(long oldRankTom) {
        this.oldRankTom = oldRankTom;
        return this;
    }

    public long getNewRankTom() {
        return newRankTom;
    }

    public AdminReplaceTomResponse setNewRankTom(long newRankTom) {
        this.newRankTom = newRankTom;
        return this;
    }

    public Map<String, String> getInfo() {
        return info;
    }

    public AdminReplaceTomResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.oldRankTom;

            case 1:
                return this.newRankTom;

            case 2:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.oldRankTom = (Long)value;
                break;

            case 1:
                this.newRankTom = (Long)value;
                break;

            case 2:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminReplaceTomResponse that = (AdminReplaceTomResponse)obj;

        return ( ( this.oldRankTom == that.oldRankTom )
                 && ( this.newRankTom == that.newRankTom )
                 && this.info.equals( that.info ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "oldRankTom" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.oldRankTom ) );
        builder.append( ", " );
        builder.append( gd.toString( "newRankTom" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.newRankTom ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + ((Long)this.oldRankTom).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.newRankTom).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }


}
