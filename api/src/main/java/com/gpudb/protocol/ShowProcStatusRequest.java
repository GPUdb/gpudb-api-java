
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class ShowProcStatusRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("ShowProcStatusRequest")
            .namespace("com.gpudb")
            .fields()
                .name("runId").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    public static final class Options {

        public static final String CLEAR_COMPLETE = "clear_complete";

        public static final String TRUE = "true";

        public static final String FALSE = "false";


        private Options() {  }
    }


    private String runId;
    private Map<String, String> options;


    public ShowProcStatusRequest() {
        runId = "";
        options = new LinkedHashMap<>();
    }

    public ShowProcStatusRequest(String runId, Map<String, String> options) {
        this.runId = (runId == null) ? "" : runId;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public String getRunId() {
        return runId;
    }

    public ShowProcStatusRequest setRunId(String runId) {
        this.runId = (runId == null) ? "" : runId;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public ShowProcStatusRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.runId;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.runId = (String)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowProcStatusRequest that = (ShowProcStatusRequest)obj;

        return ( this.runId.equals( that.runId )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "runId" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.runId ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.runId.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
