/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterTable(AlterTableRequest)}.
 * <p>
 * Apply various modifications to a table, view, or collection.  The available
 * modifications include the following:
 * <p>
 * Create or delete an <a
 * href="../../../../../concepts/indexes.html#column-index"
 * target="_top">index</a> on a
 * particular column. This can speed up certain operations when using
 * expressions
 * containing equality or relational operators on indexed columns. This only
 * applies to tables.
 * <p>
 * Set the <a href="../../../../../concepts/ttl.html"
 * target="_top">time-to-live (TTL)</a>. This can be applied
 * to tables, views, or collections.  When applied to collections, every
 * contained
 * table & view that is not protected will have its TTL set to the given value.
 * <p>
 * Set the global access mode (i.e. locking) for a table. This setting trumps
 * any
 * role-based access controls that may be in place; e.g., a user with write
 * access
 * to a table marked read-only will not be able to insert records into it. The
 * mode
 * can be set to read-only, write-only, read/write, and no access.
 * <p>
 * Change the <a href="../../../../../concepts/protection.html"
 * target="_top">protection</a> mode to prevent or
 * allow automatic expiration. This can be applied to tables, views, and
 * collections.
 * <p>
 * Allow homogeneous tables within a collection.
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its
 * <a href="../../../../../concepts/types.html" target="_top">type and
 * properties</a> modified.
 * <p>
 * Set or unset <a href="../../../../../concepts/compression.html"
 * target="_top">compression</a> for a column.
 */
public class AlterTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("value").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Modification operation to be applied
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     * ALLOW_HOMOGENEOUS_TABLES}: Sets whether homogeneous tables are allowed
     * in the given collection. This action is only valid if {@code tableName}
     * is a collection. The {@code value} must be either 'true' or 'false'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX CREATE_INDEX}:
     * Creates an <a href="../../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on the column name specified in {@code value}.
     * If this column is already indexed, an error will be returned.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX DELETE_INDEX}:
     * Deletes an existing <a
     * href="../../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on the column name specified in {@code value}.
     * If this column does not have indexing turned on, an error will be
     * returned.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     * MOVE_TO_COLLECTION}: Moves a table into a collection {@code value}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#PROTECTED PROTECTED}: Sets
     * whether the given {@code tableName} should be <a
     * href="../../../../../concepts/protection.html"
     * target="_top">protected</a> or not. The {@code value} must be either
     * 'true' or 'false'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE RENAME_TABLE}:
     * Renames a table, view or collection to {@code value}. Has the same
     * naming restrictions as <a href="../../../../../concepts/tables.html"
     * target="_top">tables</a>.
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Action#TTL
     * TTL}: Sets the <a href="../../../../../concepts/ttl.html"
     * target="_top">time-to-live</a> in minutes of the table, view, or
     * collection specified in {@code tableName}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#MEMORY_TTL MEMORY_TTL}: Sets
     * the time-to-live in minutes for the individual chunks of the columns of
     * the table, view, or collection specified in {@code tableName} to free
     * their memory if unused longer than the given time. Specify an empty
     * string to restore the global memory_ttl setting and a value of '-1' for
     * an infinite timeout.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN ADD_COLUMN}: Adds
     * the column specified in {@code value} to the table specified in {@code
     * tableName}.  Use {@code column_type} and {@code column_properties} in
     * {@code options} to set the column's type and properties, respectively.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     * CHANGE_COLUMN}: Changes type and properties of the column specified in
     * {@code value}.  Use {@code column_type} and {@code column_properties} in
     * {@code options} to set the column's type and properties, respectively.
     * Note that primary key and/or shard key columns cannot be changed. All
     * unchanging column properties must be listed for the change to take
     * place, e.g., to add dictionary encoding to an existing 'char4' column,
     * both 'char4' and 'dict' must be specified in the {@code options} map.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     * SET_COLUMN_COMPRESSION}: Modifies the <a
     * href="../../../../../concepts/compression.html"
     * target="_top">compression</a> setting on the column specified in {@code
     * value}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     * DELETE_COLUMN}: Deletes the column specified in {@code value} from the
     * table specified in {@code tableName}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     * CREATE_FOREIGN_KEY}: Creates a <a
     * href="../../../../../concepts/tables.html#foreign-key"
     * target="_top">foreign key</a> using the format '(source_column_name [,
     * ...]) references target_table_name(primary_key_column_name [, ...]) [as
     * foreign_key_name]'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     * DELETE_FOREIGN_KEY}: Deletes a <a
     * href="../../../../../concepts/tables.html#foreign-key"
     * target="_top">foreign key</a>.  The {@code value} should be the
     * foreign_key_name specified when creating the key or the complete string
     * used to define it.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     * SET_GLOBAL_ACCESS_MODE}: Sets the global access mode (i.e. locking) for
     * the table specified in {@code tableName}. Specify the access mode in
     * {@code value}. Valid modes are 'no_access', 'read_only', 'write_only'
     * and 'read_write'.
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     * REFRESH}: Replays all the table creation commands required to create
     * this <a href="../../../../../concepts/materialized_views.html"
     * target="_top">materialized view</a>.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     * SET_REFRESH_METHOD}: Sets the method by which this <a
     * href="../../../../../concepts/materialized_views.html"
     * target="_top">materialized view</a> is refreshed - one of 'manual',
     * 'periodic', 'on_change'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     * SET_REFRESH_START_TIME}: Sets the time to start periodic refreshes of
     * this <a href="../../../../../concepts/materialized_views.html"
     * target="_top">materialized view</a> to datetime string with format
     * 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the specified time
     * + N * the refresh period.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     * SET_REFRESH_PERIOD}: Sets the time interval in seconds at which to
     * refresh this <a href="../../../../../concepts/materialized_views.html"
     * target="_top">materialized view</a>.  Also, sets the refresh method to
     * periodic if not alreay set.
     * </ul>
     * A set of string constants for the parameter {@code action}.
     */
    public static final class Action {

        /**
         * Sets whether homogeneous tables are allowed in the given collection.
         * This action is only valid if {@code tableName} is a collection. The
         * {@code value} must be either 'true' or 'false'.
         */
        public static final String ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

        /**
         * Creates an <a
         * href="../../../../../concepts/indexes.html#column-index"
         * target="_top">index</a> on the column name specified in {@code
         * value}. If this column is already indexed, an error will be
         * returned.
         */
        public static final String CREATE_INDEX = "create_index";

        /**
         * Deletes an existing <a
         * href="../../../../../concepts/indexes.html#column-index"
         * target="_top">index</a> on the column name specified in {@code
         * value}. If this column does not have indexing turned on, an error
         * will be returned.
         */
        public static final String DELETE_INDEX = "delete_index";

        /**
         * Moves a table into a collection {@code value}.
         */
        public static final String MOVE_TO_COLLECTION = "move_to_collection";

        /**
         * Sets whether the given {@code tableName} should be <a
         * href="../../../../../concepts/protection.html"
         * target="_top">protected</a> or not. The {@code value} must be either
         * 'true' or 'false'.
         */
        public static final String PROTECTED = "protected";

        /**
         * Renames a table, view or collection to {@code value}. Has the same
         * naming restrictions as <a href="../../../../../concepts/tables.html"
         * target="_top">tables</a>.
         */
        public static final String RENAME_TABLE = "rename_table";

        /**
         * Sets the <a href="../../../../../concepts/ttl.html"
         * target="_top">time-to-live</a> in minutes of the table, view, or
         * collection specified in {@code tableName}.
         */
        public static final String TTL = "ttl";

        /**
         * Sets the time-to-live in minutes for the individual chunks of the
         * columns of the table, view, or collection specified in {@code
         * tableName} to free their memory if unused longer than the given
         * time. Specify an empty string to restore the global memory_ttl
         * setting and a value of '-1' for an infinite timeout.
         */
        public static final String MEMORY_TTL = "memory_ttl";

        /**
         * Adds the column specified in {@code value} to the table specified in
         * {@code tableName}.  Use {@code column_type} and {@code
         * column_properties} in {@code options} to set the column's type and
         * properties, respectively.
         */
        public static final String ADD_COLUMN = "add_column";

        /**
         * Changes type and properties of the column specified in {@code
         * value}.  Use {@code column_type} and {@code column_properties} in
         * {@code options} to set the column's type and properties,
         * respectively. Note that primary key and/or shard key columns cannot
         * be changed. All unchanging column properties must be listed for the
         * change to take place, e.g., to add dictionary encoding to an
         * existing 'char4' column, both 'char4' and 'dict' must be specified
         * in the {@code options} map.
         */
        public static final String CHANGE_COLUMN = "change_column";

        /**
         * Modifies the <a href="../../../../../concepts/compression.html"
         * target="_top">compression</a> setting on the column specified in
         * {@code value}.
         */
        public static final String SET_COLUMN_COMPRESSION = "set_column_compression";

        /**
         * Deletes the column specified in {@code value} from the table
         * specified in {@code tableName}.
         */
        public static final String DELETE_COLUMN = "delete_column";

        /**
         * Creates a <a href="../../../../../concepts/tables.html#foreign-key"
         * target="_top">foreign key</a> using the format '(source_column_name
         * [, ...]) references target_table_name(primary_key_column_name [,
         * ...]) [as foreign_key_name]'.
         */
        public static final String CREATE_FOREIGN_KEY = "create_foreign_key";

        /**
         * Deletes a <a href="../../../../../concepts/tables.html#foreign-key"
         * target="_top">foreign key</a>.  The {@code value} should be the
         * foreign_key_name specified when creating the key or the complete
         * string used to define it.
         */
        public static final String DELETE_FOREIGN_KEY = "delete_foreign_key";

        /**
         * Sets the global access mode (i.e. locking) for the table specified
         * in {@code tableName}. Specify the access mode in {@code value}.
         * Valid modes are 'no_access', 'read_only', 'write_only' and
         * 'read_write'.
         */
        public static final String SET_GLOBAL_ACCESS_MODE = "set_global_access_mode";

        /**
         * Replays all the table creation commands required to create this <a
         * href="../../../../../concepts/materialized_views.html"
         * target="_top">materialized view</a>.
         */
        public static final String REFRESH = "refresh";

        /**
         * Sets the method by which this <a
         * href="../../../../../concepts/materialized_views.html"
         * target="_top">materialized view</a> is refreshed - one of 'manual',
         * 'periodic', 'on_change'.
         */
        public static final String SET_REFRESH_METHOD = "set_refresh_method";

        /**
         * Sets the time to start periodic refreshes of this <a
         * href="../../../../../concepts/materialized_views.html"
         * target="_top">materialized view</a> to datetime string with format
         * 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the specified
         * time + N * the refresh period.
         */
        public static final String SET_REFRESH_START_TIME = "set_refresh_start_time";

        /**
         * Sets the time interval in seconds at which to refresh this <a
         * href="../../../../../concepts/materialized_views.html"
         * target="_top">materialized view</a>.  Also, sets the refresh method
         * to periodic if not alreay set.
         */
        public static final String SET_REFRESH_PERIOD = "set_refresh_period";

        private Action() {  }
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     * COLUMN_DEFAULT_VALUE}: When adding a column, set a default value for
     * existing records.  For nullable columns, the default value will be null,
     * regardless of data type.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     * COLUMN_PROPERTIES}: When adding or changing a column, set the column
     * properties (strings, separated by a comma: data, store_only,
     * text_search, char8, int8 etc).
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE COLUMN_TYPE}:
     * When adding or changing a column, set the column type (strings,
     * separated by a comma: int, double, string, null etc).
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     * COMPRESSION_TYPE}: When setting column compression ({@code
     * set_column_compression} for {@code action}), compression type to use:
     * {@code none} (to use no compression) or a valid compression type.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#NONE
     * NONE}
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     * SNAPPY}
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#LZ4
     * LZ4}
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     * LZ4HC}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     * COPY_VALUES_FROM_COLUMN}: please see add_column_expression instead.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     * RENAME_COLUMN}: When changing a column, specify new column name.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     * VALIDATE_CHANGE_COLUMN}: When changing a column, validate the change
     * before applying it. If {@code true}, then validate all values. A value
     * too large (or too long) for the new type will prevent any change. If
     * {@code false}, then when a value is too large or long, it will be
     * truncated.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#TRUE
     * TRUE}: true
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#FALSE
     * FALSE}: false
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     * ADD_COLUMN_EXPRESSION}: expression for new column's values (optional
     * with add_column). Any valid expressions including existing columns.
     * </ul>
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * When adding a column, set a default value for existing records.  For
         * nullable columns, the default value will be null, regardless of data
         * type.
         */
        public static final String COLUMN_DEFAULT_VALUE = "column_default_value";

        /**
         * When adding or changing a column, set the column properties
         * (strings, separated by a comma: data, store_only, text_search,
         * char8, int8 etc).
         */
        public static final String COLUMN_PROPERTIES = "column_properties";

        /**
         * When adding or changing a column, set the column type (strings,
         * separated by a comma: int, double, string, null etc).
         */
        public static final String COLUMN_TYPE = "column_type";

        /**
         * When setting column compression ({@code set_column_compression} for
         * {@code action}), compression type to use: {@code none} (to use no
         * compression) or a valid compression type.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}
         *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#LZ4
         * LZ4}
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#LZ4HC LZ4HC}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}.
         */
        public static final String COMPRESSION_TYPE = "compression_type";
        public static final String NONE = "none";
        public static final String SNAPPY = "snappy";
        public static final String LZ4 = "lz4";
        public static final String LZ4HC = "lz4hc";

        /**
         * please see add_column_expression instead.
         */
        public static final String COPY_VALUES_FROM_COLUMN = "copy_values_from_column";

        /**
         * When changing a column, specify new column name.
         */
        public static final String RENAME_COLUMN = "rename_column";

        /**
         * When changing a column, validate the change before applying it. If
         * {@code true}, then validate all values. A value too large (or too
         * long) for the new type will prevent any change. If {@code false},
         * then when a value is too large or long, it will be truncated.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}: true
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#FALSE FALSE}: false
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
         */
        public static final String VALIDATE_CHANGE_COLUMN = "validate_change_column";

        /**
         * true
         */
        public static final String TRUE = "true";

        /**
         * false
         */
        public static final String FALSE = "false";

        /**
         * expression for new column's values (optional with add_column). Any
         * valid expressions including existing columns.
         */
        public static final String ADD_COLUMN_EXPRESSION = "add_column_expression";

        private Options() {  }
    }

    private String tableName;
    private String action;
    private String value;
    private Map<String, String> options;


    /**
     * Constructs an AlterTableRequest object with default parameters.
     */
    public AlterTableRequest() {
        tableName = "";
        action = "";
        value = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterTableRequest object with the specified parameters.
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be an existing table, view, or collection.
     * @param action  Modification operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *                ALLOW_HOMOGENEOUS_TABLES}: Sets whether homogeneous
     *                tables are allowed in the given collection. This action
     *                is only valid if {@code tableName} is a collection. The
     *                {@code value} must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *                CREATE_INDEX}: Creates an <a
     *                href="../../../../../concepts/indexes.html#column-index"
     *                target="_top">index</a> on the column name specified in
     *                {@code value}. If this column is already indexed, an
     *                error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *                DELETE_INDEX}: Deletes an existing <a
     *                href="../../../../../concepts/indexes.html#column-index"
     *                target="_top">index</a> on the column name specified in
     *                {@code value}. If this column does not have indexing
     *                turned on, an error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *                MOVE_TO_COLLECTION}: Moves a table into a collection
     *                {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *                PROTECTED}: Sets whether the given {@code tableName}
     *                should be <a
     *                href="../../../../../concepts/protection.html"
     *                target="_top">protected</a> or not. The {@code value}
     *                must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *                RENAME_TABLE}: Renames a table, view or collection to
     *                {@code value}. Has the same naming restrictions as <a
     *                href="../../../../../concepts/tables.html"
     *                target="_top">tables</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}:
     *                Sets the <a href="../../../../../concepts/ttl.html"
     *                target="_top">time-to-live</a> in minutes of the table,
     *                view, or collection specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MEMORY_TTL
     *                MEMORY_TTL}: Sets the time-to-live in minutes for the
     *                individual chunks of the columns of the table, view, or
     *                collection specified in {@code tableName} to free their
     *                memory if unused longer than the given time. Specify an
     *                empty string to restore the global memory_ttl setting and
     *                a value of '-1' for an infinite timeout.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *                ADD_COLUMN}: Adds the column specified in {@code value}
     *                to the table specified in {@code tableName}.  Use {@code
     *                column_type} and {@code column_properties} in {@code
     *                options} to set the column's type and properties,
     *                respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *                CHANGE_COLUMN}: Changes type and properties of the column
     *                specified in {@code value}.  Use {@code column_type} and
     *                {@code column_properties} in {@code options} to set the
     *                column's type and properties, respectively. Note that
     *                primary key and/or shard key columns cannot be changed.
     *                All unchanging column properties must be listed for the
     *                change to take place, e.g., to add dictionary encoding to
     *                an existing 'char4' column, both 'char4' and 'dict' must
     *                be specified in the {@code options} map.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *                SET_COLUMN_COMPRESSION}: Modifies the <a
     *                href="../../../../../concepts/compression.html"
     *                target="_top">compression</a> setting on the column
     *                specified in {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *                DELETE_COLUMN}: Deletes the column specified in {@code
     *                value} from the table specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *                CREATE_FOREIGN_KEY}: Creates a <a
     *                href="../../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a> using the format
     *                '(source_column_name [, ...]) references
     *                target_table_name(primary_key_column_name [, ...]) [as
     *                foreign_key_name]'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *                DELETE_FOREIGN_KEY}: Deletes a <a
     *                href="../../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a>.  The {@code value} should
     *                be the foreign_key_name specified when creating the key
     *                or the complete string used to define it.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *                SET_GLOBAL_ACCESS_MODE}: Sets the global access mode
     *                (i.e. locking) for the table specified in {@code
     *                tableName}. Specify the access mode in {@code value}.
     *                Valid modes are 'no_access', 'read_only', 'write_only'
     *                and 'read_write'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     *                REFRESH}: Replays all the table creation commands
     *                required to create this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *                SET_REFRESH_METHOD}: Sets the method by which this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> is refreshed - one of
     *                'manual', 'periodic', 'on_change'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *                SET_REFRESH_START_TIME}: Sets the time to start periodic
     *                refreshes of this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> to datetime string
     *                with format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes
     *                occur at the specified time + N * the refresh period.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *                SET_REFRESH_PERIOD}: Sets the time interval in seconds at
     *                which to refresh this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a>.  Also, sets the
     *                refresh method to periodic if not alreay set.
     *                </ul>
     * @param value  The value of the modification. May be a column name,
     *               'true' or 'false', a TTL, or the global access mode
     *               depending on {@code action}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *                 COLUMN_DEFAULT_VALUE}: When adding a column, set a
     *                 default value for existing records.  For nullable
     *                 columns, the default value will be null, regardless of
     *                 data type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *                 COLUMN_PROPERTIES}: When adding or changing a column,
     *                 set the column properties (strings, separated by a
     *                 comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *                 COLUMN_TYPE}: When adding or changing a column, set the
     *                 column type (strings, separated by a comma: int, double,
     *                 string, null etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *                 COMPRESSION_TYPE}: When setting column compression
     *                 ({@code set_column_compression} for {@code action}),
     *                 compression type to use: {@code none} (to use no
     *                 compression) or a valid compression type.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     *                 LZ4HC}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *                 COPY_VALUES_FROM_COLUMN}: please see
     *                 add_column_expression instead.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *                 RENAME_COLUMN}: When changing a column, specify new
     *                 column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column,
     *                 validate the change before applying it. If {@code true},
     *                 then validate all values. A value too large (or too
     *                 long) for the new type will prevent any change. If
     *                 {@code false}, then when a value is too large or long,
     *                 it will be truncated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 true
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: false
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *                 ADD_COLUMN_EXPRESSION}: expression for new column's
     *                 values (optional with add_column). Any valid expressions
     *                 including existing columns.
     *                 </ul>
     * 
     */
    public AlterTableRequest(String tableName, String action, String value, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.action = (action == null) ? "" : action;
        this.value = (value == null) ? "" : value;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Table on which the operation will be performed. Must be an
     *         existing table, view, or collection.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be an existing table, view, or collection.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Modification operation to be applied
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *         ALLOW_HOMOGENEOUS_TABLES}: Sets whether homogeneous tables are
     *         allowed in the given collection. This action is only valid if
     *         {@code tableName} is a collection. The {@code value} must be
     *         either 'true' or 'false'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *         CREATE_INDEX}: Creates an <a
     *         href="../../../../../concepts/indexes.html#column-index"
     *         target="_top">index</a> on the column name specified in {@code
     *         value}. If this column is already indexed, an error will be
     *         returned.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *         DELETE_INDEX}: Deletes an existing <a
     *         href="../../../../../concepts/indexes.html#column-index"
     *         target="_top">index</a> on the column name specified in {@code
     *         value}. If this column does not have indexing turned on, an
     *         error will be returned.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *         MOVE_TO_COLLECTION}: Moves a table into a collection {@code
     *         value}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *         PROTECTED}: Sets whether the given {@code tableName} should be
     *         <a href="../../../../../concepts/protection.html"
     *         target="_top">protected</a> or not. The {@code value} must be
     *         either 'true' or 'false'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *         RENAME_TABLE}: Renames a table, view or collection to {@code
     *         value}. Has the same naming restrictions as <a
     *         href="../../../../../concepts/tables.html"
     *         target="_top">tables</a>.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}: Sets the
     *         <a href="../../../../../concepts/ttl.html"
     *         target="_top">time-to-live</a> in minutes of the table, view, or
     *         collection specified in {@code tableName}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#MEMORY_TTL
     *         MEMORY_TTL}: Sets the time-to-live in minutes for the individual
     *         chunks of the columns of the table, view, or collection
     *         specified in {@code tableName} to free their memory if unused
     *         longer than the given time. Specify an empty string to restore
     *         the global memory_ttl setting and a value of '-1' for an
     *         infinite timeout.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *         ADD_COLUMN}: Adds the column specified in {@code value} to the
     *         table specified in {@code tableName}.  Use {@code column_type}
     *         and {@code column_properties} in {@code options} to set the
     *         column's type and properties, respectively.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *         CHANGE_COLUMN}: Changes type and properties of the column
     *         specified in {@code value}.  Use {@code column_type} and {@code
     *         column_properties} in {@code options} to set the column's type
     *         and properties, respectively. Note that primary key and/or shard
     *         key columns cannot be changed. All unchanging column properties
     *         must be listed for the change to take place, e.g., to add
     *         dictionary encoding to an existing 'char4' column, both 'char4'
     *         and 'dict' must be specified in the {@code options} map.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *         SET_COLUMN_COMPRESSION}: Modifies the <a
     *         href="../../../../../concepts/compression.html"
     *         target="_top">compression</a> setting on the column specified in
     *         {@code value}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *         DELETE_COLUMN}: Deletes the column specified in {@code value}
     *         from the table specified in {@code tableName}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *         CREATE_FOREIGN_KEY}: Creates a <a
     *         href="../../../../../concepts/tables.html#foreign-key"
     *         target="_top">foreign key</a> using the format
     *         '(source_column_name [, ...]) references
     *         target_table_name(primary_key_column_name [, ...]) [as
     *         foreign_key_name]'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *         DELETE_FOREIGN_KEY}: Deletes a <a
     *         href="../../../../../concepts/tables.html#foreign-key"
     *         target="_top">foreign key</a>.  The {@code value} should be the
     *         foreign_key_name specified when creating the key or the complete
     *         string used to define it.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *         SET_GLOBAL_ACCESS_MODE}: Sets the global access mode (i.e.
     *         locking) for the table specified in {@code tableName}. Specify
     *         the access mode in {@code value}. Valid modes are 'no_access',
     *         'read_only', 'write_only' and 'read_write'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#REFRESH REFRESH}:
     *         Replays all the table creation commands required to create this
     *         <a href="../../../../../concepts/materialized_views.html"
     *         target="_top">materialized view</a>.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *         SET_REFRESH_METHOD}: Sets the method by which this <a
     *         href="../../../../../concepts/materialized_views.html"
     *         target="_top">materialized view</a> is refreshed - one of
     *         'manual', 'periodic', 'on_change'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *         SET_REFRESH_START_TIME}: Sets the time to start periodic
     *         refreshes of this <a
     *         href="../../../../../concepts/materialized_views.html"
     *         target="_top">materialized view</a> to datetime string with
     *         format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the
     *         specified time + N * the refresh period.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *         SET_REFRESH_PERIOD}: Sets the time interval in seconds at which
     *         to refresh this <a
     *         href="../../../../../concepts/materialized_views.html"
     *         target="_top">materialized view</a>.  Also, sets the refresh
     *         method to periodic if not alreay set.
     *         </ul>
     * 
     */
    public String getAction() {
        return action;
    }

    /**
     * 
     * @param action  Modification operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *                ALLOW_HOMOGENEOUS_TABLES}: Sets whether homogeneous
     *                tables are allowed in the given collection. This action
     *                is only valid if {@code tableName} is a collection. The
     *                {@code value} must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *                CREATE_INDEX}: Creates an <a
     *                href="../../../../../concepts/indexes.html#column-index"
     *                target="_top">index</a> on the column name specified in
     *                {@code value}. If this column is already indexed, an
     *                error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *                DELETE_INDEX}: Deletes an existing <a
     *                href="../../../../../concepts/indexes.html#column-index"
     *                target="_top">index</a> on the column name specified in
     *                {@code value}. If this column does not have indexing
     *                turned on, an error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *                MOVE_TO_COLLECTION}: Moves a table into a collection
     *                {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *                PROTECTED}: Sets whether the given {@code tableName}
     *                should be <a
     *                href="../../../../../concepts/protection.html"
     *                target="_top">protected</a> or not. The {@code value}
     *                must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *                RENAME_TABLE}: Renames a table, view or collection to
     *                {@code value}. Has the same naming restrictions as <a
     *                href="../../../../../concepts/tables.html"
     *                target="_top">tables</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}:
     *                Sets the <a href="../../../../../concepts/ttl.html"
     *                target="_top">time-to-live</a> in minutes of the table,
     *                view, or collection specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MEMORY_TTL
     *                MEMORY_TTL}: Sets the time-to-live in minutes for the
     *                individual chunks of the columns of the table, view, or
     *                collection specified in {@code tableName} to free their
     *                memory if unused longer than the given time. Specify an
     *                empty string to restore the global memory_ttl setting and
     *                a value of '-1' for an infinite timeout.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *                ADD_COLUMN}: Adds the column specified in {@code value}
     *                to the table specified in {@code tableName}.  Use {@code
     *                column_type} and {@code column_properties} in {@code
     *                options} to set the column's type and properties,
     *                respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *                CHANGE_COLUMN}: Changes type and properties of the column
     *                specified in {@code value}.  Use {@code column_type} and
     *                {@code column_properties} in {@code options} to set the
     *                column's type and properties, respectively. Note that
     *                primary key and/or shard key columns cannot be changed.
     *                All unchanging column properties must be listed for the
     *                change to take place, e.g., to add dictionary encoding to
     *                an existing 'char4' column, both 'char4' and 'dict' must
     *                be specified in the {@code options} map.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *                SET_COLUMN_COMPRESSION}: Modifies the <a
     *                href="../../../../../concepts/compression.html"
     *                target="_top">compression</a> setting on the column
     *                specified in {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *                DELETE_COLUMN}: Deletes the column specified in {@code
     *                value} from the table specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *                CREATE_FOREIGN_KEY}: Creates a <a
     *                href="../../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a> using the format
     *                '(source_column_name [, ...]) references
     *                target_table_name(primary_key_column_name [, ...]) [as
     *                foreign_key_name]'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *                DELETE_FOREIGN_KEY}: Deletes a <a
     *                href="../../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a>.  The {@code value} should
     *                be the foreign_key_name specified when creating the key
     *                or the complete string used to define it.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *                SET_GLOBAL_ACCESS_MODE}: Sets the global access mode
     *                (i.e. locking) for the table specified in {@code
     *                tableName}. Specify the access mode in {@code value}.
     *                Valid modes are 'no_access', 'read_only', 'write_only'
     *                and 'read_write'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     *                REFRESH}: Replays all the table creation commands
     *                required to create this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *                SET_REFRESH_METHOD}: Sets the method by which this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> is refreshed - one of
     *                'manual', 'periodic', 'on_change'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *                SET_REFRESH_START_TIME}: Sets the time to start periodic
     *                refreshes of this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> to datetime string
     *                with format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes
     *                occur at the specified time + N * the refresh period.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *                SET_REFRESH_PERIOD}: Sets the time interval in seconds at
     *                which to refresh this <a
     *                href="../../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a>.  Also, sets the
     *                refresh method to periodic if not alreay set.
     *                </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    /**
     * 
     * @return The value of the modification. May be a column name, 'true' or
     *         'false', a TTL, or the global access mode depending on {@code
     *         action}.
     * 
     */
    public String getValue() {
        return value;
    }

    /**
     * 
     * @param value  The value of the modification. May be a column name,
     *               'true' or 'false', a TTL, or the global access mode
     *               depending on {@code action}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setValue(String value) {
        this.value = (value == null) ? "" : value;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *         COLUMN_DEFAULT_VALUE}: When adding a column, set a default value
     *         for existing records.  For nullable columns, the default value
     *         will be null, regardless of data type.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *         COLUMN_PROPERTIES}: When adding or changing a column, set the
     *         column properties (strings, separated by a comma: data,
     *         store_only, text_search, char8, int8 etc).
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *         COLUMN_TYPE}: When adding or changing a column, set the column
     *         type (strings, separated by a comma: int, double, string, null
     *         etc).
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *         COMPRESSION_TYPE}: When setting column compression ({@code
     *         set_column_compression} for {@code action}), compression type to
     *         use: {@code none} (to use no compression) or a valid compression
     *         type.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#LZ4HC LZ4HC}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *         COPY_VALUES_FROM_COLUMN}: please see add_column_expression
     *         instead.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *         RENAME_COLUMN}: When changing a column, specify new column name.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *         VALIDATE_CHANGE_COLUMN}: When changing a column, validate the
     *         change before applying it. If {@code true}, then validate all
     *         values. A value too large (or too long) for the new type will
     *         prevent any change. If {@code false}, then when a value is too
     *         large or long, it will be truncated.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}: true
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#FALSE FALSE}: false
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *         ADD_COLUMN_EXPRESSION}: expression for new column's values
     *         (optional with add_column). Any valid expressions including
     *         existing columns.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *                 COLUMN_DEFAULT_VALUE}: When adding a column, set a
     *                 default value for existing records.  For nullable
     *                 columns, the default value will be null, regardless of
     *                 data type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *                 COLUMN_PROPERTIES}: When adding or changing a column,
     *                 set the column properties (strings, separated by a
     *                 comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *                 COLUMN_TYPE}: When adding or changing a column, set the
     *                 column type (strings, separated by a comma: int, double,
     *                 string, null etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *                 COMPRESSION_TYPE}: When setting column compression
     *                 ({@code set_column_compression} for {@code action}),
     *                 compression type to use: {@code none} (to use no
     *                 compression) or a valid compression type.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     *                 LZ4HC}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *                 COPY_VALUES_FROM_COLUMN}: please see
     *                 add_column_expression instead.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *                 RENAME_COLUMN}: When changing a column, specify new
     *                 column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column,
     *                 validate the change before applying it. If {@code true},
     *                 then validate all values. A value too large (or too
     *                 long) for the new type will prevent any change. If
     *                 {@code false}, then when a value is too large or long,
     *                 it will be truncated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 true
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: false
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *                 ADD_COLUMN_EXPRESSION}: expression for new column's
     *                 values (optional with add_column). Any valid expressions
     *                 including existing columns.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.action;

            case 2:
                return this.value;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.value = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTableRequest that = (AlterTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.action.equals( that.action )
                 && this.value.equals( that.value )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "value" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.value ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.value.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
