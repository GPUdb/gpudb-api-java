/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterTable(AlterTableRequest)}.
 * <p>
 * Apply various modifications to a table or collection. Available
 * modifications include:
 * <p>
 *      Cereating or deleting an index on a particular column. This can speed
 * up certain search queries (such as {@link
 * com.gpudb.GPUdb#getRecordsRaw(GetRecordsRequest)}, {@link
 * com.gpudb.GPUdb#deleteRecords(DeleteRecordsRequest)}, {@link
 * com.gpudb.GPUdb#updateRecordsRaw(RawUpdateRecordsRequest)}) when using
 * expressions containing equality or relational operators on indexed columns.
 * This only applies to child tables.
 * <p>
 *      Making a table protected or not. Protected tables need the admin
 * password to be sent in a {@link
 * com.gpudb.GPUdb#clearTable(ClearTableRequest)} to delete the table. This can
 * be applied to child tables or collections or views.
 * <p>
 *      Setting the ttl (time-to-live). This can be applied to child tables or
 * collections or views.
 * <p>
 *      Allowing homogeneous child tables. This only applies to collections.
 */
public class AlterTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("value").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Modification operation to be applied to the table or collection
     * A set of string constants for the parameter {@code action}.
     */
    public static final class Action {

        /**
         * Creates an index on the column name specified in {@code value}. If
         * this column is already indexed, GPUdb will return an error.
         */
        public static final String CREATE_INDEX = "create_index";

        /**
         * Deletes an existing index on the column name specified in {@code
         * value}. If this column does not have indexing turned on, GPUdb will
         * return an error.
         */
        public static final String DELETE_INDEX = "delete_index";

        /**
         * Sets whether homogeneous child tables are allowed in the given
         * collection. This action is only valid if {@code tableName} is a
         * collection. {@code value} must be either 'true' or 'false'.
         */
        public static final String ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

        /**
         * Sets whether the given {@code tableName} should be protected or not.
         * {@code value} must be either 'true' or 'false'.
         */
        public static final String PROTECTED = "protected";

        /**
         * Sets the ttl (time-to-live) of the table or collection specified in
         * {@code tableName}. {@code value} must be the desired ttl in minutes.
         */
        public static final String TTL = "ttl";

        private Action() {  }
    }

    private String tableName;
    private String action;
    private String value;
    private Map<String, String> options;


    /**
     * Constructs an AlterTableRequest object with default parameters.
     */
    public AlterTableRequest() {
        tableName = "";
        action = "";
        value = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterTableRequest object with the specified parameters.
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be a valid table or collection in GPUdb.
     * @param action  Modification operation to be applied to the table or
     *                collection
     * @param value  The value of the modification. May be a column name,
     *               'true' or 'false', or a time-to-live depending on {@code
     *               action}.
     * @param options  Optional parameters.
     * 
     */
    public AlterTableRequest(String tableName, String action, String value, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.action = (action == null) ? "" : action;
        this.value = (value == null) ? "" : value;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Table on which the operation will be performed. Must be a valid
     *         table or collection in GPUdb.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be a valid table or collection in GPUdb.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Modification operation to be applied to the table or collection
     * 
     */
    public String getAction() {
        return action;
    }

    /**
     * 
     * @param action  Modification operation to be applied to the table or
     *                collection
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    /**
     * 
     * @return The value of the modification. May be a column name, 'true' or
     *         'false', or a time-to-live depending on {@code action}.
     * 
     */
    public String getValue() {
        return value;
    }

    /**
     * 
     * @param value  The value of the modification. May be a column name,
     *               'true' or 'false', or a time-to-live depending on {@code
     *               action}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setValue(String value) {
        this.value = (value == null) ? "" : value;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.action;

            case 2:
                return this.value;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.value = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTableRequest that = (AlterTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.action.equals( that.action )
                 && this.value.equals( that.value )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "value" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.value ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.value.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
