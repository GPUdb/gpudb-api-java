/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link com.gpudb.GPUdb#createTable(CreateTableRequest)}.
 * <br />
 * <br />Creates a new table or collection. If a new table is being created, the type of the table is given by {@code typeId}, which
 * must the be the ID of a currently registered type (i.e. one created via {@link com.gpudb.GPUdb#createType(CreateTypeRequest)}).
 * The table will be created inside a collection if the option {@code collection_name} is specified. If that collection does not
 * already exist, it will be created.
 * <br />
 * <br />To create a new collection, specify the name of the collection in {@code tableName} and set the {@code is_collection}
 * option to {@code true}; {@code typeId} will be ignored.
 */
public class CreateTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("typeId").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <br /><ul>
     * <br />  <li> no_error_if_exists: If {@code true}, prevents an error from occurring if the table already exists and is of the
     * given type.  If a table with the same ID but a different type exists, it is still an error. Values: true, false.
     * <br />
     * <br />  <li> collection_name: Name of a collection which is to contain the newly created table. If empty, then the newly
     * created table will be a top-level table. If the collection does not allow duplicate types and it contains a table of the same
     * type as the given one, then this table creation request will fail.
     * <br />  <li> is_collection: Indicates whether the new table to be created will be a collection. Values: true, false.
     * <br />
     * <br />  <li> disallow_homogeneous_tables: For a collection, indicates whether the collection prohibits containment of
     * multiple tables of exactly the same data type. Values: true, false.
     * <br />
     * <br />  <li> is_replicated: For a table, indicates whether the table is to be replicated to all the database ranks. This may
     * be necessary when the table is to be joined with other tables in a query. Values: true, false.
     * <br />
     * <br />  <li> foreign_keys: Semicolon-separated list of foreign key constraints, of the format 'source_column references
     * target_table(primary_key_column)'.
     * <br /></ul>
     * <br />A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * If {@code true}, prevents an error from occurring if the table already exists and is of the given type.  If a table with
         * the same ID but a different type exists, it is still an error. Values: true, false.
         * <br />
         */
        public static final String NO_ERROR_IF_EXISTS = "no_error_if_exists";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Name of a collection which is to contain the newly created table. If empty, then the newly created table will be a
         * top-level table. If the collection does not allow duplicate types and it contains a table of the same type as the given
         * one, then this table creation request will fail.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * Indicates whether the new table to be created will be a collection. Values: true, false.
         * <br />
         */
        public static final String IS_COLLECTION = "is_collection";

        /**
         * For a collection, indicates whether the collection prohibits containment of multiple tables of exactly the same data
         * type. Values: true, false.
         * <br />
         */
        public static final String DISALLOW_HOMOGENEOUS_TABLES = "disallow_homogeneous_tables";

        /**
         * For a table, indicates whether the table is to be replicated to all the database ranks. This may be necessary when the
         * table is to be joined with other tables in a query. Values: true, false.
         * <br />
         */
        public static final String IS_REPLICATED = "is_replicated";

        /**
         * Semicolon-separated list of foreign key constraints, of the format 'source_column references
         * target_table(primary_key_column)'.
         */
        public static final String FOREIGN_KEYS = "foreign_keys";

        private Options() {  }
    }

    private String tableName;
    private String typeId;
    private Map<String, String> options;


    /**
     * Constructs a CreateTableRequest object with default parameters.
     */
    public CreateTableRequest() {
        tableName = "";
        typeId = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateTableRequest object with the specified parameters.
     * 
     * @param tableName  Name of the table to be created. Must not be the name of a currently existing table of a different type.
     *                   Error for requests with existing table of the same name and type id may be suppressed by using the {@code
     *                   no_error_if_exists} option.  Cannot be an empty string.  Valid characters are alphanumeric or any of
     *                   '_-(){}[] .:' (excluding the single quotes), with the first character being alphanumeric or an underscore.
     *                   The maximum length is 256 characters.
     * @param typeId  ID of a currently registered type. All objects added to the newly created table will be of this type.  Ignored
     *                if {@code is_collection} is {@code true}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> no_error_if_exists: If {@code true}, prevents an error from occurring if the table already
     *                 exists and is of the given type.  If a table with the same ID but a different type exists, it is still an
     *                 error. Values: true, false.
     *                         <li> collection_name: Name of a collection which is to contain the newly created table. If empty,
     *                 then the newly created table will be a top-level table. If the collection does not allow duplicate types and
     *                 it contains a table of the same type as the given one, then this table creation request will fail.
     *                         <li> is_collection: Indicates whether the new table to be created will be a collection. Values: true,
     *                 false.
     *                         <li> disallow_homogeneous_tables: For a collection, indicates whether the collection prohibits
     *                 containment of multiple tables of exactly the same data type. Values: true, false.
     *                         <li> is_replicated: For a table, indicates whether the table is to be replicated to all the database
     *                 ranks. This may be necessary when the table is to be joined with other tables in a query. Values: true,
     *                 false.
     *                         <li> foreign_keys: Semicolon-separated list of foreign key constraints, of the format 'source_column
     *                 references target_table(primary_key_column)'.
     *                 </ul>
     * 
     */
    public CreateTableRequest(String tableName, String typeId, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.typeId = (typeId == null) ? "" : typeId;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the table to be created. Must not be the name of a currently existing table of a different type.  Error for
     *         requests with existing table of the same name and type id may be suppressed by using the {@code no_error_if_exists}
     *         option.  Cannot be an empty string.  Valid characters are alphanumeric or any of '_-(){}[] .:' (excluding the single
     *         quotes), with the first character being alphanumeric or an underscore.  The maximum length is 256 characters.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Name of the table to be created. Must not be the name of a currently existing table of a different type.
     *                   Error for requests with existing table of the same name and type id may be suppressed by using the {@code
     *                   no_error_if_exists} option.  Cannot be an empty string.  Valid characters are alphanumeric or any of
     *                   '_-(){}[] .:' (excluding the single quotes), with the first character being alphanumeric or an underscore.
     *                   The maximum length is 256 characters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return ID of a currently registered type. All objects added to the newly created table will be of this type.  Ignored if
     *         {@code is_collection} is {@code true}.
     * 
     */
    public String getTypeId() {
        return typeId;
    }

    /**
     * 
     * @param typeId  ID of a currently registered type. All objects added to the newly created table will be of this type.  Ignored
     *                if {@code is_collection} is {@code true}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableRequest setTypeId(String typeId) {
        this.typeId = (typeId == null) ? "" : typeId;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> no_error_if_exists: If {@code true}, prevents an error from occurring if the table already exists and is
     *         of the given type.  If a table with the same ID but a different type exists, it is still an error. Values: true,
     *         false.
     *                 <li> collection_name: Name of a collection which is to contain the newly created table. If empty, then the
     *         newly created table will be a top-level table. If the collection does not allow duplicate types and it contains a
     *         table of the same type as the given one, then this table creation request will fail.
     *                 <li> is_collection: Indicates whether the new table to be created will be a collection. Values: true, false.
     *                 <li> disallow_homogeneous_tables: For a collection, indicates whether the collection prohibits containment of
     *         multiple tables of exactly the same data type. Values: true, false.
     *                 <li> is_replicated: For a table, indicates whether the table is to be replicated to all the database ranks.
     *         This may be necessary when the table is to be joined with other tables in a query. Values: true, false.
     *                 <li> foreign_keys: Semicolon-separated list of foreign key constraints, of the format 'source_column
     *         references target_table(primary_key_column)'.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> no_error_if_exists: If {@code true}, prevents an error from occurring if the table already
     *                 exists and is of the given type.  If a table with the same ID but a different type exists, it is still an
     *                 error. Values: true, false.
     *                         <li> collection_name: Name of a collection which is to contain the newly created table. If empty,
     *                 then the newly created table will be a top-level table. If the collection does not allow duplicate types and
     *                 it contains a table of the same type as the given one, then this table creation request will fail.
     *                         <li> is_collection: Indicates whether the new table to be created will be a collection. Values: true,
     *                 false.
     *                         <li> disallow_homogeneous_tables: For a collection, indicates whether the collection prohibits
     *                 containment of multiple tables of exactly the same data type. Values: true, false.
     *                         <li> is_replicated: For a table, indicates whether the table is to be replicated to all the database
     *                 ranks. This may be necessary when the table is to be joined with other tables in a query. Values: true,
     *                 false.
     *                         <li> foreign_keys: Semicolon-separated list of foreign key constraints, of the format 'source_column
     *                 references target_table(primary_key_column)'.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.typeId;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.typeId = (String)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateTableRequest that = (CreateTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.typeId.equals( that.typeId )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeId" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeId ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeId.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
