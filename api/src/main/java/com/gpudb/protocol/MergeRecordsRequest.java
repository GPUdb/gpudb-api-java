/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#mergeRecords(MergeRecordsRequest)}.
 * <p>
 * Create a new empty result table (specified by {@code tableName}), and insert
 * all records from source tables (specified by {@code sourceTableNames}) based
 * on the field mapping information (specified by {@code fieldMaps}). The field
 * map (specified by {@code fieldMaps}) holds the user specified maps of target
 * table column names to source table columns.
 */
public class MergeRecordsRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("MergeRecordsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("sourceTableNames").type().array().items().stringType().noDefault()
                .name("fieldMaps").type().array().items().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.MergeRecordsRequest.Options#COLLECTION_NAME
     * COLLECTION_NAME}: Name of a collection which is to contain the newly
     * created merged table (specified by {@code tableName}). If empty, then
     * the newly created merged table will be a top-level table. If the
     * collection does not allow duplicate types and it contains a table of the
     * same type as the given one, then this table creation request will fail.
     *         <li> {@link
     * com.gpudb.protocol.MergeRecordsRequest.Options#IS_REPLICATED
     * IS_REPLICATED}: For a merged table (specified by {@code tableName}),
     * indicates whether the table is to be replicated to all the database
     * ranks. This may be necessary when the table is to be joined with other
     * tables in a query.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MergeRecordsRequest.Options#FALSE FALSE}.
     *         <li> {@link com.gpudb.protocol.MergeRecordsRequest.Options#TTL
     * TTL}: Sets the TTL of the merged table or collection (specified by
     * {@code tableName}). The value must be the desired TTL in minutes.
     *         <li> {@link
     * com.gpudb.protocol.MergeRecordsRequest.Options#CHUNK_SIZE CHUNK_SIZE}:
     * If provided this indicates the chunk size to be used for the merged
     * table.
     * </ul>
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Name of a collection which is to contain the newly created merged
         * table (specified by {@code tableName}). If empty, then the newly
         * created merged table will be a top-level table. If the collection
         * does not allow duplicate types and it contains a table of the same
         * type as the given one, then this table creation request will fail.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * For a merged table (specified by {@code tableName}), indicates
         * whether the table is to be replicated to all the database ranks.
         * This may be necessary when the table is to be joined with other
         * tables in a query.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MergeRecordsRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.MergeRecordsRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MergeRecordsRequest.Options#FALSE FALSE}.
         */
        public static final String IS_REPLICATED = "is_replicated";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Sets the TTL of the merged table or collection (specified by {@code
         * tableName}). The value must be the desired TTL in minutes.
         */
        public static final String TTL = "ttl";

        /**
         * If provided this indicates the chunk size to be used for the merged
         * table.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        private Options() {  }
    }

    private String tableName;
    private List<String> sourceTableNames;
    private List<Map<String, String>> fieldMaps;
    private Map<String, String> options;


    /**
     * Constructs a MergeRecordsRequest object with default parameters.
     */
    public MergeRecordsRequest() {
        tableName = "";
        sourceTableNames = new ArrayList<>();
        fieldMaps = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a MergeRecordsRequest object with the specified parameters.
     * 
     * @param tableName  The new result table name for the records to be
     *                   merged.  Must NOT be an existing table.
     * @param sourceTableNames  The list of source table names to get the
     *                          records from. Must be existing table names.
     * @param fieldMaps  Contains the mapping of column names from result table
     *                   (specified by {@code tableName}) as the keys, and
     *                   corresponding column names from a table from source
     *                   tables (specified by {@code sourceTableNames}). Must
     *                   be existing column names in source table and target
     *                   table, and their types must be matched.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created merged table (specified by
     *                 {@code tableName}). If empty, then the newly created
     *                 merged table will be a top-level table. If the
     *                 collection does not allow duplicate types and it
     *                 contains a table of the same type as the given one, then
     *                 this table creation request will fail.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: For a merged table (specified by {@code
     *                 tableName}), indicates whether the table is to be
     *                 replicated to all the database ranks. This may be
     *                 necessary when the table is to be joined with other
     *                 tables in a query.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TTL TTL}:
     *                 Sets the TTL of the merged table or collection
     *                 (specified by {@code tableName}). The value must be the
     *                 desired TTL in minutes.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: If provided this indicates the chunk size
     *                 to be used for the merged table.
     *                 </ul>
     * 
     */
    public MergeRecordsRequest(String tableName, List<String> sourceTableNames, List<Map<String, String>> fieldMaps, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.sourceTableNames = (sourceTableNames == null) ? new ArrayList<String>() : sourceTableNames;
        this.fieldMaps = (fieldMaps == null) ? new ArrayList<Map<String, String>>() : fieldMaps;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return The new result table name for the records to be merged.  Must
     *         NOT be an existing table.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  The new result table name for the records to be
     *                   merged.  Must NOT be an existing table.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MergeRecordsRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return The list of source table names to get the records from. Must be
     *         existing table names.
     * 
     */
    public List<String> getSourceTableNames() {
        return sourceTableNames;
    }

    /**
     * 
     * @param sourceTableNames  The list of source table names to get the
     *                          records from. Must be existing table names.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MergeRecordsRequest setSourceTableNames(List<String> sourceTableNames) {
        this.sourceTableNames = (sourceTableNames == null) ? new ArrayList<String>() : sourceTableNames;
        return this;
    }

    /**
     * 
     * @return Contains the mapping of column names from result table
     *         (specified by {@code tableName}) as the keys, and corresponding
     *         column names from a table from source tables (specified by
     *         {@code sourceTableNames}). Must be existing column names in
     *         source table and target table, and their types must be matched.
     * 
     */
    public List<Map<String, String>> getFieldMaps() {
        return fieldMaps;
    }

    /**
     * 
     * @param fieldMaps  Contains the mapping of column names from result table
     *                   (specified by {@code tableName}) as the keys, and
     *                   corresponding column names from a table from source
     *                   tables (specified by {@code sourceTableNames}). Must
     *                   be existing column names in source table and target
     *                   table, and their types must be matched.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MergeRecordsRequest setFieldMaps(List<Map<String, String>> fieldMaps) {
        this.fieldMaps = (fieldMaps == null) ? new ArrayList<Map<String, String>>() : fieldMaps;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#COLLECTION_NAME
     *         COLLECTION_NAME}: Name of a collection which is to contain the
     *         newly created merged table (specified by {@code tableName}). If
     *         empty, then the newly created merged table will be a top-level
     *         table. If the collection does not allow duplicate types and it
     *         contains a table of the same type as the given one, then this
     *         table creation request will fail.
     *                 <li> {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#IS_REPLICATED
     *         IS_REPLICATED}: For a merged table (specified by {@code
     *         tableName}), indicates whether the table is to be replicated to
     *         all the database ranks. This may be necessary when the table is
     *         to be joined with other tables in a query.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#TTL TTL}: Sets
     *         the TTL of the merged table or collection (specified by {@code
     *         tableName}). The value must be the desired TTL in minutes.
     *                 <li> {@link
     *         com.gpudb.protocol.MergeRecordsRequest.Options#CHUNK_SIZE
     *         CHUNK_SIZE}: If provided this indicates the chunk size to be
     *         used for the merged table.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created merged table (specified by
     *                 {@code tableName}). If empty, then the newly created
     *                 merged table will be a top-level table. If the
     *                 collection does not allow duplicate types and it
     *                 contains a table of the same type as the given one, then
     *                 this table creation request will fail.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: For a merged table (specified by {@code
     *                 tableName}), indicates whether the table is to be
     *                 replicated to all the database ranks. This may be
     *                 necessary when the table is to be joined with other
     *                 tables in a query.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TTL TTL}:
     *                 Sets the TTL of the merged table or collection
     *                 (specified by {@code tableName}). The value must be the
     *                 desired TTL in minutes.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: If provided this indicates the chunk size
     *                 to be used for the merged table.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MergeRecordsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.sourceTableNames;

            case 2:
                return this.fieldMaps;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.sourceTableNames = (List<String>)value;
                break;

            case 2:
                this.fieldMaps = (List<Map<String, String>>)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        MergeRecordsRequest that = (MergeRecordsRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.sourceTableNames.equals( that.sourceTableNames )
                 && this.fieldMaps.equals( that.fieldMaps )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceTableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceTableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "fieldMaps" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.fieldMaps ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.sourceTableNames.hashCode();
        hashCode = (31 * hashCode) + this.fieldMaps.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
