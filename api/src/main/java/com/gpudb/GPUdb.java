/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb;

import com.gpudb.protocol.*;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;

/**
 * Object that provides access to a specific GPUdb server. {@code GPUdb}
 * instances are thread safe and may be used from any number of threads
 * simultaneously.
 */
public class GPUdb extends GPUdbBase {

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using default options.  Note that these options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(String url) throws GPUdbException {
        super(url, new Options());
    }

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using default options.  Note that these options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(URL url) throws GPUdbException {
        super(url, new Options());
    }

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server with the
     * specified URLs using default options.  At any given time, one
     * URL (initially selected at random from the list) will be active
     * and used for all GPUdb calls, but in the event of failure, the
     * other URLs will be tried in order, and if a working one is found
     * it will become the new active URL.  Note that the default options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     *
     * @param urls  The URLs of the GPUdb server.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(List<URL> urls) throws GPUdbException {
        super(urls, new Options());
    }

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using the specified options.  Note that these
     * options cannot be changed subsequently; to use different options,
     * a new {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.
     * 
     * @param options  The options to use.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(String url, Options options) throws GPUdbException {
        super(url, options);
    }
    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using the specified options.  Note that these
     * options cannot be changed subsequently; to use different options,
     * a new {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.
     * 
     * @param options  The options to use.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(URL url, Options options) throws GPUdbException {
        super(url, options);
    }
    /**
     * Creates a {@link GPUdb} instance for the GPUdb server with the
     * specified URLs using the specified options.  At any given time,
     * one URL (initially selected at random from the list) will be active
     * and used for all GPUdb calls, but in the event of failure, the
     * other URLs will be tried in order, and if a working one is found
     * it will become the new active URL.  Note that the specified options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     *
     * @param urls  The URLs of the GPUdb server.
     *
     * @param options  The options to use.
     *
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(List<URL> urls, Options options) throws GPUdbException {
        super(urls, options);
    }


    /**
     * Add a new node to the GPUdb cluster. By default this will only add the
     * node to the cluster, but will not be assigned any data shards. Set the
     * {@code reshard} option to {@code true} to move some shards from the
     * other nodes in the cluster to this node.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAddNodeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAddNodeResponse adminAddNode(AdminAddNodeRequest request) throws GPUdbException {
        AdminAddNodeResponse actualResponse_ = new AdminAddNodeResponse();
        submitRequest("/admin/add/node", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Add a new node to the GPUdb cluster. By default this will only add the
     * node to the cluster, but will not be assigned any data shards. Set the
     * {@code reshard} option to {@code true} to move some shards from the
     * other nodes in the cluster to this node.
     * 
     * @param hostName  host name of the node being added to the system.
     * @param gpuIndex
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#RESHARD
     *                 RESHARD}: If {@code true}, then some of the shards from
     *                 all the existing nodes will be moved to the new node
     *                 being added. Note that for big clusters, this data
     *                 transfer could be time consuming and also result in
     *                 delay in responding to queries for busy clusters.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminAddNodeRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAddNodeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAddNodeResponse adminAddNode(String hostName, int gpuIndex, Map<String, String> options) throws GPUdbException {
        AdminAddNodeRequest actualRequest_ = new AdminAddNodeRequest(hostName, gpuIndex, options);
        AdminAddNodeResponse actualResponse_ = new AdminAddNodeResponse();
        submitRequest("/admin/add/node", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Update the system config file.  Updates to the config file are only
     * permitted when the system is stopped.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterConfigurationResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterConfigurationResponse adminAlterConfiguration(AdminAlterConfigurationRequest request) throws GPUdbException {
        AdminAlterConfigurationResponse actualResponse_ = new AdminAlterConfigurationResponse();
        submitRequest("/admin/alter/configuration", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Update the system config file.  Updates to the config file are only
     * permitted when the system is stopped.
     * 
     * @param configString  updated contents of the config file.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterConfigurationResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterConfigurationResponse adminAlterConfiguration(String configString, Map<String, String> options) throws GPUdbException {
        AdminAlterConfigurationRequest actualRequest_ = new AdminAlterConfigurationRequest(configString, options);
        AdminAlterConfigurationResponse actualResponse_ = new AdminAlterConfigurationResponse();
        submitRequest("/admin/alter/configuration", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Perform the requested action on a list of one or more job(s) . Currently
     * only cancelling filter, aggregate and get records reqeusts are
     * supported. Based on the type of job and the current state of execution,
     * the action may not be successfully executed. The final result of the
     * attempted actions for each specified job is returned in the status array
     * of the response.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterJobsResponse adminAlterJobs(AdminAlterJobsRequest request) throws GPUdbException {
        AdminAlterJobsResponse actualResponse_ = new AdminAlterJobsResponse();
        submitRequest("/admin/alter/jobs", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Perform the requested action on a list of one or more job(s) . Currently
     * only cancelling filter, aggregate and get records reqeusts are
     * supported. Based on the type of job and the current state of execution,
     * the action may not be successfully executed. The final result of the
     * attempted actions for each specified job is returned in the status array
     * of the response.
     * 
     * @param jobIds  Jobs to be modified.
     * @param action  Action to be performed on the jobs specified by job_ids.
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AdminAlterJobsRequest.Action#CANCEL
     *                CANCEL}
     *                </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterJobsResponse adminAlterJobs(List<Integer> jobIds, String action, Map<String, String> options) throws GPUdbException {
        AdminAlterJobsRequest actualRequest_ = new AdminAlterJobsRequest(jobIds, action, options);
        AdminAlterJobsResponse actualResponse_ = new AdminAlterJobsResponse();
        submitRequest("/admin/alter/jobs", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Specify the mapping of the shards to the various ranks in the cluster.
     * In most cases, it should be sufficient to let the system automatically
     * distribute the shards evenly across the available ranks. However, this
     * endpoint can be used to move shards for various administrative reasons,
     * say in case of heterogeneous node clusters.  It should be noted that the
     * system may reassign the shards the when the number of nodes in the
     * cluster changes or the cluster is rebalanced.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterShardsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterShardsResponse adminAlterShards(AdminAlterShardsRequest request) throws GPUdbException {
        AdminAlterShardsResponse actualResponse_ = new AdminAlterShardsResponse();
        submitRequest("/admin/alter/shards", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Specify the mapping of the shards to the various ranks in the cluster.
     * In most cases, it should be sufficient to let the system automatically
     * distribute the shards evenly across the available ranks. However, this
     * endpoint can be used to move shards for various administrative reasons,
     * say in case of heterogeneous node clusters.  It should be noted that the
     * system may reassign the shards the when the number of nodes in the
     * cluster changes or the cluster is rebalanced.
     * 
     * @param version
     * @param useIndex  Set to true when only the shards being moved are
     *                  specified in the request.  The index must indicate the
     *                  shards being moved.
     * @param rank  node to which the shard will be moved.
     * @param tom  Toms to which the shard will be moved.
     * @param index  the shard which is being moved.  When use_index is set to
     *               true, size of this array must equal the size of rank/tom
     *               array.
     * @param backupMapList  List of rank_tom integers, for which backup toms
     *                       are defined
     * @param backupMapValues  List of the backup rank_tom(s) for each rank_tom
     *                         in backup_map_list
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterShardsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterShardsResponse adminAlterShards(long version, boolean useIndex, List<Integer> rank, List<Integer> tom, List<Integer> index, List<Integer> backupMapList, List<List<Integer>> backupMapValues, Map<String, String> options) throws GPUdbException {
        AdminAlterShardsRequest actualRequest_ = new AdminAlterShardsRequest(version, useIndex, rank, tom, index, backupMapList, backupMapValues, options);
        AdminAlterShardsResponse actualResponse_ = new AdminAlterShardsResponse();
        submitRequest("/admin/alter/shards", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Take the system offline. When the system is offline, no user operations
     * can be performed with the exception of a system shutdown.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminOfflineResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminOfflineResponse adminOffline(AdminOfflineRequest request) throws GPUdbException {
        AdminOfflineResponse actualResponse_ = new AdminOfflineResponse();
        submitRequest("/admin/offline", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Take the system offline. When the system is offline, no user operations
     * can be performed with the exception of a system shutdown.
     * 
     * @param offline  Set to true if desired state is offline.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Offline#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Offline#FALSE
     *                 FALSE}
     *                 </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Options#FLUSH_TO_DISK
     *                 FLUSH_TO_DISK}: Flush to disk when going offline
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminOfflineResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminOfflineResponse adminOffline(boolean offline, Map<String, String> options) throws GPUdbException {
        AdminOfflineRequest actualRequest_ = new AdminOfflineRequest(offline, options);
        AdminOfflineResponse actualResponse_ = new AdminOfflineResponse();
        submitRequest("/admin/offline", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Rebalance the cluster so that all the nodes contain approximately equal
     * number of records.  The rebalance will also cause the shards to be (as
     * much as possible) equally distributed across all the ranks. Note that
     * the system may move any shards that were moved by system administrator
     * using {@link GPUdb#adminAlterShards(AdminAlterShardsRequest)}
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRebalanceResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRebalanceResponse adminRebalance(AdminRebalanceRequest request) throws GPUdbException {
        AdminRebalanceResponse actualResponse_ = new AdminRebalanceResponse();
        submitRequest("/admin/rebalance", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Rebalance the cluster so that all the nodes contain approximately equal
     * number of records.  The rebalance will also cause the shards to be (as
     * much as possible) equally distributed across all the ranks. Note that
     * the system may move any shards that were moved by system administrator
     * using {@link GPUdb#adminAlterShards(long, boolean, List, List, List,
     * List, List, Map)}
     * 
     * @param tableNames  Sepcify the tables here if only specific tables have
     *                    to be rebalanced.  Leave this empty to rebalance all
     *                    the tables.  Note that only the tables which have no
     *                    primary or shard key can be rebalanced.
     * @param action  Specify 'start' to start rebalancing the cluster or
     *                'stop' to prematurely stop a previsouly issued rebalance
     *                request.
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AdminRebalanceRequest.Action#START
     *                START}
     *                        <li> {@link
     *                com.gpudb.protocol.AdminRebalanceRequest.Action#STOP
     *                STOP}
     *                </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#RESHARD
     *                 RESHARD}: If {@code true}, then all the nodes in the
     *                 cluster will be assigned approximately the same number
     *                 of shards. Note that for big clusters, this data
     *                 transfer could be time consuming and also result in
     *                 delay in responding to queries for busy clusters.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRebalanceResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRebalanceResponse adminRebalance(List<String> tableNames, String action, Map<String, String> options) throws GPUdbException {
        AdminRebalanceRequest actualRequest_ = new AdminRebalanceRequest(tableNames, action, options);
        AdminRebalanceResponse actualResponse_ = new AdminRebalanceResponse();
        submitRequest("/admin/rebalance", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Remove a node from the cluster.  Note that this operation could take a
     * long time to complete for big clusters.  The data is transferred to
     * other nodes in the cluster before the node is removed.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRemoveNodeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRemoveNodeResponse adminRemoveNode(AdminRemoveNodeRequest request) throws GPUdbException {
        AdminRemoveNodeResponse actualResponse_ = new AdminRemoveNodeResponse();
        submitRequest("/admin/remove/node", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Remove a node from the cluster.  Note that this operation could take a
     * long time to complete for big clusters.  The data is transferred to
     * other nodes in the cluster before the node is removed.
     * 
     * @param rank  Rank number of the node being removed from the cluster.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#RESHARD
     *                 RESHARD}: When {@code true}, then the shards from nodes
     *                 will be moved to the other nodes in the cluster. When
     *                 false, then the node will only be removed from the
     *                 cluster if the node does not contain any data shards,
     *                 otherwise an error is returned.  Note that for big
     *                 clusters, this data transfer could be time consuming and
     *                 also result in delay in responding to queries for busy
     *                 clusters.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#FORCE
     *                 FORCE}: When {@code true}, the rank is immediately
     *                 shutdown and removed from the cluster.  This will result
     *                 in loss of any data that is present in the node at the
     *                 time of the request.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRemoveNodeRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRemoveNodeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRemoveNodeResponse adminRemoveNode(int rank, Map<String, String> options) throws GPUdbException {
        AdminRemoveNodeRequest actualRequest_ = new AdminRemoveNodeRequest(rank, options);
        AdminRemoveNodeResponse actualResponse_ = new AdminRemoveNodeResponse();
        submitRequest("/admin/remove/node", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Show the current system configuration file.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowConfigurationResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowConfigurationResponse adminShowConfiguration(AdminShowConfigurationRequest request) throws GPUdbException {
        AdminShowConfigurationResponse actualResponse_ = new AdminShowConfigurationResponse();
        submitRequest("/admin/show/configuration", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Show the current system configuration file.
     * 
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowConfigurationResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowConfigurationResponse adminShowConfiguration(Map<String, String> options) throws GPUdbException {
        AdminShowConfigurationRequest actualRequest_ = new AdminShowConfigurationRequest(options);
        AdminShowConfigurationResponse actualResponse_ = new AdminShowConfigurationResponse();
        submitRequest("/admin/show/configuration", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Get a list of the current jobs in GPUdb.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowJobsResponse adminShowJobs(AdminShowJobsRequest request) throws GPUdbException {
        AdminShowJobsResponse actualResponse_ = new AdminShowJobsResponse();
        submitRequest("/admin/show/jobs", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Get a list of the current jobs in GPUdb.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#SHOW_DETAILS
     *                 SHOW_DETAILS}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowJobsResponse adminShowJobs(Map<String, String> options) throws GPUdbException {
        AdminShowJobsRequest actualRequest_ = new AdminShowJobsRequest(options);
        AdminShowJobsResponse actualResponse_ = new AdminShowJobsResponse();
        submitRequest("/admin/show/jobs", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Show the mapping of shards to the corresponding rank and tom.  The
     * response message contains list of 16384 (total number of shards in the
     * system) Rank and TOM numbers corresponding to each shard.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowShardsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowShardsResponse adminShowShards(AdminShowShardsRequest request) throws GPUdbException {
        AdminShowShardsResponse actualResponse_ = new AdminShowShardsResponse();
        submitRequest("/admin/show/shards", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Show the mapping of shards to the corresponding rank and tom.  The
     * response message contains list of 16384 (total number of shards in the
     * system) Rank and TOM numbers corresponding to each shard.
     * 
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowShardsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowShardsResponse adminShowShards(Map<String, String> options) throws GPUdbException {
        AdminShowShardsRequest actualRequest_ = new AdminShowShardsRequest(options);
        AdminShowShardsResponse actualResponse_ = new AdminShowShardsResponse();
        submitRequest("/admin/show/shards", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Exits the database server application.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShutdownResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShutdownResponse adminShutdown(AdminShutdownRequest request) throws GPUdbException {
        AdminShutdownResponse actualResponse_ = new AdminShutdownResponse();
        submitRequest("/admin/shutdown", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Exits the database server application.
     * 
     * @param exitType  Reserved for future use. User can pass an empty string.
     * @param authorization  No longer used. User can pass an empty string.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShutdownResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShutdownResponse adminShutdown(String exitType, String authorization, Map<String, String> options) throws GPUdbException {
        AdminShutdownRequest actualRequest_ = new AdminShutdownRequest(exitType, authorization, options);
        AdminShutdownResponse actualResponse_ = new AdminShutdownResponse();
        submitRequest("/admin/shutdown", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminVerifyDbResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminVerifyDbResponse adminVerifyDb(AdminVerifyDbRequest request) throws GPUdbException {
        AdminVerifyDbResponse actualResponse_ = new AdminVerifyDbResponse();
        submitRequest("/admin/verifydb", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#REBUILD_ON_ERROR
     *                 REBUILD_ON_ERROR}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#VERIFY_PERSIST
     *                 VERIFY_PERSIST}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminVerifyDbResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminVerifyDbResponse adminVerifyDb(Map<String, String> options) throws GPUdbException {
        AdminVerifyDbRequest actualRequest_ = new AdminVerifyDbRequest(options);
        AdminVerifyDbResponse actualResponse_ = new AdminVerifyDbResponse();
        submitRequest("/admin/verifydb", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the convex hull for the values in a table
     * specified by {@code tableName}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateConvexHullResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateConvexHullResponse aggregateConvexHull(AggregateConvexHullRequest request) throws GPUdbException {
        AggregateConvexHullResponse actualResponse_ = new AggregateConvexHullResponse();
        submitRequest("/aggregate/convexhull", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the convex hull for the values in a table
     * specified by {@code tableName}.
     * 
     * @param tableName  Name of Table on which the operation will be
     *                   performed. Must be an existing table.  It can not be a
     *                   collection.
     * @param xColumnName  Name of the column containing the x coordinates of
     *                     the points for the operation being performed.
     * @param yColumnName  Name of the column containing the y coordinates of
     *                     the points for the operation being performed.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateConvexHullResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateConvexHullResponse aggregateConvexHull(String tableName, String xColumnName, String yColumnName, Map<String, String> options) throws GPUdbException {
        AggregateConvexHullRequest actualRequest_ = new AggregateConvexHullRequest(tableName, xColumnName, yColumnName, options);
        AggregateConvexHullResponse actualResponse_ = new AggregateConvexHullResponse();
        submitRequest("/aggregate/convexhull", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the {@code offset} and {@code limit}
     * parameters. For example, to get 10 groups with the largest counts the
     * inputs would be: limit=10, options={"sort_order":"descending",
     * "sort_by":"value"}.
     * <p>
     * {@code options} can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column
     * names must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; column/aggregation
     * expressions will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the grouping column(s), the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available when any of the values of {@code columnNames} is an
     * unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawAggregateGroupByResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawAggregateGroupByResponse aggregateGroupByRaw(AggregateGroupByRequest request) throws GPUdbException {
        RawAggregateGroupByResponse actualResponse_ = new RawAggregateGroupByResponse();
        submitRequest("/aggregate/groupby", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the {@code offset} and {@code limit}
     * parameters. For example, to get 10 groups with the largest counts the
     * inputs would be: limit=10, options={"sort_order":"descending",
     * "sort_by":"value"}.
     * <p>
     * {@code options} can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column
     * names must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; column/aggregation
     * expressions will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the grouping column(s), the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available when any of the values of {@code columnNames} is an
     * unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateGroupByResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateGroupByResponse aggregateGroupBy(AggregateGroupByRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawAggregateGroupByResponse actualResponse_ = new RawAggregateGroupByResponse();
        submitRequest("/aggregate/groupby", request, actualResponse_, false);
        AggregateGroupByResponse response_ = new AggregateGroupByResponse();
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the {@code offset} and {@code limit}
     * parameters. For example, to get 10 groups with the largest counts the
     * inputs would be: limit=10, options={"sort_order":"descending",
     * "sort_by":"value"}.
     * <p>
     * {@code options} can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column
     * names must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; column/aggregation
     * expressions will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the grouping column(s), the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available when any of the values of {@code columnNames} is an
     * unrestricted-length string.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table/view/collection.
     * @param columnNames  List of one or more column names, expressions, and
     *                     aggregate expressions.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the table specified in {@code result_table}. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created. If empty, then the table
     *                 will be a top-level table.  Additionally this option is
     *                 invalid if {@code tableName} is a collection.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#EXPRESSION
     *                 EXPRESSION}: Filter expression to apply to the table
     *                 prior to computing the aggregate group by.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#HAVING
     *                 HAVING}: Filter expression to apply to the aggregated
     *                 results.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#ASCENDING
     *                 ASCENDING}: Indicates that the returned values should be
     *                 sorted in ascending order.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#DESCENDING
     *                 DESCENDING}: Indicates that the returned values should
     *                 be sorted in descending order.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#SORT_BY
     *                 SORT_BY}: String determining how the results are sorted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#KEY
     *                 KEY}: Indicates that the returned values should be
     *                 sorted by key, which corresponds to the grouping
     *                 columns. If you have multiple grouping columns (and are
     *                 sorting by key), it will first sort the first grouping
     *                 column, then the second grouping column, etc.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#VALUE
     *                 VALUE}: Indicates that the returned values should be
     *                 sorted by value, which corresponds to the aggregates. If
     *                 you have multiple aggregates (and are sorting by value),
     *                 it will first sort by the first aggregate, then the
     *                 second aggregate, etc.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#KEY
     *                 KEY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE
     *                 RESULT_TABLE}: The name of the table used to store the
     *                 results. Has the same naming restrictions as <a
     *                 href="../../../../concepts/tables.html"
     *                 target="_top">tables</a>. Column names (group-by and
     *                 aggregate fields) need to be given aliases e.g.
     *                 ["FChar256 as fchar256", "sum(FDouble) as sfd"].  If
     *                 present, no results are returned in the response.  This
     *                 option is not available if one of the grouping
     *                 attributes is an unrestricted string (i.e.; not charN)
     *                 type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE_PERSIST
     *                 RESULT_TABLE_PERSIST}: If {@code true}, then the result
     *                 table specified in {@code result_table} will be
     *                 persisted and will not expire unless a {@code ttl} is
     *                 specified.   If {@code false}, then the result table
     *                 will be an in-memory table and will expire unless a
     *                 {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE_FORCE_REPLICATED
     *                 RESULT_TABLE_FORCE_REPLICATED}: Force the result table
     *                 to be replicated (ignores any sharding). Must be used in
     *                 combination with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE_GENERATE_PK
     *                 RESULT_TABLE_GENERATE_PK}: If 'true' then set a primary
     *                 key for the result table. Must be used in combination
     *                 with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 result_table}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for the
     *                 result table. Must be used in combination with the
     *                 {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: If {@code true} then the columns of
     *                 the groupby result table will be cached on the GPU. Must
     *                 be used in combination with the {@code result_table}
     *                 option.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateGroupByResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateGroupByResponse aggregateGroupBy(String tableName, List<String> columnNames, long offset, long limit, Map<String, String> options) throws GPUdbException {
        AggregateGroupByRequest actualRequest_ = new AggregateGroupByRequest(tableName, columnNames, offset, limit, null, options);
        RawAggregateGroupByResponse actualResponse_ = new RawAggregateGroupByResponse();
        submitRequest("/aggregate/groupby", actualRequest_, actualResponse_, false);
        AggregateGroupByResponse response_ = new AggregateGroupByResponse();
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Performs a histogram calculation given a table, a column, and an
     * interval function. The {@code interval} is used to produce bins of that
     * size and the result, computed over the records falling within each bin,
     * is returned.  For each bin, the start value is inclusive, but the end
     * value is exclusive--except for the very last bin for which the end value
     * is also inclusive.  The value returned for each bin is the number of
     * records in it, except when a column name is provided as a *value_column*
     * in {@code options}.  In this latter case the sum of the values
     * corresponding to the *value_column* is used as the result instead.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateHistogramResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateHistogramResponse aggregateHistogram(AggregateHistogramRequest request) throws GPUdbException {
        AggregateHistogramResponse actualResponse_ = new AggregateHistogramResponse();
        submitRequest("/aggregate/histogram", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Performs a histogram calculation given a table, a column, and an
     * interval function. The {@code interval} is used to produce bins of that
     * size and the result, computed over the records falling within each bin,
     * is returned.  For each bin, the start value is inclusive, but the end
     * value is exclusive--except for the very last bin for which the end value
     * is also inclusive.  The value returned for each bin is the number of
     * records in it, except when a column name is provided as a *value_column*
     * in {@code options}.  In this latter case the sum of the values
     * corresponding to the *value_column* is used as the result instead.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table or collection.
     * @param columnName  Name of a column or an expression of one or more
     *                    column names over which the histogram will be
     *                    calculated.
     * @param start  Lower end value of the histogram interval, inclusive.
     * @param end  Upper end value of the histogram interval, inclusive.
     * @param interval  The size of each bin within the start and end
     *                  parameters.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateHistogramRequest.Options#VALUE_COLUMN
     *                 VALUE_COLUMN}: The name of the column to use when
     *                 calculating the bin values (values are summed).  The
     *                 column must be a numerical type (int, double, long,
     *                 float).
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateHistogramResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateHistogramResponse aggregateHistogram(String tableName, String columnName, double start, double end, double interval, Map<String, String> options) throws GPUdbException {
        AggregateHistogramRequest actualRequest_ = new AggregateHistogramRequest(tableName, columnName, start, end, interval, options);
        AggregateHistogramResponse actualResponse_ = new AggregateHistogramResponse();
        submitRequest("/aggregate/histogram", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * This endpoint runs the k-means algorithm - a heuristic algorithm that
     * attempts to do k-means clustering.  An ideal k-means clustering
     * algorithm selects k points such that the sum of the mean squared
     * distances of each member of the set to the nearest of the k points is
     * minimized.  The k-means algorithm however does not necessarily produce
     * such an ideal cluster.   It begins with a randomly selected set of k
     * points and then refines the location of the points iteratively and
     * settles to a local minimum.  Various parameters and options are provided
     * to control the heuristic search.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateKMeansResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateKMeansResponse aggregateKMeans(AggregateKMeansRequest request) throws GPUdbException {
        AggregateKMeansResponse actualResponse_ = new AggregateKMeansResponse();
        submitRequest("/aggregate/kmeans", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * This endpoint runs the k-means algorithm - a heuristic algorithm that
     * attempts to do k-means clustering.  An ideal k-means clustering
     * algorithm selects k points such that the sum of the mean squared
     * distances of each member of the set to the nearest of the k points is
     * minimized.  The k-means algorithm however does not necessarily produce
     * such an ideal cluster.   It begins with a randomly selected set of k
     * points and then refines the location of the points iteratively and
     * settles to a local minimum.  Various parameters and options are provided
     * to control the heuristic search.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table or collection.
     * @param columnNames  List of column names on which the operation would be
     *                     performed. If n columns are provided then each of
     *                     the k result points will have n dimensions
     *                     corresponding to the n columns.
     * @param k  The number of mean points to be determined by the algorithm.
     * @param tolerance  Stop iterating when the distances between successive
     *                   points is less than the given tolerance.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateKMeansRequest.Options#WHITEN
     *                 WHITEN}: When set to 1 each of the columns is first
     *                 normalized by its stdv - default is not to whiten.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateKMeansRequest.Options#MAX_ITERS
     *                 MAX_ITERS}: Number of times to try to hit the tolerance
     *                 limit before giving up - default is 10.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateKMeansRequest.Options#NUM_TRIES
     *                 NUM_TRIES}: Number of times to run the k-means algorithm
     *                 with a different randomly selected starting points -
     *                 helps avoid local minimum. Default is 1.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateKMeansResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateKMeansResponse aggregateKMeans(String tableName, List<String> columnNames, int k, double tolerance, Map<String, String> options) throws GPUdbException {
        AggregateKMeansRequest actualRequest_ = new AggregateKMeansRequest(tableName, columnNames, k, tolerance, options);
        AggregateKMeansResponse actualResponse_ = new AggregateKMeansResponse();
        submitRequest("/aggregate/kmeans", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum values of a particular
     * column in a table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxResponse aggregateMinMax(AggregateMinMaxRequest request) throws GPUdbException {
        AggregateMinMaxResponse actualResponse_ = new AggregateMinMaxResponse();
        submitRequest("/aggregate/minmax", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum values of a particular
     * column in a table.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table.
     * @param columnName  Name of a column or an expression of one or more
     *                    column on which the min-max will be calculated.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxResponse aggregateMinMax(String tableName, String columnName, Map<String, String> options) throws GPUdbException {
        AggregateMinMaxRequest actualRequest_ = new AggregateMinMaxRequest(tableName, columnName, options);
        AggregateMinMaxResponse actualResponse_ = new AggregateMinMaxResponse();
        submitRequest("/aggregate/minmax", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum x- and y-coordinates of a
     * particular geospatial geometry column in a table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry(AggregateMinMaxGeometryRequest request) throws GPUdbException {
        AggregateMinMaxGeometryResponse actualResponse_ = new AggregateMinMaxGeometryResponse();
        submitRequest("/aggregate/minmax/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum x- and y-coordinates of a
     * particular geospatial geometry column in a table.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table.
     * @param columnName  Name of a geospatial geometry column on which the
     *                    min-max will be calculated.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry(String tableName, String columnName, Map<String, String> options) throws GPUdbException {
        AggregateMinMaxGeometryRequest actualRequest_ = new AggregateMinMaxGeometryRequest(tableName, columnName, options);
        AggregateMinMaxGeometryResponse actualResponse_ = new AggregateMinMaxGeometryResponse();
        submitRequest("/aggregate/minmax/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates the requested statistics of the given column(s) in a given
     * table.
     * <p>
     * The available statistics are {@code count} (number of total objects),
     * {@code mean}, {@code stdv} (standard deviation), {@code variance},
     * {@code skew}, {@code kurtosis}, {@code sum}, {@code min}, {@code max},
     * {@code weighted_average}, {@code cardinality} (unique count), {@code
     * estimated_cardinality}, {@code percentile} and {@code percentile_rank}.
     * <p>
     * Estimated cardinality is calculated by using the hyperloglog
     * approximation technique.
     * <p>
     * Percentiles and percentile ranks are approximate and are calculated
     * using the t-digest algorithm. They must include the desired {@code
     * percentile}/{@code percentile_rank}. To compute multiple percentiles
     * each value must be specified separately (i.e.
     * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
     * <p>
     * The weighted average statistic requires a {@code weight_column_name} to
     * be specified in {@code options}. The weighted average is then defined as
     * the sum of the products of {@code columnName} times the {@code
     * weight_column_name} values divided by the sum of the {@code
     * weight_column_name} values.
     * <p>
     * Additional columns can be used in the calculation of statistics via the
     * {@code additional_column_names} option.  Values in these columns will be
     * included in the overall aggregate calculation--individual aggregates
     * will not be calculated per additional column.  For instance, requesting
     * the {@code count} & {@code mean} of {@code columnName} x and {@code
     * additional_column_names} y & z, where x holds the numbers 1-10, y holds
     * 11-20, and z holds 21-30, would return the total number of x, y, & z
     * values (30), and the single average value across all x, y, & z values
     * (15.5).
     * <p>
     * The response includes a list of key/value pairs of each statistic
     * requested and its corresponding value.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsResponse aggregateStatistics(AggregateStatisticsRequest request) throws GPUdbException {
        AggregateStatisticsResponse actualResponse_ = new AggregateStatisticsResponse();
        submitRequest("/aggregate/statistics", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates the requested statistics of the given column(s) in a given
     * table.
     * <p>
     * The available statistics are {@code count} (number of total objects),
     * {@code mean}, {@code stdv} (standard deviation), {@code variance},
     * {@code skew}, {@code kurtosis}, {@code sum}, {@code min}, {@code max},
     * {@code weighted_average}, {@code cardinality} (unique count), {@code
     * estimated_cardinality}, {@code percentile} and {@code percentile_rank}.
     * <p>
     * Estimated cardinality is calculated by using the hyperloglog
     * approximation technique.
     * <p>
     * Percentiles and percentile ranks are approximate and are calculated
     * using the t-digest algorithm. They must include the desired {@code
     * percentile}/{@code percentile_rank}. To compute multiple percentiles
     * each value must be specified separately (i.e.
     * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
     * <p>
     * The weighted average statistic requires a {@code weight_column_name} to
     * be specified in {@code options}. The weighted average is then defined as
     * the sum of the products of {@code columnName} times the {@code
     * weight_column_name} values divided by the sum of the {@code
     * weight_column_name} values.
     * <p>
     * Additional columns can be used in the calculation of statistics via the
     * {@code additional_column_names} option.  Values in these columns will be
     * included in the overall aggregate calculation--individual aggregates
     * will not be calculated per additional column.  For instance, requesting
     * the {@code count} & {@code mean} of {@code columnName} x and {@code
     * additional_column_names} y & z, where x holds the numbers 1-10, y holds
     * 11-20, and z holds 21-30, would return the total number of x, y, & z
     * values (30), and the single average value across all x, y, & z values
     * (15.5).
     * <p>
     * The response includes a list of key/value pairs of each statistic
     * requested and its corresponding value.
     * 
     * @param tableName  Name of the table on which the statistics operation
     *                   will be performed.
     * @param columnName  Name of the primary column for which the statistics
     *                    are to be calculated.
     * @param stats  Comma separated list of the statistics to calculate, e.g.
     *               "sum,mean".
     *               Supported values:
     *               <ul>
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#COUNT
     *               COUNT}: Number of objects (independent of the given
     *               column(s)).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#MEAN
     *               MEAN}: Arithmetic mean (average), equivalent to sum/count.
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#STDV
     *               STDV}: Sample standard deviation (denominator is count-1).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#VARIANCE
     *               VARIANCE}: Unbiased sample variance (denominator is
     *               count-1).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#SKEW
     *               SKEW}: Skewness (third standardized moment).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#KURTOSIS
     *               KURTOSIS}: Kurtosis (fourth standardized moment).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#SUM
     *               SUM}: Sum of all values in the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#MIN
     *               MIN}: Minimum value of the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#MAX
     *               MAX}: Maximum value of the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#WEIGHTED_AVERAGE
     *               WEIGHTED_AVERAGE}: Weighted arithmetic mean (using the
     *               option {@code weight_column_name} as the weighting
     *               column).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#CARDINALITY
     *               CARDINALITY}: Number of unique values in the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#ESTIMATED_CARDINALITY
     *               ESTIMATED_CARDINALITY}: Estimate (via hyperloglog
     *               technique) of the number of unique values in the
     *               column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#PERCENTILE
     *               PERCENTILE}: Estimate (via t-digest) of the given
     *               percentile of the column(s) (percentile(50.0) will be an
     *               approximation of the median).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#PERCENTILE_RANK
     *               PERCENTILE_RANK}: Estimate (via t-digest) of the
     *               percentile rank of the given value in the column(s) (if
     *               the given value is the median of the column(s),
     *               percentile_rank(<median>) will return approximately 50.0).
     *               </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsRequest.Options#ADDITIONAL_COLUMN_NAMES
     *                 ADDITIONAL_COLUMN_NAMES}: A list of comma separated
     *                 column names over which statistics can be accumulated
     *                 along with the primary column.  All columns listed and
     *                 {@code columnName} must be of the same type.  Must not
     *                 include the column specified in {@code columnName} and
     *                 no column can be listed twice.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsRequest.Options#WEIGHT_COLUMN_NAME
     *                 WEIGHT_COLUMN_NAME}: Name of column used as weighting
     *                 attribute for the weighted average statistic.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsResponse aggregateStatistics(String tableName, String columnName, String stats, Map<String, String> options) throws GPUdbException {
        AggregateStatisticsRequest actualRequest_ = new AggregateStatisticsRequest(tableName, columnName, stats, options);
        AggregateStatisticsResponse actualResponse_ = new AggregateStatisticsResponse();
        submitRequest("/aggregate/statistics", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Divides the given set into bins and calculates statistics of the values
     * of a value-column in each bin.  The bins are based on the values of a
     * given binning-column.  The statistics that may be requested are mean,
     * stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
     * first, last and weighted average. In addition to the requested
     * statistics the count of total samples in each bin is returned. This
     * counts vector is just the histogram of the column used to divide the set
     * members into bins. The weighted average statistic requires a
     * weight_column to be specified in {@code options}. The weighted average
     * is then defined as the sum of the products of the value column times the
     * weight column divided by the sum of the weight column.
     * <p>
     * There are two methods for binning the set members. In the first, which
     * can be used for numeric valued binning-columns, a min, max and interval
     * are specified. The number of bins, nbins, is the integer upper bound of
     * (max-min)/interval. Values that fall in the range
     * [min+n\*interval,min+(n+1)\*interval) are placed in the nth bin where n
     * ranges from 0..nbin-2. The final bin is [min+(nbin-1)\*interval,max]. In
     * the second method, {@code options} bin_values specifies a list of
     * binning column values. Binning-columns whose value matches the nth
     * member of the bin_values list are placed in the nth bin. When a list is
     * provided the binning-column must be of type string or int.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsByRangeResponse aggregateStatisticsByRange(AggregateStatisticsByRangeRequest request) throws GPUdbException {
        AggregateStatisticsByRangeResponse actualResponse_ = new AggregateStatisticsByRangeResponse();
        submitRequest("/aggregate/statistics/byrange", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Divides the given set into bins and calculates statistics of the values
     * of a value-column in each bin.  The bins are based on the values of a
     * given binning-column.  The statistics that may be requested are mean,
     * stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
     * first, last and weighted average. In addition to the requested
     * statistics the count of total samples in each bin is returned. This
     * counts vector is just the histogram of the column used to divide the set
     * members into bins. The weighted average statistic requires a
     * weight_column to be specified in {@code options}. The weighted average
     * is then defined as the sum of the products of the value column times the
     * weight column divided by the sum of the weight column.
     * <p>
     * There are two methods for binning the set members. In the first, which
     * can be used for numeric valued binning-columns, a min, max and interval
     * are specified. The number of bins, nbins, is the integer upper bound of
     * (max-min)/interval. Values that fall in the range
     * [min+n\*interval,min+(n+1)\*interval) are placed in the nth bin where n
     * ranges from 0..nbin-2. The final bin is [min+(nbin-1)\*interval,max]. In
     * the second method, {@code options} bin_values specifies a list of
     * binning column values. Binning-columns whose value matches the nth
     * member of the bin_values list are placed in the nth bin. When a list is
     * provided the binning-column must be of type string or int.
     * 
     * @param tableName  Name of the table on which the ranged-statistics
     *                   operation will be performed.
     * @param selectExpression  For a non-empty expression statistics are
     *                          calculated for those records for which the
     *                          expression is true.
     * @param columnName  Name of the binning-column used to divide the set
     *                    samples into bins.
     * @param valueColumnName  Name of the value-column for which statistics
     *                         are to be computed.
     * @param stats  A string of comma separated list of the statistics to
     *               calculate, e.g. 'sum,mean'. Available statistics: mean,
     *               stdv (standard deviation), variance, skew, kurtosis, sum.
     * @param start  The lower bound of the binning-column.
     * @param end  The upper bound of the binning-column.
     * @param interval  The interval of a bin. Set members fall into bin i if
     *                  the binning-column falls in the range
     *                  [start+interval``*``i, start+interval``*``(i+1)).
     * @param options  Map of optional parameters:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#ADDITIONAL_COLUMN_NAMES
     *                 ADDITIONAL_COLUMN_NAMES}: A list of comma separated
     *                 value-column names over which statistics can be
     *                 accumulated along with the primary value_column.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#BIN_VALUES
     *                 BIN_VALUES}: A list of comma separated binning-column
     *                 values. Values that match the nth bin_values value are
     *                 placed in the nth bin.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#WEIGHT_COLUMN_NAME
     *                 WEIGHT_COLUMN_NAME}: Name of the column used as
     *                 weighting column for the weighted_average statistic.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#ORDER_COLUMN_NAME
     *                 ORDER_COLUMN_NAME}: Name of the column used for
     *                 candlestick charting techniques.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsByRangeResponse aggregateStatisticsByRange(String tableName, String selectExpression, String columnName, String valueColumnName, String stats, double start, double end, double interval, Map<String, String> options) throws GPUdbException {
        AggregateStatisticsByRangeRequest actualRequest_ = new AggregateStatisticsByRangeRequest(tableName, selectExpression, columnName, valueColumnName, stats, start, end, interval, options);
        AggregateStatisticsByRangeResponse actualResponse_ = new AggregateStatisticsByRangeResponse();
        submitRequest("/aggregate/statistics/byrange", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns all the unique values from a particular column (specified by
     * {@code columnName}) of a particular table (specified by {@code
     * tableName}). If {@code columnName} is a numeric column the values will
     * be in {@code binaryEncodedResponse}. Otherwise if {@code columnName} is
     * a string column the values will be in {@code jsonEncodedResponse}.  The
     * results can be paged via the {@code offset} and {@code limit}
     * parameters.
     * <p>
     * Columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     * <p>
     * To get the first 10 unique values sorted in descending order {@code
     * options} would be::
     * <p>
     * {"limit":"10","sort_order":"descending"}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column name
     * must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; any column expression
     * will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the {@code columnName}, the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available when the value of {@code columnName} is an
     * unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawAggregateUniqueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawAggregateUniqueResponse aggregateUniqueRaw(AggregateUniqueRequest request) throws GPUdbException {
        RawAggregateUniqueResponse actualResponse_ = new RawAggregateUniqueResponse();
        submitRequest("/aggregate/unique", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns all the unique values from a particular column (specified by
     * {@code columnName}) of a particular table (specified by {@code
     * tableName}). If {@code columnName} is a numeric column the values will
     * be in {@code binaryEncodedResponse}. Otherwise if {@code columnName} is
     * a string column the values will be in {@code jsonEncodedResponse}.  The
     * results can be paged via the {@code offset} and {@code limit}
     * parameters.
     * <p>
     * Columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     * <p>
     * To get the first 10 unique values sorted in descending order {@code
     * options} would be::
     * <p>
     * {"limit":"10","sort_order":"descending"}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column name
     * must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; any column expression
     * will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the {@code columnName}, the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available when the value of {@code columnName} is an
     * unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUniqueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUniqueResponse aggregateUnique(AggregateUniqueRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawAggregateUniqueResponse actualResponse_ = new RawAggregateUniqueResponse();
        submitRequest("/aggregate/unique", request, actualResponse_, false);
        AggregateUniqueResponse response_ = new AggregateUniqueResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Returns all the unique values from a particular column (specified by
     * {@code columnName}) of a particular table (specified by {@code
     * tableName}). If {@code columnName} is a numeric column the values will
     * be in {@code binaryEncodedResponse}. Otherwise if {@code columnName} is
     * a string column the values will be in {@code jsonEncodedResponse}.  The
     * results can be paged via the {@code offset} and {@code limit}
     * parameters.
     * <p>
     * Columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     * <p>
     * To get the first 10 unique values sorted in descending order {@code
     * options} would be::
     * <p>
     * {"limit":"10","sort_order":"descending"}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column name
     * must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; any column expression
     * will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the {@code columnName}, the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available when the value of {@code columnName} is an
     * unrestricted-length string.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table.
     * @param columnName  Name of the column or an expression containing one or
     *                    more column names on which the unique function would
     *                    be applied.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the table specified in {@code result_table}. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created. If empty, then the table
     *                 will be a top-level table.  Additionally this option is
     *                 invalid if {@code tableName} is a collection.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE
     *                 RESULT_TABLE}: The name of the table used to store the
     *                 results. If present, no results are returned in the
     *                 response. Has the same naming restrictions as <a
     *                 href="../../../../concepts/tables.html"
     *                 target="_top">tables</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE_PERSIST
     *                 RESULT_TABLE_PERSIST}: If {@code true}, then the result
     *                 table specified in {@code result_table} will be
     *                 persisted and will not expire unless a {@code ttl} is
     *                 specified.   If {@code false}, then the result table
     *                 will be an in-memory table and will expire unless a
     *                 {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE_FORCE_REPLICATED
     *                 RESULT_TABLE_FORCE_REPLICATED}: Force the result table
     *                 to be replicated (ignores any sharding). Must be used in
     *                 combination with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE_GENERATE_PK
     *                 RESULT_TABLE_GENERATE_PK}: If 'true' then set a primary
     *                 key for the result table. Must be used in combination
     *                 with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 result_table}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for the
     *                 result table. Must be used in combination with the
     *                 {@code result_table} option.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUniqueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUniqueResponse aggregateUnique(String tableName, String columnName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        AggregateUniqueRequest actualRequest_ = new AggregateUniqueRequest(tableName, columnName, offset, limit, null, options);
        RawAggregateUniqueResponse actualResponse_ = new RawAggregateUniqueResponse();
        submitRequest("/aggregate/unique", actualRequest_, actualResponse_, false);
        AggregateUniqueResponse response_ = new AggregateUniqueResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Rotate the column values into rows values.
     * <p>
     * The aggregate unpivot is used to normalize tables that are built for
     * cross tabular reporting purposes. The unpivot operator rotates the
     * column values for all the pivoted columns. A variable column, value
     * column and all columns from the source table except the unpivot columns
     * are projected into the result table. The variable column and value
     * columns in the result table indicate the pivoted column name and values
     * respectively.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawAggregateUnpivotResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawAggregateUnpivotResponse aggregateUnpivotRaw(AggregateUnpivotRequest request) throws GPUdbException {
        RawAggregateUnpivotResponse actualResponse_ = new RawAggregateUnpivotResponse();
        submitRequest("/aggregate/unpivot", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Rotate the column values into rows values.
     * <p>
     * The aggregate unpivot is used to normalize tables that are built for
     * cross tabular reporting purposes. The unpivot operator rotates the
     * column values for all the pivoted columns. A variable column, value
     * column and all columns from the source table except the unpivot columns
     * are projected into the result table. The variable column and value
     * columns in the result table indicate the pivoted column name and values
     * respectively.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUnpivotResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUnpivotResponse aggregateUnpivot(AggregateUnpivotRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawAggregateUnpivotResponse actualResponse_ = new RawAggregateUnpivotResponse();
        submitRequest("/aggregate/unpivot", request, actualResponse_, false);
        AggregateUnpivotResponse response_ = new AggregateUnpivotResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Rotate the column values into rows values.
     * <p>
     * The aggregate unpivot is used to normalize tables that are built for
     * cross tabular reporting purposes. The unpivot operator rotates the
     * column values for all the pivoted columns. A variable column, value
     * column and all columns from the source table except the unpivot columns
     * are projected into the result table. The variable column and value
     * columns in the result table indicate the pivoted column name and values
     * respectively.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table/view.
     * @param variableColumnName  Specifies the variable/parameter column name.
     * @param valueColumnName  Specifies the value column name.
     * @param pivotedColumns  List of one or more values typically the column
     *                        names of the input table. All the columns in the
     *                        source table must have the same data type.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the table specified in {@code result_table}. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created. If empty, then the table
     *                 will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#RESULT_TABLE
     *                 RESULT_TABLE}: The name of the table used to store the
     *                 results. Has the same naming restrictions as <a
     *                 href="../../../../concepts/tables.html"
     *                 target="_top">tables</a>. If present, no results are
     *                 returned in the response.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#RESULT_TABLE_PERSIST
     *                 RESULT_TABLE_PERSIST}: If {@code true}, then the result
     *                 table specified in {@code result_table} will be
     *                 persisted and will not expire unless a {@code ttl} is
     *                 specified.   If {@code false}, then the result table
     *                 will be an in-memory table and will expire unless a
     *                 {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#EXPRESSION
     *                 EXPRESSION}: Filter expression to apply to the table
     *                 prior to unpivot processing.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by; e.g. 'timestamp asc, x desc'.  The columns
     *                 specified must be present in input table.  If any alias
     *                 is given for any column name, the alias must be used,
     *                 rather than the original column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for the
     *                 result table. Must be used in combination with the
     *                 {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#LIMIT
     *                 LIMIT}: The number of records to keep.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 result_table}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUnpivotResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUnpivotResponse aggregateUnpivot(String tableName, String variableColumnName, String valueColumnName, List<String> pivotedColumns, Map<String, String> options) throws GPUdbException {
        AggregateUnpivotRequest actualRequest_ = new AggregateUnpivotRequest(tableName, variableColumnName, valueColumnName, pivotedColumns, null, options);
        RawAggregateUnpivotResponse actualResponse_ = new RawAggregateUnpivotResponse();
        submitRequest("/aggregate/unpivot", actualRequest_, actualResponse_, false);
        AggregateUnpivotResponse response_ = new AggregateUnpivotResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * The {@link GPUdb#alterSystemProperties(AlterSystemPropertiesRequest)}
     * endpoint is primarily used to simplify the testing of the system and is
     * not expected to be used during normal execution.  Commands are given
     * through the {@code propertyUpdatesMap} whose keys are commands and
     * values are strings representing integer values (for example '8000') or
     * boolean values ('true' or 'false').
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterSystemPropertiesResponse alterSystemProperties(AlterSystemPropertiesRequest request) throws GPUdbException {
        AlterSystemPropertiesResponse actualResponse_ = new AlterSystemPropertiesResponse();
        submitRequest("/alter/system/properties", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * The {@link GPUdb#alterSystemProperties(Map, Map)} endpoint is primarily
     * used to simplify the testing of the system and is not expected to be
     * used during normal execution.  Commands are given through the {@code
     * propertyUpdatesMap} whose keys are commands and values are strings
     * representing integer values (for example '8000') or boolean values
     * ('true' or 'false').
     * 
     * @param propertyUpdatesMap  Map containing the properties of the system
     *                            to be updated. Error if empty.
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SM_OMP_THREADS
     *                            SM_OMP_THREADS}: Set the number of OpenMP
     *                            threads that will be used to service filter &
     *                            aggregation requests against collections to
     *                            the specified integer value.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#KERNEL_OMP_THREADS
     *                            KERNEL_OMP_THREADS}: Set the number of kernel
     *                            OpenMP threads to the specified integer
     *                            value.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#CONCURRENT_KERNEL_EXECUTION
     *                            CONCURRENT_KERNEL_EXECUTION}: Enables
     *                            concurrent kernel execution if the value is
     *                            {@code true} and disables it if the value is
     *                            {@code false}.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#FALSE
     *                            FALSE}
     *                            </ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#CHUNK_SIZE
     *                            CHUNK_SIZE}: Sets the chunk size of all new
     *                            sets to the specified integer value.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#EXECUTION_MODE
     *                            EXECUTION_MODE}: Sets the execution_mode for
     *                            kernel executions to the specified string
     *                            value. Possible values are host, device,
     *                            default (engine decides) or an integer value
     *                            that indicates max chunk size to exec on host
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#FLUSH_TO_DISK
     *                            FLUSH_TO_DISK}: Flushes any changes to any
     *                            tables to the persistent store.  These
     *                            changes include updates to the vector store,
     *                            object store, and text search store, Value
     *                            string is ignored
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#CLEAR_CACHE
     *                            CLEAR_CACHE}: Clears cached results.  Useful
     *                            to allow repeated timing of endpoints. Value
     *                            string is ignored
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#COMMUNICATOR_TEST
     *                            COMMUNICATOR_TEST}: Invoke the communicator
     *                            test and report timing results. Value string
     *                            is is a comma separated list of <key>=<value>
     *                            expressions.  Expressions are:
     *                            num_transactions=<num> where num is the
     *                            number of request reply transactions to
     *                            invoke per test; message_size=<bytes> where
     *                            bytes is the size of the messages to send in
     *                            bytes; check_values=<enabled> where if
     *                            enabled is true the value of the messages
     *                            received are verified.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SET_MESSAGE_TIMERS_ENABLED
     *                            SET_MESSAGE_TIMERS_ENABLED}: Enables the
     *                            communicator test to collect additional
     *                            timing statistics when the value string is
     *                            {@code true}. Disables the collection when
     *                            the value string is {@code false}
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#FALSE
     *                            FALSE}
     *                            </ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#BULK_ADD_TEST
     *                            BULK_ADD_TEST}: Invoke the bulk add test and
     *                            report timing results. Value string is
     *                            ignored.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#NETWORK_SPEED
     *                            NETWORK_SPEED}: Invoke the network speed test
     *                            and report timing results. Value string is a
     *                            semicolon-separated list of <key>=<value>
     *                            expressions.  Valid expressions are:
     *                            seconds=<time> where time is the time in
     *                            seconds to run the test; data_size=<size>
     *                            where size is the size in bytes of the block
     *                            to be transferred; threads=<number of
     *                            threads>; to_ranks=<space-separated list of
     *                            ranks> where the list of ranks is the ranks
     *                            that rank 0 will send data to and get data
     *                            from. If to_ranks is unspecified then all
     *                            worker ranks are used.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#REQUEST_TIMEOUT
     *                            REQUEST_TIMEOUT}: Number of minutes after
     *                            which filtering (e.g., {@link
     *                            GPUdb#filter(String, String, String, Map)})
     *                            and aggregating (e.g., {@link
     *                            GPUdb#aggregateGroupByRaw(AggregateGroupByRequest)})
     *                            queries will timeout.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#MAX_GET_RECORDS_SIZE
     *                            MAX_GET_RECORDS_SIZE}: The maximum number of
     *                            records the database will serve for a given
     *                            data retrieval call
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#MEMORY_ALLOCATION_LIMIT_MB
     *                            MEMORY_ALLOCATION_LIMIT_MB}: Set the memory
     *                            allocation limit for all rank processes in
     *                            megabytes, 0 means no limit. Overrides any
     *                            individual rank memory allocation limits.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#ENABLE_AUDIT
     *                            ENABLE_AUDIT}: Enable or disable auditing.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#AUDIT_HEADERS
     *                            AUDIT_HEADERS}: Enable or disable auditing of
     *                            request headers.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#AUDIT_BODY
     *                            AUDIT_BODY}: Enable or disable auditing of
     *                            request bodies.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#AUDIT_DATA
     *                            AUDIT_DATA}: Enable or disable auditing of
     *                            request data.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#ENABLE_JOB_MANAGER
     *                            ENABLE_JOB_MANAGER}: Enable JobManager to
     *                            enforce processing of requests in the order
     *                            received.
     *                            </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterSystemPropertiesResponse alterSystemProperties(Map<String, String> propertyUpdatesMap, Map<String, String> options) throws GPUdbException {
        AlterSystemPropertiesRequest actualRequest_ = new AlterSystemPropertiesRequest(propertyUpdatesMap, options);
        AlterSystemPropertiesResponse actualResponse_ = new AlterSystemPropertiesResponse();
        submitRequest("/alter/system/properties", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Apply various modifications to a table, view, or collection.  The
     * available
     * modifications include the following:
     * <p>
     * Create or delete an <a
     * href="../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on a
     * particular column. This can speed up certain operations when using
     * expressions
     * containing equality or relational operators on indexed columns. This
     * only
     * applies to tables.
     * <p>
     * Set the <a href="../../../../concepts/ttl.html"
     * target="_top">time-to-live (TTL)</a>. This can be applied
     * to tables, views, or collections.  When applied to collections, every
     * contained
     * table & view that is not protected will have its TTL set to the given
     * value.
     * <p>
     * Set the global access mode (i.e. locking) for a table. The mode can be
     * set to
     * 'no_access', 'read_only', 'write_only' or 'read_write'.
     * <p>
     * Change the <a href="../../../../concepts/protection.html"
     * target="_top">protection</a> mode to prevent or
     * allow automatic expiration. This can be applied to tables, views, and
     * collections.
     * <p>
     * Allow homogeneous tables within a collection.
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../../concepts/types.html" target="_top">type and
     * properties</a> modified.
     * <p>
     * Set or unset <a href="../../../../concepts/compression.html"
     * target="_top">compression</a> for a column.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableResponse alterTable(AlterTableRequest request) throws GPUdbException {
        AlterTableResponse actualResponse_ = new AlterTableResponse();
        submitRequest("/alter/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Apply various modifications to a table, view, or collection.  The
     * available
     * modifications include the following:
     * <p>
     * Create or delete an <a
     * href="../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on a
     * particular column. This can speed up certain operations when using
     * expressions
     * containing equality or relational operators on indexed columns. This
     * only
     * applies to tables.
     * <p>
     * Set the <a href="../../../../concepts/ttl.html"
     * target="_top">time-to-live (TTL)</a>. This can be applied
     * to tables, views, or collections.  When applied to collections, every
     * contained
     * table & view that is not protected will have its TTL set to the given
     * value.
     * <p>
     * Set the global access mode (i.e. locking) for a table. The mode can be
     * set to
     * 'no_access', 'read_only', 'write_only' or 'read_write'.
     * <p>
     * Change the <a href="../../../../concepts/protection.html"
     * target="_top">protection</a> mode to prevent or
     * allow automatic expiration. This can be applied to tables, views, and
     * collections.
     * <p>
     * Allow homogeneous tables within a collection.
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../../concepts/types.html" target="_top">type and
     * properties</a> modified.
     * <p>
     * Set or unset <a href="../../../../concepts/compression.html"
     * target="_top">compression</a> for a column.
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be an existing table, view, or collection.
     * @param action  Modification operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *                ALLOW_HOMOGENEOUS_TABLES}: Sets whether homogeneous
     *                tables are allowed in the given collection. This action
     *                is only valid if {@code tableName} is a collection. The
     *                {@code value} must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *                CREATE_INDEX}: Creates an <a
     *                href="../../../../concepts/indexes.html#column-index"
     *                target="_top">index</a> on the column name specified in
     *                {@code value}. If this column is already indexed, an
     *                error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *                DELETE_INDEX}: Deletes an existing <a
     *                href="../../../../concepts/indexes.html#column-index"
     *                target="_top">index</a> on the column name specified in
     *                {@code value}. If this column does not have indexing
     *                turned on, an error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *                MOVE_TO_COLLECTION}: Moves a table into a collection
     *                {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *                PROTECTED}: Sets whether the given {@code tableName}
     *                should be <a href="../../../../concepts/protection.html"
     *                target="_top">protected</a> or not. The {@code value}
     *                must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *                RENAME_TABLE}: Renames a table, view or collection to
     *                {@code value}. Has the same naming restrictions as <a
     *                href="../../../../concepts/tables.html"
     *                target="_top">tables</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}:
     *                Sets the <a href="../../../../concepts/ttl.html"
     *                target="_top">TTL</a> of the table, view, or collection
     *                specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *                ADD_COLUMN}: Adds the column specified in {@code value}
     *                to the table specified in {@code tableName}.  Use {@code
     *                column_type} and {@code column_properties} in {@code
     *                options} to set the column's type and properties,
     *                respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *                CHANGE_COLUMN}: Changes type and properties of the column
     *                specified in {@code value}.  Use {@code column_type} and
     *                {@code column_properties} in {@code options} to set the
     *                column's type and properties, respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *                SET_COLUMN_COMPRESSION}: Modifies the <a
     *                href="../../../../concepts/compression.html"
     *                target="_top">compression</a> setting on the column
     *                specified in {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *                DELETE_COLUMN}: Deletes the column specified in {@code
     *                value} from the table specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *                CREATE_FOREIGN_KEY}: Creates a <a
     *                href="../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a> using the format
     *                'source_column references
     *                target_table(primary_key_column) [ as <foreign_key_name>
     *                ]'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *                DELETE_FOREIGN_KEY}: Deletes a <a
     *                href="../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a>.  The {@code value} should
     *                be the <foreign_key_name> specified when creating the key
     *                or the complete string used to define it.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *                SET_GLOBAL_ACCESS_MODE}: Sets the global access mode
     *                (i.e. locking) for the table specified in {@code
     *                tableName}. Specify the access mode in {@code value}.
     *                Valid modes are 'no_access', 'read_only', 'write_only'
     *                and 'read_write'.
     *                </ul>
     * @param value  The value of the modification. May be a column name,
     *               'true' or 'false', a TTL, or the global access mode
     *               depending on {@code action}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *                 COLUMN_DEFAULT_VALUE}: When adding a column, set a
     *                 default value for existing records.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *                 COLUMN_PROPERTIES}: When adding or changing a column,
     *                 set the column properties (strings, separated by a
     *                 comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *                 COLUMN_TYPE}: When adding or changing a column, set the
     *                 column type (strings, separated by a comma: int, double,
     *                 string, null etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *                 COMPRESSION_TYPE}: When setting column compression
     *                 ({@code set_column_compression} for {@code action}),
     *                 compression type to use: {@code none} (to use no
     *                 compression) or a valid compression type.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     *                 LZ4HC}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *                 COPY_VALUES_FROM_COLUMN}: When adding or changing a
     *                 column, enter a column name from the same table being
     *                 altered to use as a source for the column being
     *                 added/changed; values will be copied from this source
     *                 column into the new/modified column.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *                 RENAME_COLUMN}: When changing a column, specify new
     *                 column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column,
     *                 validate the change before applying it. If {@code true},
     *                 then validate all values. A value too large (or too
     *                 long) for the new type will prevent any change. If
     *                 {@code false}, then when a value is too large or long,
     *                 it will be truncated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 true
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: false
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableResponse alterTable(String tableName, String action, String value, Map<String, String> options) throws GPUdbException {
        AlterTableRequest actualRequest_ = new AlterTableRequest(tableName, action, value, options);
        AlterTableResponse actualResponse_ = new AlterTableResponse();
        submitRequest("/alter/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Updates (adds or changes) metadata for tables. The metadata key and
     * values must both be strings. This is an easy way to annotate whole
     * tables rather than single records within tables.  Some examples of
     * metadata are owner of the table, table creation timestamp etc.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableMetadataResponse alterTableMetadata(AlterTableMetadataRequest request) throws GPUdbException {
        AlterTableMetadataResponse actualResponse_ = new AlterTableMetadataResponse();
        submitRequest("/alter/table/metadata", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Updates (adds or changes) metadata for tables. The metadata key and
     * values must both be strings. This is an easy way to annotate whole
     * tables rather than single records within tables.  Some examples of
     * metadata are owner of the table, table creation timestamp etc.
     * 
     * @param tableNames  Names of the tables whose metadata will be updated.
     *                    All specified tables must exist, or an error will be
     *                    returned.
     * @param metadataMap  A map which contains the metadata of the tables that
     *                     are to be updated. Note that only one map is
     *                     provided for all the tables; so the change will be
     *                     applied to every table. If the provided map is
     *                     empty, then all existing metadata for the table(s)
     *                     will be cleared.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableMetadataResponse alterTableMetadata(List<String> tableNames, Map<String, String> metadataMap, Map<String, String> options) throws GPUdbException {
        AlterTableMetadataRequest actualRequest_ = new AlterTableMetadataRequest(tableNames, metadataMap, options);
        AlterTableMetadataResponse actualResponse_ = new AlterTableMetadataResponse();
        submitRequest("/alter/table/metadata", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters a user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterUserResponse alterUser(AlterUserRequest request) throws GPUdbException {
        AlterUserResponse actualResponse_ = new AlterUserResponse();
        submitRequest("/alter/user", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters a user.
     * 
     * @param name  Name of the user to be altered. Must be an existing user.
     * @param action  Modification operation to be applied to the user.
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterUserRequest.Action#SET_PASSWORD
     *                SET_PASSWORD}: Sets the password of the user. The user
     *                must be an internal user.
     *                </ul>
     * @param value  The value of the modification, depending on {@code
     *               action}.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterUserResponse alterUser(String name, String action, String value, Map<String, String> options) throws GPUdbException {
        AlterUserRequest actualRequest_ = new AlterUserRequest(name, action, value, options);
        AlterUserResponse actualResponse_ = new AlterUserResponse();
        submitRequest("/alter/user", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Append (or insert) all records from a source table (specified by {@code
     * sourceTableName}) to a particular target table (specified by {@code
     * tableName}). The field map (specified by {@code fieldMap}) holds the
     * user specified map of target table column names with their mapped source
     * column names.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AppendRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AppendRecordsResponse appendRecords(AppendRecordsRequest request) throws GPUdbException {
        AppendRecordsResponse actualResponse_ = new AppendRecordsResponse();
        submitRequest("/append/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Append (or insert) all records from a source table (specified by {@code
     * sourceTableName}) to a particular target table (specified by {@code
     * tableName}). The field map (specified by {@code fieldMap}) holds the
     * user specified map of target table column names with their mapped source
     * column names.
     * 
     * @param tableName  The table name for the records to be appended. Must be
     *                   an existing table.
     * @param sourceTableName  The source table name to get records from. Must
     *                         be an existing table name.
     * @param fieldMap  Contains the mapping of column names from the target
     *                  table (specified by {@code tableName}) as the keys, and
     *                  corresponding column names from the source table
     *                  (specified by {@code sourceTableName}). Must be
     *                  existing column names in source table and target table,
     *                  and their types must be matched.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#OFFSET
     *                 OFFSET}: A positive integer indicating the number of
     *                 initial results to skip from source table (specified by
     *                 {@code sourceTableName}). Default is 0. The minimum
     *                 allowed value is 0. The maximum allowed value is
     *                 MAX_INT.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#LIMIT
     *                 LIMIT}: A positive integer indicating the maximum number
     *                 of results to be returned from source table (specified
     *                 by {@code sourceTableName}). Or END_OF_SET (-9999) to
     *                 indicate that the max number of results should be
     *                 returned.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 source table (specified by {@code sourceTableName}).
     *                 Empty by default.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted from source table (specified by {@code
     *                 sourceTableName}) by; e.g. 'timestamp asc, x desc'.  The
     *                 columns specified must be present in {@code fieldMap}.
     *                 If any alias is given for any column name, the alias
     *                 must be used, rather than the original column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for inserting the source table records (specified
     *                 by {@code sourceTableName}) into the target table
     *                 (specified by {@code tableName}) table with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a>.  If set to {@code true},
     *                 any existing target table record with primary key values
     *                 that match those of a source table record being inserted
     *                 will be replaced by that new record.  If set to {@code
     *                 false}, any existing target table record with primary
     *                 key values that match those of a source table record
     *                 being inserted will remain unchanged and the new record
     *                 discarded.  If the specified table does not have a
     *                 primary key, then this option is ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AppendRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AppendRecordsResponse appendRecords(String tableName, String sourceTableName, Map<String, String> fieldMap, Map<String, String> options) throws GPUdbException {
        AppendRecordsRequest actualRequest_ = new AppendRecordsRequest(tableName, sourceTableName, fieldMap, options);
        AppendRecordsResponse actualResponse_ = new AppendRecordsResponse();
        submitRequest("/append/records", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears (drops) one or all tables in the database cluster. The operation
     * is synchronous meaning that the table will be cleared before the
     * function returns. The response payload returns the status of the
     * operation along with the name of the table that was cleared.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableResponse clearTable(ClearTableRequest request) throws GPUdbException {
        ClearTableResponse actualResponse_ = new ClearTableResponse();
        submitRequest("/clear/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears (drops) one or all tables in the database cluster. The operation
     * is synchronous meaning that the table will be cleared before the
     * function returns. The response payload returns the status of the
     * operation along with the name of the table that was cleared.
     * 
     * @param tableName  Name of the table to be cleared. Must be an existing
     *                   table. Empty string clears all available tables.
     * @param authorization  No longer used. User can pass an empty string.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code true} and if the
     *                 table specified in {@code tableName} does not exist no
     *                 error is returned. If {@code false} and if the table
     *                 specified in {@code tableName} does not exist then an
     *                 error is returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableResponse clearTable(String tableName, String authorization, Map<String, String> options) throws GPUdbException {
        ClearTableRequest actualRequest_ = new ClearTableRequest(tableName, authorization, options);
        ClearTableResponse actualResponse_ = new ClearTableResponse();
        submitRequest("/clear/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deactivates a table monitor previously created with {@link
     * GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableMonitorResponse clearTableMonitor(ClearTableMonitorRequest request) throws GPUdbException {
        ClearTableMonitorResponse actualResponse_ = new ClearTableMonitorResponse();
        submitRequest("/clear/tablemonitor", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deactivates a table monitor previously created with {@link
     * GPUdb#createTableMonitor(String, Map)}.
     * 
     * @param topicId  The topic ID returned by {@link
     *                 GPUdb#createTableMonitor(String, Map)}.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableMonitorResponse clearTableMonitor(String topicId, Map<String, String> options) throws GPUdbException {
        ClearTableMonitorRequest actualRequest_ = new ClearTableMonitorRequest(topicId, options);
        ClearTableMonitorResponse actualResponse_ = new ClearTableMonitorResponse();
        submitRequest("/clear/tablemonitor", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears or cancels the trigger identified by the specified handle. The
     * output returns the handle of the trigger cleared as well as indicating
     * success or failure of the trigger deactivation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTriggerResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTriggerResponse clearTrigger(ClearTriggerRequest request) throws GPUdbException {
        ClearTriggerResponse actualResponse_ = new ClearTriggerResponse();
        submitRequest("/clear/trigger", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears or cancels the trigger identified by the specified handle. The
     * output returns the handle of the trigger cleared as well as indicating
     * success or failure of the trigger deactivation.
     * 
     * @param triggerId  ID for the trigger to be deactivated.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTriggerResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTriggerResponse clearTrigger(String triggerId, Map<String, String> options) throws GPUdbException {
        ClearTriggerRequest actualRequest_ = new ClearTriggerRequest(triggerId, options);
        ClearTriggerResponse actualResponse_ = new ClearTriggerResponse();
        submitRequest("/clear/trigger", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a table that is the result of a SQL JOIN.  For details see: <a
     * href="../../../../concepts/joins.html" target="_top">join concept
     * documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateJoinTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateJoinTableResponse createJoinTable(CreateJoinTableRequest request) throws GPUdbException {
        CreateJoinTableResponse actualResponse_ = new CreateJoinTableResponse();
        submitRequest("/create/jointable", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a table that is the result of a SQL JOIN.  For details see: <a
     * href="../../../../concepts/joins.html" target="_top">join concept
     * documentation</a>.
     * 
     * @param joinTableName  Name of the join table to be created.  Has the
     *                       same naming restrictions as <a
     *                       href="../../../../concepts/tables.html"
     *                       target="_top">tables</a>.
     * @param tableNames  The list of table names composing the join.
     *                    Corresponds to a SQL statement FROM clause.
     * @param columnNames  List of member table columns or column expressions
     *                     to be included in the join. Columns can be prefixed
     *                     with 'table_id.column_name', where 'table_id' is the
     *                     table name or alias.  Columns can be aliased via the
     *                     syntax 'column_name as alias'. Wild cards '*' can be
     *                     used to include all columns across member tables or
     *                     'table_id.*' for all of a single table's columns.
     *                     Columns and column expressions comprising the join
     *                     must be uniquely named or aliased--therefore, the
     *                     '*' wild card cannot be used if column names aren't
     *                     unique across all tables.
     * @param expressions  An optional list of expressions to combine and
     *                     filter the joined tables.  Corresponds to a SQL
     *                     statement WHERE clause. For details see: <a
     *                     href="../../../../concepts/expressions.html"
     *                     target="_top">expressions</a>.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the join. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the join will be at the top
     *                 level.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#MAX_QUERY_DIMENSIONS
     *                 MAX_QUERY_DIMENSIONS}: The maximum number of tables in a
     *                 join that can be accessed by a query and are not equated
     *                 by a foreign-key to primary-key equality predicate
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#OPTIMIZE_LOOKUPS
     *                 OPTIMIZE_LOOKUPS}: Use more memory to speed up the
     *                 joining of tables.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#REFRESH_METHOD
     *                 REFRESH_METHOD}: Method by which the join can be
     *                 refreshed when the data in underlying member tables have
     *                 changed.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#MANUAL
     *                 MANUAL}: refresh only occurs when manually requested by
     *                 calling this endpoint with refresh option set to {@code
     *                 refresh} or {@code full_refresh}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#ON_QUERY
     *                 ON_QUERY}: incrementally refresh (refresh just those
     *                 records added) whenever a new query is issued and new
     *                 data is inserted into the base table.  A full refresh of
     *                 all the records occurs when a new query is issued and
     *                 there have been inserts to any non-base-tables since the
     *                 last query
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#ON_INSERT
     *                 ON_INSERT}: incrementally refresh (refresh just those
     *                 records added) whenever new data is inserted into a base
     *                 table.  A full refresh of all the records occurs when a
     *                 new query is issued and there have been inserts to any
     *                 non-base-tables since the last query
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#MANUAL
     *                 MANUAL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#REFRESH
     *                 REFRESH}: Do a manual refresh of the join if it exists -
     *                 throws an error otherwise
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#NO_REFRESH
     *                 NO_REFRESH}: don't refresh
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#REFRESH
     *                 REFRESH}: incrementally refresh (refresh just those
     *                 records added) if new data has been inserted into the
     *                 base table.  A full refresh of all the records occurs if
     *                 there have been inserts to any non-base-tables since the
     *                 last refresh
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#FULL_REFRESH
     *                 FULL_REFRESH}: always refresh even if no new records
     *                 have been added.  Only refresh method guaranteed to do a
     *                 full refresh (refresh all the records) if a delete or
     *                 update has occurred since the last refresh.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#NO_REFRESH
     *                 NO_REFRESH}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the join table specified in
     *                 {@code joinTableName}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateJoinTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateJoinTableResponse createJoinTable(String joinTableName, List<String> tableNames, List<String> columnNames, List<String> expressions, Map<String, String> options) throws GPUdbException {
        CreateJoinTableRequest actualRequest_ = new CreateJoinTableRequest(joinTableName, tableNames, columnNames, expressions, options);
        CreateJoinTableResponse actualResponse_ = new CreateJoinTableResponse();
        submitRequest("/create/jointable", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates an instance (proc) of the user-defined function (UDF) specified
     * by the given command, options, and files, and makes it available for
     * execution.  For details on UDFs, see: <a
     * href="../../../../concepts/udf.html" target="_top">User-Defined
     * Functions</a>
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProcResponse createProc(CreateProcRequest request) throws GPUdbException {
        CreateProcResponse actualResponse_ = new CreateProcResponse();
        submitRequest("/create/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates an instance (proc) of the user-defined function (UDF) specified
     * by the given command, options, and files, and makes it available for
     * execution.  For details on UDFs, see: <a
     * href="../../../../concepts/udf.html" target="_top">User-Defined
     * Functions</a>
     * 
     * @param procName  Name of the proc to be created. Must not be the name of
     *                  a currently existing proc.
     * @param executionMode  The execution mode of the proc.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateProcRequest.ExecutionMode#DISTRIBUTED
     *                       DISTRIBUTED}: Input table data will be divided
     *                       into data segments that are distributed across all
     *                       nodes in the cluster, and the proc command will be
     *                       invoked once per data segment in parallel. Output
     *                       table data from each invocation will be saved to
     *                       the same node as the corresponding input data.
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateProcRequest.ExecutionMode#NONDISTRIBUTED
     *                       NONDISTRIBUTED}: The proc command will be invoked
     *                       only once per execution, and will not have access
     *                       to any input or output table data.
     *                       </ul>
     *                       The default value is {@link
     *                       com.gpudb.protocol.CreateProcRequest.ExecutionMode#DISTRIBUTED
     *                       DISTRIBUTED}.
     * @param files  A map of the files that make up the proc. The keys of the
     *               map are file names, and the values are the binary contents
     *               of the files. The file names may include subdirectory
     *               names (e.g. 'subdir/file') but must not resolve to a
     *               directory above the root for the proc.
     * @param command  The command (excluding arguments) that will be invoked
     *                 when the proc is executed. It will be invoked from the
     *                 directory containing the proc {@code files} and may be
     *                 any command that can be resolved from that directory. It
     *                 need not refer to a file actually in that directory; for
     *                 example, it could be 'java' if the proc is a Java
     *                 application; however, any necessary external programs
     *                 must be preinstalled on every database node. If the
     *                 command refers to a file in that directory, it must be
     *                 preceded with './' as per Linux convention. If not
     *                 specified, and exactly one file is provided in {@code
     *                 files}, that file will be invoked.
     * @param args  An array of command-line arguments that will be passed to
     *              {@code command} when the proc is executed.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProcResponse createProc(String procName, String executionMode, Map<String, ByteBuffer> files, String command, List<String> args, Map<String, String> options) throws GPUdbException {
        CreateProcRequest actualRequest_ = new CreateProcRequest(procName, executionMode, files, command, args, options);
        CreateProcResponse actualResponse_ = new CreateProcResponse();
        submitRequest("/create/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new <a href="../../../../concepts/projections.html"
     * target="_top">projection</a> of an existing table. A projection
     * represents a subset of the columns (potentially including derived
     * columns) of a table.
     * <p>
     * Notes:
     * <p>
     * A moving average can be calculated on a given column using the following
     * syntax in the {@code columnNames} parameter:
     * <p>
     * 'moving_average(column_name,num_points_before,num_points_after) as
     * new_column_name'
     * <p>
     * For each record in the moving_average function's 'column_name'
     * parameter, it computes the average over the previous 'num_points_before'
     * records and the subsequent 'num_points_after' records.
     * <p>
     * Note that moving average relies on {@code order_by}, and {@code
     * order_by} requires that all the data being ordered resides on the same
     * processing node, so it won't make sense to use {@code order_by} without
     * moving average.
     * <p>
     * Also, a projection can be created with a different <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> than the source table.  By specifying {@code shard_key}, the
     * projection will be sharded according to the specified columns,
     * regardless of how the source table is sharded.  The source table can
     * even be unsharded or replicated.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProjectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProjectionResponse createProjection(CreateProjectionRequest request) throws GPUdbException {
        CreateProjectionResponse actualResponse_ = new CreateProjectionResponse();
        submitRequest("/create/projection", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new <a href="../../../../concepts/projections.html"
     * target="_top">projection</a> of an existing table. A projection
     * represents a subset of the columns (potentially including derived
     * columns) of a table.
     * <p>
     * Notes:
     * <p>
     * A moving average can be calculated on a given column using the following
     * syntax in the {@code columnNames} parameter:
     * <p>
     * 'moving_average(column_name,num_points_before,num_points_after) as
     * new_column_name'
     * <p>
     * For each record in the moving_average function's 'column_name'
     * parameter, it computes the average over the previous 'num_points_before'
     * records and the subsequent 'num_points_after' records.
     * <p>
     * Note that moving average relies on {@code order_by}, and {@code
     * order_by} requires that all the data being ordered resides on the same
     * processing node, so it won't make sense to use {@code order_by} without
     * moving average.
     * <p>
     * Also, a projection can be created with a different <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> than the source table.  By specifying {@code shard_key}, the
     * projection will be sharded according to the specified columns,
     * regardless of how the source table is sharded.  The source table can
     * even be unsharded or replicated.
     * 
     * @param tableName  Name of the existing table on which the projection is
     *                   to be applied.
     * @param projectionName  Name of the projection to be created. Has the
     *                        same naming restrictions as <a
     *                        href="../../../../concepts/tables.html"
     *                        target="_top">tables</a>.
     * @param columnNames  List of columns from {@code tableName} to be
     *                     included in the projection. Can include derived
     *                     columns. Can be specified as aliased via the syntax
     *                     'column_name as alias'.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a <a
     *                 href="../../../../concepts/collections.html"
     *                 target="_top">collection</a> to which the projection is
     *                 to be assigned as a child. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the projection will be at the
     *                 top level.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#EXPRESSION
     *                 EXPRESSION}: An optional filter <a
     *                 href="../../../../concepts/expressions.html"
     *                 target="_top">expression</a> to be applied to the source
     *                 table prior to the projection.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#LIMIT
     *                 LIMIT}: The number of records to keep.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by; e.g. 'timestamp asc, x desc'.  The columns
     *                 specified must be present in {@code columnNames}.  If
     *                 any alias is given for any column name, the alias must
     *                 be used, rather than the original column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: If {@code true} then the columns of
     *                 the projection will be cached on the GPU.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for
     *                 this table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the projection specified in
     *                 {@code projectionName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#SHARD_KEY
     *                 SHARD_KEY}: Comma-separated list of the columns to be
     *                 sharded on; e.g. 'column1, column2'.  The columns
     *                 specified must be present in {@code columnNames}.  If
     *                 any alias is given for any column name, the alias must
     *                 be used, rather than the original column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the projection specified
     *                 in {@code projectionName} will be persisted and will not
     *                 expire unless a {@code ttl} is specified.   If {@code
     *                 false}, then the projection will be an in-memory table
     *                 and will expire unless a {@code ttl} is specified
     *                 otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProjectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProjectionResponse createProjection(String tableName, String projectionName, List<String> columnNames, Map<String, String> options) throws GPUdbException {
        CreateProjectionRequest actualRequest_ = new CreateProjectionRequest(tableName, projectionName, columnNames, options);
        CreateProjectionResponse actualResponse_ = new CreateProjectionResponse();
        submitRequest("/create/projection", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateRoleResponse createRole(CreateRoleRequest request) throws GPUdbException {
        CreateRoleResponse actualResponse_ = new CreateRoleResponse();
        submitRequest("/create/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new role.
     * 
     * @param name  Name of the role to be created. Must contain only lowercase
     *              letters, digits, and underscores, and cannot begin with a
     *              digit. Must not be the same name as an existing user or
     *              role.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateRoleResponse createRole(String name, Map<String, String> options) throws GPUdbException {
        CreateRoleRequest actualRequest_ = new CreateRoleRequest(name, options);
        CreateRoleResponse actualResponse_ = new CreateRoleResponse();
        submitRequest("/create/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new table or collection. If a new table is being created, the
     * type of the table is given by {@code typeId}, which must the be the ID
     * of a currently registered type (i.e. one created via {@link
     * GPUdb#createType(CreateTypeRequest)}). The table will be created inside
     * a collection if the option {@code collection_name} is specified. If that
     * collection does not already exist, it will be created.
     * <p>
     * To create a new collection, specify the name of the collection in {@code
     * tableName} and set the {@code is_collection} option to {@code true};
     * {@code typeId} will be ignored.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableResponse createTable(CreateTableRequest request) throws GPUdbException {
        CreateTableResponse actualResponse_ = new CreateTableResponse();
        submitRequest("/create/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new table or collection. If a new table is being created, the
     * type of the table is given by {@code typeId}, which must the be the ID
     * of a currently registered type (i.e. one created via {@link
     * GPUdb#createType(String, String, Map, Map)}). The table will be created
     * inside a collection if the option {@code collection_name} is specified.
     * If that collection does not already exist, it will be created.
     * <p>
     * To create a new collection, specify the name of the collection in {@code
     * tableName} and set the {@code is_collection} option to {@code true};
     * {@code typeId} will be ignored.
     * 
     * @param tableName  Name of the table to be created. Error for requests
     *                   with existing table of the same name and type id may
     *                   be suppressed by using the {@code no_error_if_exists}
     *                   option.  See <a
     *                   href="../../../../concepts/tables.html"
     *                   target="_top">Tables</a> for naming restrictions.
     * @param typeId  ID of a currently registered type. All objects added to
     *                the newly created table will be of this type.  Ignored if
     *                {@code is_collection} is {@code true}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#NO_ERROR_IF_EXISTS
     *                 NO_ERROR_IF_EXISTS}: If {@code true}, prevents an error
     *                 from occurring if the table already exists and is of the
     *                 given type.  If a table with the same ID but a different
     *                 type exists, it is still an error.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created table. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 table will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_COLLECTION
     *                 IS_COLLECTION}: Indicates whether the new table to be
     *                 created will be a collection.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#DISALLOW_HOMOGENEOUS_TABLES
     *                 DISALLOW_HOMOGENEOUS_TABLES}: For a collection,
     *                 indicates whether the collection prohibits containment
     *                 of multiple tables of exactly the same data type.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: For a table, indicates the <a
     *                 href="../../../../concepts/tables.html#distribution"
     *                 target="_top">distribution scheme</a> for the table's
     *                 data.  If true, the table will be <a
     *                 href="../../../../concepts/tables.html#replication"
     *                 target="_top">replicated</a>.  If false, the table will
     *                 be <a href="../../../../concepts/tables.html#sharding"
     *                 target="_top">sharded</a> according to the <a
     *                 href="../../../../concepts/tables.html#shard-keys"
     *                 target="_top">shard key</a> specified in the given
     *                 {@code typeId}, or <a
     *                 href="../../../../concepts/tables.html#random-sharding"
     *                 target="_top">randomly sharded</a>, if no shard key is
     *                 specified.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FOREIGN_KEYS
     *                 FOREIGN_KEYS}: Semicolon-separated list of <a
     *                 href="../../../../concepts/tables.html#foreign-keys"
     *                 target="_top">foreign keys</a>, of the format
     *                 'source_column references
     *                 target_table(primary_key_column) [ as <foreign_key_name>
     *                 ]'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FOREIGN_SHARD_KEY
     *                 FOREIGN_SHARD_KEY}: Foreign shard key of the format
     *                 'source_column references shard_by_column from
     *                 target_table(primary_key_column)'
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TTL TTL}:
     *                 For a table, sets the <a
     *                 href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for
     *                 this table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_RESULT_TABLE
     *                 IS_RESULT_TABLE}: For a table, indicates whether the
     *                 table is an in-memory table. A result table cannot
     *                 contain store_only, text_search, or string columns
     *                 (charN columns are acceptable), and it will not be
     *                 retained if the server is restarted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableResponse createTable(String tableName, String typeId, Map<String, String> options) throws GPUdbException {
        CreateTableRequest actualRequest_ = new CreateTableRequest(tableName, typeId, options);
        CreateTableResponse actualResponse_ = new CreateTableResponse();
        submitRequest("/create/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a monitor that watches for new records inserted into a
     * particular table (identified by {@code tableName}) and forwards copies
     * to subscribers via ZMQ. After this call completes, subscribe to the
     * returned {@code topicId} on the ZMQ table monitor port (default 9002).
     * Each time an insert operation on the table completes, a multipart
     * message is published for that topic; the first part contains only the
     * topic ID, and each subsequent part contains one binary-encoded Avro
     * object that was inserted. The monitor will continue to run (regardless
     * of whether or not there are any subscribers) until deactivated with
     * {@link GPUdb#clearTableMonitor(ClearTableMonitorRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableMonitorResponse createTableMonitor(CreateTableMonitorRequest request) throws GPUdbException {
        CreateTableMonitorResponse actualResponse_ = new CreateTableMonitorResponse();
        submitRequest("/create/tablemonitor", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a monitor that watches for new records inserted into a
     * particular table (identified by {@code tableName}) and forwards copies
     * to subscribers via ZMQ. After this call completes, subscribe to the
     * returned {@code topicId} on the ZMQ table monitor port (default 9002).
     * Each time an insert operation on the table completes, a multipart
     * message is published for that topic; the first part contains only the
     * topic ID, and each subsequent part contains one binary-encoded Avro
     * object that was inserted. The monitor will continue to run (regardless
     * of whether or not there are any subscribers) until deactivated with
     * {@link GPUdb#clearTableMonitor(String, Map)}.
     * 
     * @param tableName  Name of the table to monitor. Must not refer to a
     *                   collection.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableMonitorResponse createTableMonitor(String tableName, Map<String, String> options) throws GPUdbException {
        CreateTableMonitorRequest actualRequest_ = new CreateTableMonitorRequest(tableName, options);
        CreateTableMonitorResponse actualResponse_ = new CreateTableMonitorResponse();
        submitRequest("/create/tablemonitor", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up an area trigger mechanism for two column_names for one or more
     * tables. (This function is essentially the two-dimensional version of
     * {@link GPUdb#createTriggerByRange(CreateTriggerByRangeRequest)}.) Once
     * the trigger has been activated, any record added to the listed tables(s)
     * via {@link GPUdb#insertRecordsRaw(RawInsertRecordsRequest)} with the
     * chosen columns' values falling within the specified region will trip the
     * trigger. All such records will be queued at the trigger port (by default
     * '9001', but able to be retrieved via {@link
     * GPUdb#showSystemStatus(ShowSystemStatusRequest)}) for any listening
     * client to collect. Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(ClearTriggerRequest)} endpoint or by clearing all
     * relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByAreaResponse createTriggerByArea(CreateTriggerByAreaRequest request) throws GPUdbException {
        CreateTriggerByAreaResponse actualResponse_ = new CreateTriggerByAreaResponse();
        submitRequest("/create/trigger/byarea", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up an area trigger mechanism for two column_names for one or more
     * tables. (This function is essentially the two-dimensional version of
     * {@link GPUdb#createTriggerByRange(String, List, String, double, double,
     * Map)}.) Once the trigger has been activated, any record added to the
     * listed tables(s) via {@link
     * GPUdb#insertRecordsRaw(RawInsertRecordsRequest)} with the chosen
     * columns' values falling within the specified region will trip the
     * trigger. All such records will be queued at the trigger port (by default
     * '9001', but able to be retrieved via {@link
     * GPUdb#showSystemStatus(Map)}) for any listening client to collect.
     * Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(String, Map)} endpoint or by clearing all relevant
     * tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param requestId  User-created ID for the trigger. The ID can be
     *                   alphanumeric, contain symbols, and must contain at
     *                   least one character.
     * @param tableNames  Names of the tables on which the trigger will be
     *                    activated and maintained.
     * @param xColumnName  Name of a numeric column on which the trigger is
     *                     activated. Usually 'x' for geospatial data points.
     * @param xVector  The respective coordinate values for the region on which
     *                 the trigger is activated. This usually translates to the
     *                 x-coordinates of a geospatial region.
     * @param yColumnName  Name of a second numeric column on which the trigger
     *                     is activated. Usually 'y' for geospatial data
     *                     points.
     * @param yVector  The respective coordinate values for the region on which
     *                 the trigger is activated. This usually translates to the
     *                 y-coordinates of a geospatial region. Must be the same
     *                 length as xvals.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByAreaResponse createTriggerByArea(String requestId, List<String> tableNames, String xColumnName, List<Double> xVector, String yColumnName, List<Double> yVector, Map<String, String> options) throws GPUdbException {
        CreateTriggerByAreaRequest actualRequest_ = new CreateTriggerByAreaRequest(requestId, tableNames, xColumnName, xVector, yColumnName, yVector, options);
        CreateTriggerByAreaResponse actualResponse_ = new CreateTriggerByAreaResponse();
        submitRequest("/create/trigger/byarea", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via {@link GPUdb#insertRecordsRaw(RawInsertRecordsRequest)}
     * with the chosen column_name's value falling within the specified range
     * will trip the trigger. All such records will be queued at the trigger
     * port (by default '9001', but able to be retrieved via {@link
     * GPUdb#showSystemStatus(ShowSystemStatusRequest)}) for any listening
     * client to collect. Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(ClearTriggerRequest)} endpoint or by clearing all
     * relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByRangeResponse createTriggerByRange(CreateTriggerByRangeRequest request) throws GPUdbException {
        CreateTriggerByRangeResponse actualResponse_ = new CreateTriggerByRangeResponse();
        submitRequest("/create/trigger/byrange", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via {@link GPUdb#insertRecordsRaw(RawInsertRecordsRequest)}
     * with the chosen column_name's value falling within the specified range
     * will trip the trigger. All such records will be queued at the trigger
     * port (by default '9001', but able to be retrieved via {@link
     * GPUdb#showSystemStatus(Map)}) for any listening client to collect.
     * Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(String, Map)} endpoint or by clearing all relevant
     * tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param requestId  User-created ID for the trigger. The ID can be
     *                   alphanumeric, contain symbols, and must contain at
     *                   least one character.
     * @param tableNames  Tables on which the trigger will be active.
     * @param columnName  Name of a numeric column_name on which the trigger is
     *                    activated.
     * @param min  The lower bound (inclusive) for the trigger range.
     * @param max  The upper bound (inclusive) for the trigger range.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByRangeResponse createTriggerByRange(String requestId, List<String> tableNames, String columnName, double min, double max, Map<String, String> options) throws GPUdbException {
        CreateTriggerByRangeRequest actualRequest_ = new CreateTriggerByRangeRequest(requestId, tableNames, columnName, min, max, options);
        CreateTriggerByRangeResponse actualResponse_ = new CreateTriggerByRangeResponse();
        submitRequest("/create/trigger/byrange", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new type describing the layout or schema of a table. The type
     * definition is a JSON string describing the fields (i.e. columns) of the
     * type. Each field consists of a name and a data type. Supported data
     * types are: double, float, int, long, string, and bytes. In addition one
     * or more properties can be specified for each column which customize the
     * memory usage and query availability of that column.  Note that some
     * properties are mutually exclusive--i.e. they cannot be specified for any
     * given column simultaneously.  One example of mutually exclusive
     * properties are {@code data} and {@code store_only}.
     * <p>
     * To set a *primary key* on one or more columns include the property
     * 'primary_key' on the desired column_names. If a primary key is
     * specified, then a uniqueness constraint is enforced, in that only a
     * single object can exist with a given primary key. When {@link
     * GPUdb#insertRecordsRaw(RawInsertRecordsRequest) inserting} data into a
     * table with a primary key, depending on the parameters in the request,
     * incoming objects with primary keys that match existing objects will
     * either overwrite (i.e. update) the existing object or will be skipped
     * and not added into the set.
     * <p>
     * Example of a type definition with some of the parameters::
     * <p>
     *         {"type":"record",
     *         "name":"point",
     *         "fields":[{"name":"msg_id","type":"string"},
     *                         {"name":"x","type":"double"},
     *                         {"name":"y","type":"double"},
     *                         {"name":"TIMESTAMP","type":"double"},
     *                         {"name":"source","type":"string"},
     *                         {"name":"group_id","type":"string"},
     *                         {"name":"OBJECT_ID","type":"string"}]
     *         }
     * <p>
     * Properties::
     * <p>
     *         {"group_id":["store_only"],
     *         "msg_id":["store_only","text_search"]
     *         }
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTypeResponse createType(CreateTypeRequest request) throws GPUdbException {
        CreateTypeResponse actualResponse_ = new CreateTypeResponse();
        submitRequest("/create/type", request, actualResponse_, false);
        setTypeDescriptorIfMissing(actualResponse_.getTypeId(), actualResponse_.getLabel(), actualResponse_.getTypeDefinition(), actualResponse_.getProperties());
        return actualResponse_;
    }



    /**
     * Creates a new type describing the layout or schema of a table. The type
     * definition is a JSON string describing the fields (i.e. columns) of the
     * type. Each field consists of a name and a data type. Supported data
     * types are: double, float, int, long, string, and bytes. In addition one
     * or more properties can be specified for each column which customize the
     * memory usage and query availability of that column.  Note that some
     * properties are mutually exclusive--i.e. they cannot be specified for any
     * given column simultaneously.  One example of mutually exclusive
     * properties are {@code data} and {@code store_only}.
     * <p>
     * To set a *primary key* on one or more columns include the property
     * 'primary_key' on the desired column_names. If a primary key is
     * specified, then a uniqueness constraint is enforced, in that only a
     * single object can exist with a given primary key. When {@link
     * GPUdb#insertRecordsRaw(RawInsertRecordsRequest) inserting} data into a
     * table with a primary key, depending on the parameters in the request,
     * incoming objects with primary keys that match existing objects will
     * either overwrite (i.e. update) the existing object or will be skipped
     * and not added into the set.
     * <p>
     * Example of a type definition with some of the parameters::
     * <p>
     *         {"type":"record",
     *         "name":"point",
     *         "fields":[{"name":"msg_id","type":"string"},
     *                         {"name":"x","type":"double"},
     *                         {"name":"y","type":"double"},
     *                         {"name":"TIMESTAMP","type":"double"},
     *                         {"name":"source","type":"string"},
     *                         {"name":"group_id","type":"string"},
     *                         {"name":"OBJECT_ID","type":"string"}]
     *         }
     * <p>
     * Properties::
     * <p>
     *         {"group_id":["store_only"],
     *         "msg_id":["store_only","text_search"]
     *         }
     * 
     * @param typeDefinition  a JSON string describing the columns of the type
     *                        to be registered.
     * @param label  A user-defined description string which can be used to
     *               differentiate between tables and types with otherwise
     *               identical schemas.
     * @param properties  Each key-value pair specifies the properties to use
     *                    for a given column where the key is the column name.
     *                    All keys used must be relevant column names for the
     *                    given table.  Specifying any property overrides the
     *                    default properties for that column (which is based on
     *                    the column's data type).
     *                    Valid values are:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DATA
     *                    DATA}: Default property for all numeric and string
     *                    type columns; makes the column available for GPU
     *                    queries.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#TEXT_SEARCH
     *                    TEXT_SEARCH}: Valid only for 'string' columns.
     *                    Enables full text search for string columns. Can be
     *                    set independently of *data* and *store_only*.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#STORE_ONLY
     *                    STORE_ONLY}: Persist the column value but do not make
     *                    it available to queries (e.g. {@link
     *                    GPUdb#filterByBox(String, String, String, double,
     *                    double, String, double, double, Map)})-i.e. it is
     *                    mutually exclusive to the 'data' property. Any
     *                    'bytes' type column must have a 'store_only'
     *                    property. This property reduces system memory usage.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DISK_OPTIMIZED
     *                    DISK_OPTIMIZED}: Works in conjunction with the 'data'
     *                    property for string columns. This property reduces
     *                    system disk usage by disabling reverse string
     *                    lookups. Queries like {@link GPUdb#filter(String,
     *                    String, String, Map)}, {@link
     *                    GPUdb#filterByList(String, String, Map, Map)}, and
     *                    {@link GPUdb#filterByValue(String, String, boolean,
     *                    double, String, String, Map)} work as usual but
     *                    {@link
     *                    GPUdb#aggregateUniqueRaw(AggregateUniqueRequest)},
     *                    {@link
     *                    GPUdb#aggregateGroupByRaw(AggregateGroupByRequest)}
     *                    and {@link
     *                    GPUdb#getRecordsByColumnRaw(GetRecordsByColumnRequest)}
     *                    are not allowed on columns with this property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#TIMESTAMP
     *                    TIMESTAMP}: Valid only for 'long' columns. Indicates
     *                    that this field represents a timestamp and will be
     *                    provided in milliseconds since the Unix epoch:
     *                    00:00:00 Jan 1 1970.  Dates represented by a
     *                    timestamp must fall between the year 1000 and the
     *                    year 2900.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DECIMAL
     *                    DECIMAL}: Valid only for 'string' columns.  It
     *                    represents a SQL type NUMERIC(19, 4) data type.
     *                    There can be up to 15 digits before the decimal point
     *                    and up to four digits in the fractional part.  The
     *                    value can be positive or negative (indicated by a
     *                    minus sign at the beginning).  This property is
     *                    mutually exclusive with the 'text_search' property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DATE
     *                    DATE}: Valid only for 'string' columns.  Indicates
     *                    that this field represents a date and will be
     *                    provided in the format 'YYYY-MM-DD'.  The allowable
     *                    range is 1000-01-01 through 2900-01-01.  This
     *                    property is mutually exclusive with the *text_search*
     *                    property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#TIME
     *                    TIME}: Valid only for 'string' columns.  Indicates
     *                    that this field represents a time-of-day and will be
     *                    provided in the format 'HH:MM:SS.mmm'.  The allowable
     *                    range is 00:00:00.000 through 23:59:59.999.  This
     *                    property is mutually exclusive with the *text_search*
     *                    property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DATETIME
     *                    DATETIME}: Valid only for 'string' columns.
     *                    Indicates that this field represents a datetime and
     *                    will be provided in the format 'YYYY-MM-DD
     *                    HH:MM:SS.mmm'.  The allowable range is 1000-01-01
     *                    00:00:00.000 through 2900-01-01 23:59:59.999.  This
     *                    property is mutually exclusive with the *text_search*
     *                    property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR1
     *                    CHAR1}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 1
     *                    character. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR2
     *                    CHAR2}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 2
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR4
     *                    CHAR4}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 4
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR8
     *                    CHAR8}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 8
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR16
     *                    CHAR16}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 16
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR32
     *                    CHAR32}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 32
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR64
     *                    CHAR64}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 64
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR128
     *                    CHAR128}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 128
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR256
     *                    CHAR256}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 256
     *                    characters. This property cannot be combined with
     *                    *text_search*
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#INT8
     *                    INT8}: This property provides optimized memory and
     *                    query performance for int columns. Ints with this
     *                    property must be between -128 and +127 (inclusive)
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#INT16
     *                    INT16}: This property provides optimized memory and
     *                    query performance for int columns. Ints with this
     *                    property must be between -32768 and +32767
     *                    (inclusive)
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#IPV4
     *                    IPV4}: This property provides optimized memory, disk
     *                    and query performance for string columns representing
     *                    IPv4 addresses (i.e. 192.168.1.1). Strings with this
     *                    property must be of the form: A.B.C.D where A, B, C
     *                    and D are in the range of 0-255.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#WKT
     *                    WKT}: Valid only for 'string' and 'bytes' columns.
     *                    Indicates that this field contains geospatial
     *                    geometry objects in Well-Known Text (WKT) or
     *                    Well-Known Binary (WKB) format.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#PRIMARY_KEY
     *                    PRIMARY_KEY}: This property indicates that this
     *                    column will be part of (or the entire) primary key.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#SHARD_KEY
     *                    SHARD_KEY}: This property indicates that this column
     *                    will be part of (or the entire) shard key.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#NULLABLE
     *                    NULLABLE}: This property indicates that this column
     *                    is nullable.  However, setting this property is
     *                    insufficient for making the column nullable.  The
     *                    user must declare the type of the column as a union
     *                    between its regular type and 'null' in the avro
     *                    schema for the record type in {@code typeDefinition}.
     *                    For example, if a column is of type integer and is
     *                    nullable, then the entry for the column in the avro
     *                    schema must be: ['int', 'null'].
     *                    The C++, C#, Java, and Python APIs have built-in
     *                    convenience for bypassing setting the avro schema by
     *                    hand.  For those two languages, one can use this
     *                    property as usual and not have to worry about the
     *                    avro schema for the record.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DICT
     *                    DICT}: This property indicates that this column
     *                    should be dictionary encoded. It can only be used in
     *                    conjunction with string columns marked with a charN
     *                    property. This property is appropriate for columns
     *                    where the cardinality (the number of unique values)
     *                    is expected to be low, and can save a large amount of
     *                    memory.
     *                    </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTypeResponse createType(String typeDefinition, String label, Map<String, List<String>> properties, Map<String, String> options) throws GPUdbException {
        CreateTypeRequest actualRequest_ = new CreateTypeRequest(typeDefinition, label, properties, options);
        CreateTypeResponse actualResponse_ = new CreateTypeResponse();
        submitRequest("/create/type", actualRequest_, actualResponse_, false);
        setTypeDescriptorIfMissing(actualResponse_.getTypeId(), actualResponse_.getLabel(), actualResponse_.getTypeDefinition(), actualResponse_.getProperties());
        return actualResponse_;
    }



    /**
     * Performs a <a href="../../../../concepts/unions.html"
     * target="_top">union</a> (concatenation) of one or more existing tables
     * or views, the results of which are stored in a new table. It is
     * equivalent to the SQL UNION ALL operator.  Non-charN 'string' and
     * 'bytes' column types cannot be included in a union, neither can columns
     * with the property 'store_only'. Though not explicitly unions, <a
     * href="../../../../concepts/intersect.html" target="_top">intersect</a>
     * and <a href="../../../../concepts/except.html" target="_top">except</a>
     * are also available from this endpoint.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUnionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUnionResponse createUnion(CreateUnionRequest request) throws GPUdbException {
        CreateUnionResponse actualResponse_ = new CreateUnionResponse();
        submitRequest("/create/union", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Performs a <a href="../../../../concepts/unions.html"
     * target="_top">union</a> (concatenation) of one or more existing tables
     * or views, the results of which are stored in a new table. It is
     * equivalent to the SQL UNION ALL operator.  Non-charN 'string' and
     * 'bytes' column types cannot be included in a union, neither can columns
     * with the property 'store_only'. Though not explicitly unions, <a
     * href="../../../../concepts/intersect.html" target="_top">intersect</a>
     * and <a href="../../../../concepts/except.html" target="_top">except</a>
     * are also available from this endpoint.
     * 
     * @param tableName  Name of the table to be created. Has the same naming
     *                   restrictions as <a
     *                   href="../../../../concepts/tables.html"
     *                   target="_top">tables</a>.
     * @param tableNames  The list of table names making up the union. Must
     *                    contain the names of one or more existing tables.
     * @param inputColumnNames  The list of columns from each of the
     *                          corresponding input tables.
     * @param outputColumnNames  The list of names of the columns to be stored
     *                           in the union.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the union. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the union will be a top-level
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: If 'true' then the columns of the
     *                 union will be cached on the GPU.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MODE
     *                 MODE}: If 'merge_views' then this operation will merge
     *                 (i.e. union) the provided views. All 'table_names' must
     *                 be views from the same underlying base table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}: Retains all rows from the specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION
     *                 UNION}: Retains all unique rows from the specified
     *                 tables (synonym for 'union_distinct').
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
     *                 UNION_DISTINCT}: Retains all unique rows from the
     *                 specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT
     *                 EXCEPT}: Retains all unique rows from the first table
     *                 that do not appear in the second table (only works on 2
     *                 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT
     *                 INTERSECT}: Retains all unique rows that appear in both
     *                 of the specified tables (only works on 2 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS
     *                 MERGE_VIEWS}: Merge two or more views (or views of
     *                 views) of the same base data set into a new view. If
     *                 this mode is selected
     *                                                       {@code
     *                 inputColumnNames} AND {@code outputColumnNames} are
     *                 ignored The resulting view would match the results of a
     *                 SQL OR operation, e.g., if filter 1 creates a view using
     *                 the expression 'x = 10' and filter 2 creates a view
     *                 using the expression 'x <= 10', then the merge views
     *                 operation creates a new view using the expression 'x =
     *                 10 OR x <= 10'.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for
     *                 this table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the union specified in
     *                 {@code tableName} will be persisted and will not expire
     *                 unless a {@code ttl} is specified.   If {@code false},
     *                 then the union will be an in-memory table and will
     *                 expire unless a {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUnionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUnionResponse createUnion(String tableName, List<String> tableNames, List<List<String>> inputColumnNames, List<String> outputColumnNames, Map<String, String> options) throws GPUdbException {
        CreateUnionRequest actualRequest_ = new CreateUnionRequest(tableName, tableNames, inputColumnNames, outputColumnNames, options);
        CreateUnionResponse actualResponse_ = new CreateUnionResponse();
        submitRequest("/create/union", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new external user (a user whose credentials are managed by an
     * external LDAP).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserExternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserExternalResponse createUserExternal(CreateUserExternalRequest request) throws GPUdbException {
        CreateUserExternalResponse actualResponse_ = new CreateUserExternalResponse();
        submitRequest("/create/user/external", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new external user (a user whose credentials are managed by an
     * external LDAP).
     * 
     * @param name  Name of the user to be created. Must exactly match the
     *              user's name in the external LDAP, prefixed with a @. Must
     *              not be the same name as an existing user.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserExternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserExternalResponse createUserExternal(String name, Map<String, String> options) throws GPUdbException {
        CreateUserExternalRequest actualRequest_ = new CreateUserExternalRequest(name, options);
        CreateUserExternalResponse actualResponse_ = new CreateUserExternalResponse();
        submitRequest("/create/user/external", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new internal user (a user whose credentials are managed by the
     * database system).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserInternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserInternalResponse createUserInternal(CreateUserInternalRequest request) throws GPUdbException {
        CreateUserInternalResponse actualResponse_ = new CreateUserInternalResponse();
        submitRequest("/create/user/internal", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new internal user (a user whose credentials are managed by the
     * database system).
     * 
     * @param name  Name of the user to be created. Must contain only lowercase
     *              letters, digits, and underscores, and cannot begin with a
     *              digit. Must not be the same name as an existing user or
     *              role.
     * @param password  Initial password of the user to be created. May be an
     *                  empty string for no password.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserInternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserInternalResponse createUserInternal(String name, String password, Map<String, String> options) throws GPUdbException {
        CreateUserInternalRequest actualRequest_ = new CreateUserInternalRequest(name, password, options);
        CreateUserInternalResponse actualResponse_ = new CreateUserInternalResponse();
        submitRequest("/create/user/internal", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes a proc. Any currently running instances of the proc will be
     * killed.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteProcResponse deleteProc(DeleteProcRequest request) throws GPUdbException {
        DeleteProcResponse actualResponse_ = new DeleteProcResponse();
        submitRequest("/delete/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes a proc. Any currently running instances of the proc will be
     * killed.
     * 
     * @param procName  Name of the proc to be deleted. Must be the name of a
     *                  currently existing proc.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteProcResponse deleteProc(String procName, Map<String, String> options) throws GPUdbException {
        DeleteProcRequest actualRequest_ = new DeleteProcRequest(procName, options);
        DeleteProcResponse actualResponse_ = new DeleteProcResponse();
        submitRequest("/delete/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes record(s) matching the provided criteria from the given table.
     * The record selection criteria can either be one or more  {@code
     * expressions} (matching multiple records) or a single record identified
     * by {@code record_id} options.  Note that the two selection criteria are
     * mutually exclusive.  This operation cannot be run on a collection or a
     * view.  The operation is synchronous meaning that a response will not be
     * available until the request is completely processed and all the matching
     * records are deleted.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRecordsResponse deleteRecords(DeleteRecordsRequest request) throws GPUdbException {
        DeleteRecordsResponse actualResponse_ = new DeleteRecordsResponse();
        submitRequest("/delete/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes record(s) matching the provided criteria from the given table.
     * The record selection criteria can either be one or more  {@code
     * expressions} (matching multiple records) or a single record identified
     * by {@code record_id} options.  Note that the two selection criteria are
     * mutually exclusive.  This operation cannot be run on a collection or a
     * view.  The operation is synchronous meaning that a response will not be
     * available until the request is completely processed and all the matching
     * records are deleted.
     * 
     * @param tableName  Name of the table from which to delete records. The
     *                   set must be a currently existing table and not a
     *                   collection or a view.
     * @param expressions  A list of the actual predicates, one for each
     *                     select; format should follow the guidelines provided
     *                     {@link GPUdb#filter(String, String, String, Map)
     *                     here}. Specifying one or more {@code expressions} is
     *                     mutually exclusive to specifying {@code record_id}
     *                     in the {@code options}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#GLOBAL_EXPRESSION
     *                 GLOBAL_EXPRESSION}: An optional global expression to
     *                 reduce the search space of the {@code expressions}.
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#RECORD_ID
     *                 RECORD_ID}: A record id identifying a single record,
     *                 obtained at the time of {@link
     *                 GPUdb#insertRecordsRaw(RawInsertRecordsRequest)
     *                 insertion of the record} or by calling {@link
     *                 GPUdb#getRecordsFromCollectionRaw(GetRecordsFromCollectionRequest)}
     *                 with the *return_record_ids* option.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRecordsResponse deleteRecords(String tableName, List<String> expressions, Map<String, String> options) throws GPUdbException {
        DeleteRecordsRequest actualRequest_ = new DeleteRecordsRequest(tableName, expressions, options);
        DeleteRecordsResponse actualResponse_ = new DeleteRecordsResponse();
        submitRequest("/delete/records", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRoleResponse deleteRole(DeleteRoleRequest request) throws GPUdbException {
        DeleteRoleResponse actualResponse_ = new DeleteRoleResponse();
        submitRequest("/delete/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing role.
     * 
     * @param name  Name of the role to be deleted. Must be an existing role.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRoleResponse deleteRole(String name, Map<String, String> options) throws GPUdbException {
        DeleteRoleRequest actualRequest_ = new DeleteRoleRequest(name, options);
        DeleteRoleResponse actualResponse_ = new DeleteRoleResponse();
        submitRequest("/delete/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteUserResponse deleteUser(DeleteUserRequest request) throws GPUdbException {
        DeleteUserResponse actualResponse_ = new DeleteUserResponse();
        submitRequest("/delete/user", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing user.
     * 
     * @param name  Name of the user to be deleted. Must be an existing user.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteUserResponse deleteUser(String name, Map<String, String> options) throws GPUdbException {
        DeleteUserRequest actualRequest_ = new DeleteUserRequest(name, options);
        DeleteUserResponse actualResponse_ = new DeleteUserResponse();
        submitRequest("/delete/user", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Executes a proc. This endpoint is asynchronous and does not wait for the
     * proc to complete before returning.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ExecuteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ExecuteProcResponse executeProc(ExecuteProcRequest request) throws GPUdbException {
        ExecuteProcResponse actualResponse_ = new ExecuteProcResponse();
        submitRequest("/execute/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Executes a proc. This endpoint is asynchronous and does not wait for the
     * proc to complete before returning.
     * 
     * @param procName  Name of the proc to execute. Must be the name of a
     *                  currently existing proc.
     * @param params  A map containing named parameters to pass to the proc.
     *                Each key/value pair specifies the name of a parameter and
     *                its value.
     * @param binParams  A map containing named binary parameters to pass to
     *                   the proc. Each key/value pair specifies the name of a
     *                   parameter and its value.
     * @param inputTableNames  Names of the tables containing data to be passed
     *                         to the proc. Each name specified must be the
     *                         name of a currently existing table. If no table
     *                         names are specified, no data will be passed to
     *                         the proc.
     * @param inputColumnNames  Map of table names from {@code inputTableNames}
     *                          to lists of names of columns from those tables
     *                          that will be passed to the proc. Each column
     *                          name specified must be the name of an existing
     *                          column in the corresponding table. If a table
     *                          name from {@code inputTableNames} is not
     *                          included, all columns from that table will be
     *                          passed to the proc.
     * @param outputTableNames  Names of the tables to which output data from
     *                          the proc will be written. If a specified table
     *                          does not exist, it will automatically be
     *                          created with the same schema as the
     *                          corresponding table (by order) from {@code
     *                          inputTableNames}, excluding any primary and
     *                          shard keys. If a specified table is a
     *                          non-persistent result table, it must not have
     *                          primary or shard keys. If no table names are
     *                          specified, no output data can be returned from
     *                          the proc.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteProcRequest.Options#CACHE_INPUT
     *                 CACHE_INPUT}: A comma-delimited list of table names from
     *                 {@code inputTableNames} from which input data will be
     *                 cached for use in subsequent calls to {@link
     *                 GPUdb#executeProc(String, Map, Map, List, Map, List,
     *                 Map)} with the {@code use_cached_input} option. Cached
     *                 input data will be retained until the proc status is
     *                 cleared with the {@link GPUdb#showProcStatus(String,
     *                 Map) clear_complete} option of {@link
     *                 GPUdb#showProcStatus(String, Map)} and all proc
     *                 instances using the cached data have completed.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteProcRequest.Options#USE_CACHED_INPUT
     *                 USE_CACHED_INPUT}: A comma-delimited list of run IDs (as
     *                 returned from prior calls to {@link
     *                 GPUdb#executeProc(String, Map, Map, List, Map, List,
     *                 Map)}) of running or completed proc instances from which
     *                 input data cached using the {@code cache_input} option
     *                 will be used. Cached input data will not be used for any
     *                 tables specified in {@code inputTableNames}, but data
     *                 from all other tables cached for the specified run IDs
     *                 will be passed to the proc. If the same table was cached
     *                 for multiple specified run IDs, the cached data from the
     *                 first run ID specified in the list that includes that
     *                 table will be used.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ExecuteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ExecuteProcResponse executeProc(String procName, Map<String, String> params, Map<String, ByteBuffer> binParams, List<String> inputTableNames, Map<String, List<String>> inputColumnNames, List<String> outputTableNames, Map<String, String> options) throws GPUdbException {
        ExecuteProcRequest actualRequest_ = new ExecuteProcRequest(procName, params, binParams, inputTableNames, inputColumnNames, outputTableNames, options);
        ExecuteProcResponse actualResponse_ = new ExecuteProcResponse();
        submitRequest("/execute/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters data based on the specified expression.  The results are stored
     * in a result set with the given {@code viewName}.
     * <p>
     * For details see <a href="../../../../concepts/expressions.html"
     * target="_top">concepts</a>.
     * <p>
     * The response message contains the number of points for which the
     * expression evaluated to be true, which is equivalent to the size of the
     * result view.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterResponse filter(FilterRequest request) throws GPUdbException {
        FilterResponse actualResponse_ = new FilterResponse();
        submitRequest("/filter", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters data based on the specified expression.  The results are stored
     * in a result set with the given {@code viewName}.
     * <p>
     * For details see <a href="../../../../concepts/expressions.html"
     * target="_top">concepts</a>.
     * <p>
     * The response message contains the number of points for which the
     * expression evaluated to be true, which is equivalent to the size of the
     * result view.
     * 
     * @param tableName  Name of the table to filter.  This may be the ID of a
     *                   collection, table or a result set (for chaining
     *                   queries).  Collections may be filtered only if all
     *                   tables within the collection have the same type ID.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param expression  The select expression to filter the specified table.
     *                    For details see <a
     *                    href="../../../../concepts/expressions.html"
     *                    target="_top">concepts</a>.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterRequest.Options#TTL TTL}: Sets
     *                 the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the view specified in {@code
     *                 viewName}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterResponse filter(String tableName, String viewName, String expression, Map<String, String> options) throws GPUdbException {
        FilterRequest actualRequest_ = new FilterRequest(tableName, viewName, expression, options);
        FilterResponse actualResponse_ = new FilterResponse();
        submitRequest("/filter", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table are within a named area of
     * interest (NAI/polygon). The operation is synchronous, meaning that a
     * response will not be returned until all the matching objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new resultant set (view) which satisfies the input NAI restriction
     * specification is created with the name {@code viewName} passed in as
     * part of the input.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaResponse filterByArea(FilterByAreaRequest request) throws GPUdbException {
        FilterByAreaResponse actualResponse_ = new FilterByAreaResponse();
        submitRequest("/filter/byarea", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table are within a named area of
     * interest (NAI/polygon). The operation is synchronous, meaning that a
     * response will not be returned until all the matching objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new resultant set (view) which satisfies the input NAI restriction
     * specification is created with the name {@code viewName} passed in as
     * part of the input.
     * 
     * @param tableName  Name of the table to filter.  This may be the name of
     *                   a collection, a table or a view (when chaining
     *                   queries).  Collections may be filtered only if all
     *                   tables within the collection have the same type ID.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param xColumnName  Name of the column containing the x values to be
     *                     filtered.
     * @param xVector  List of x coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param yColumnName  Name of the column containing the y values to be
     *                     filtered.
     * @param yVector  List of y coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaResponse filterByArea(String tableName, String viewName, String xColumnName, List<Double> xVector, String yColumnName, List<Double> yVector, Map<String, String> options) throws GPUdbException {
        FilterByAreaRequest actualRequest_ = new FilterByAreaRequest(tableName, viewName, xColumnName, xVector, yColumnName, yVector, options);
        FilterByAreaResponse actualResponse_ = new FilterByAreaResponse();
        submitRequest("/filter/byarea", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * named area of interest (NAI/polygon). The operation is synchronous,
     * meaning that a response will not be returned until all the matching
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * NAI restriction specification is created with the name {@code viewName}
     * passed in as part of the input.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaGeometryResponse filterByAreaGeometry(FilterByAreaGeometryRequest request) throws GPUdbException {
        FilterByAreaGeometryResponse actualResponse_ = new FilterByAreaGeometryResponse();
        submitRequest("/filter/byarea/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * named area of interest (NAI/polygon). The operation is synchronous,
     * meaning that a response will not be returned until all the matching
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * NAI restriction specification is created with the name {@code viewName}
     * passed in as part of the input.
     * 
     * @param tableName  Name of the table to filter.  This may be the name of
     *                   a collection, a table or a view (when chaining
     *                   queries).  Collections may be filtered only if all
     *                   tables within the collection have the same type ID.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Must not be an already existing
     *                  collection, table or view.
     * @param columnName  Name of the geospatial geometry column to be
     *                    filtered.
     * @param xVector  List of x coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param yVector  List of y coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaGeometryResponse filterByAreaGeometry(String tableName, String viewName, String columnName, List<Double> xVector, List<Double> yVector, Map<String, String> options) throws GPUdbException {
        FilterByAreaGeometryRequest actualRequest_ = new FilterByAreaGeometryRequest(tableName, viewName, columnName, xVector, yVector, options);
        FilterByAreaGeometryResponse actualResponse_ = new FilterByAreaGeometryResponse();
        submitRequest("/filter/byarea/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates how many objects within the given table lie in a rectangular
     * box. The operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available. The response payload
     * provides the count of the resulting set. A new resultant set which
     * satisfies the input NAI restriction specification is also created when a
     * {@code viewName} is passed in as part of the input payload.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxResponse filterByBox(FilterByBoxRequest request) throws GPUdbException {
        FilterByBoxResponse actualResponse_ = new FilterByBoxResponse();
        submitRequest("/filter/bybox", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates how many objects within the given table lie in a rectangular
     * box. The operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available. The response payload
     * provides the count of the resulting set. A new resultant set which
     * satisfies the input NAI restriction specification is also created when a
     * {@code viewName} is passed in as part of the input payload.
     * 
     * @param tableName  Name of the table on which the bounding box operation
     *                   will be performed. Must be an existing table.
     * @param viewName  Optional name of the result view that will be created
     *                  containing the results of the query. Has the same
     *                  naming restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param xColumnName  Name of the column on which to perform the bounding
     *                     box query. Must be a valid numeric column.
     * @param minX  Lower bound for the column chosen by {@code xColumnName}.
     *              Must be less than or equal to {@code maxX}.
     * @param maxX  Upper bound for {@code xColumnName}.  Must be greater than
     *              or equal to {@code minX}.
     * @param yColumnName  Name of a column on which to perform the bounding
     *                     box query. Must be a valid numeric column.
     * @param minY  Lower bound for {@code yColumnName}. Must be less than or
     *              equal to {@code maxY}.
     * @param maxY  Upper bound for {@code yColumnName}. Must be greater than
     *              or equal to {@code minY}.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxResponse filterByBox(String tableName, String viewName, String xColumnName, double minX, double maxX, String yColumnName, double minY, double maxY, Map<String, String> options) throws GPUdbException {
        FilterByBoxRequest actualRequest_ = new FilterByBoxRequest(tableName, viewName, xColumnName, minX, maxX, yColumnName, minY, maxY, options);
        FilterByBoxResponse actualResponse_ = new FilterByBoxResponse();
        submitRequest("/filter/bybox", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * rectangular box. The operation is synchronous, meaning that a response
     * will not be returned until all the objects are fully available. The
     * response payload provides the count of the resulting set. A new
     * resultant set which satisfies the input NAI restriction specification is
     * also created when a {@code viewName} is passed in as part of the input
     * payload.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxGeometryResponse filterByBoxGeometry(FilterByBoxGeometryRequest request) throws GPUdbException {
        FilterByBoxGeometryResponse actualResponse_ = new FilterByBoxGeometryResponse();
        submitRequest("/filter/bybox/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * rectangular box. The operation is synchronous, meaning that a response
     * will not be returned until all the objects are fully available. The
     * response payload provides the count of the resulting set. A new
     * resultant set which satisfies the input NAI restriction specification is
     * also created when a {@code viewName} is passed in as part of the input
     * payload.
     * 
     * @param tableName  Name of the table on which the bounding box operation
     *                   will be performed. Must be an existing table.
     * @param viewName  Optional name of the result view that will be created
     *                  containing the results of the query. Must not be an
     *                  already existing collection, table or view.
     * @param columnName  Name of the geospatial geometry column to be
     *                    filtered.
     * @param minX  Lower bound for the x-coordinate of the rectangular box.
     *              Must be less than or equal to {@code maxX}.
     * @param maxX  Upper bound for the x-coordinate of the rectangular box.
     *              Must be greater than or equal to {@code minX}.
     * @param minY  Lower bound for the y-coordinate of the rectangular box.
     *              Must be less than or equal to {@code maxY}.
     * @param maxY  Upper bound for the y-coordinate of the rectangular box.
     *              Must be greater than or equal to {@code minY}.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxGeometryResponse filterByBoxGeometry(String tableName, String viewName, String columnName, double minX, double maxX, double minY, double maxY, Map<String, String> options) throws GPUdbException {
        FilterByBoxGeometryRequest actualRequest_ = new FilterByBoxGeometryRequest(tableName, viewName, columnName, minX, maxX, minY, maxY, options);
        FilterByBoxGeometryResponse actualResponse_ = new FilterByBoxGeometryResponse();
        submitRequest("/filter/bybox/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Applies a geometry filter against a geospatial geometry column in a
     * given table, collection or view. The filtering geometry is provided by
     * {@code inputWkt}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByGeometryResponse filterByGeometry(FilterByGeometryRequest request) throws GPUdbException {
        FilterByGeometryResponse actualResponse_ = new FilterByGeometryResponse();
        submitRequest("/filter/bygeometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Applies a geometry filter against a geospatial geometry column in a
     * given table, collection or view. The filtering geometry is provided by
     * {@code inputWkt}.
     * 
     * @param tableName  Name of the table on which the filter by geometry will
     *                   be performed.  Must be an existing table, collection
     *                   or view containing a geospatial geometry column.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param columnName  Name of the column to be used in the filter. Must be
     *                    a geospatial geometry column.
     * @param inputWkt  A geometry in WKT format that will be used to filter
     *                  the objects in {@code tableName}.
     * @param operation  The geometric filtering operation to perform
     *                   Supported values:
     *                   <ul>
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#CONTAINS
     *                   CONTAINS}: Matches records that contain the given WKT
     *                   in {@code inputWkt}, i.e. the given WKT is within the
     *                   bounds of a record's geometry.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#CROSSES
     *                   CROSSES}: Matches records that cross the given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#DISJOINT
     *                   DISJOINT}: Matches records that are disjoint from the
     *                   given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#EQUALS
     *                   EQUALS}: Matches records that are the same as the
     *                   given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#INTERSECTS
     *                   INTERSECTS}: Matches records that intersect the given
     *                   WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#OVERLAPS
     *                   OVERLAPS}: Matches records that overlap the given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#TOUCHES
     *                   TOUCHES}: Matches records that touch the given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#WITHIN
     *                   WITHIN}: Matches records that are within the given
     *                   WKT.
     *                   </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByGeometryResponse filterByGeometry(String tableName, String viewName, String columnName, String inputWkt, String operation, Map<String, String> options) throws GPUdbException {
        FilterByGeometryRequest actualRequest_ = new FilterByGeometryRequest(tableName, viewName, columnName, inputWkt, operation, options);
        FilterByGeometryResponse actualResponse_ = new FilterByGeometryResponse();
        submitRequest("/filter/bygeometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which records from a table have values in the given list for
     * the corresponding column. The operation is synchronous, meaning that a
     * response will not be returned until all the objects are fully available.
     * The response payload provides the count of the resulting set. A new
     * resultant set (view) which satisfies the input filter specification is
     * also created if a {@code viewName} is passed in as part of the request.
     * <p>
     * For example, if a type definition has the columns 'x' and 'y', then a
     * filter by list query with the column map {"x":["10.1", "2.3"],
     * "y":["0.0", "-31.5", "42.0"]} will return the count of all data points
     * whose x and y values match both in the respective x- and y-lists, e.g.,
     * "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5", etc. However, a record
     * with "x = 10.1 and y = -31.5" or "x = 2.3 and y = 0.0" would not be
     * returned because the values in the given lists do not correspond.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByListResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByListResponse filterByList(FilterByListRequest request) throws GPUdbException {
        FilterByListResponse actualResponse_ = new FilterByListResponse();
        submitRequest("/filter/bylist", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which records from a table have values in the given list for
     * the corresponding column. The operation is synchronous, meaning that a
     * response will not be returned until all the objects are fully available.
     * The response payload provides the count of the resulting set. A new
     * resultant set (view) which satisfies the input filter specification is
     * also created if a {@code viewName} is passed in as part of the request.
     * <p>
     * For example, if a type definition has the columns 'x' and 'y', then a
     * filter by list query with the column map {"x":["10.1", "2.3"],
     * "y":["0.0", "-31.5", "42.0"]} will return the count of all data points
     * whose x and y values match both in the respective x- and y-lists, e.g.,
     * "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5", etc. However, a record
     * with "x = 10.1 and y = -31.5" or "x = 2.3 and y = 0.0" would not be
     * returned because the values in the given lists do not correspond.
     * 
     * @param tableName  Name of the table to filter.  This may be the ID of a
     *                   collection, table or a result set (for chaining
     *                   queries).  Collections may be filtered only if all
     *                   tables within the collection have the same type ID.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param columnValuesMap  List of values for the corresponding column in
     *                         the table
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#FILTER_MODE
     *                 FILTER_MODE}: String indicating the filter mode, either
     *                 'in_list' or 'not_in_list'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#IN_LIST
     *                 IN_LIST}: The filter will match all items that are in
     *                 the provided list(s).
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#NOT_IN_LIST
     *                 NOT_IN_LIST}: The filter will match all items that are
     *                 not in the provided list(s).
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#IN_LIST
     *                 IN_LIST}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByListResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByListResponse filterByList(String tableName, String viewName, Map<String, List<String>> columnValuesMap, Map<String, String> options) throws GPUdbException {
        FilterByListRequest actualRequest_ = new FilterByListRequest(tableName, viewName, columnValuesMap, options);
        FilterByListResponse actualResponse_ = new FilterByListResponse();
        submitRequest("/filter/bylist", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table lie within a circle with the given
     * radius and center point (i.e. circular NAI). The operation is
     * synchronous, meaning that a response will not be returned until all the
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * circular NAI restriction specification is also created if a {@code
     * viewName} is passed in as part of the request.
     * <p>
     * For track data, all track points that lie within the circle plus one
     * point on either side of the circle (if the track goes beyond the circle)
     * will be included in the result.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusResponse filterByRadius(FilterByRadiusRequest request) throws GPUdbException {
        FilterByRadiusResponse actualResponse_ = new FilterByRadiusResponse();
        submitRequest("/filter/byradius", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table lie within a circle with the given
     * radius and center point (i.e. circular NAI). The operation is
     * synchronous, meaning that a response will not be returned until all the
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * circular NAI restriction specification is also created if a {@code
     * viewName} is passed in as part of the request.
     * <p>
     * For track data, all track points that lie within the circle plus one
     * point on either side of the circle (if the track goes beyond the circle)
     * will be included in the result.
     * 
     * @param tableName  Name of the table on which the filter by radius
     *                   operation will be performed.  Must be an existing
     *                   table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param xColumnName  Name of the column to be used for the x-coordinate
     *                     (the longitude) of the center.
     * @param xCenter  Value of the longitude of the center. Must be within
     *                 [-180.0, 180.0].  The minimum allowed value is -180. The
     *                 maximum allowed value is 180.
     * @param yColumnName  Name of the column to be used for the
     *                     y-coordinate-the latitude-of the center.
     * @param yCenter  Value of the latitude of the center. Must be within
     *                 [-90.0, 90.0].  The minimum allowed value is -90. The
     *                 maximum allowed value is 90.
     * @param radius  The radius of the circle within which the search will be
     *                performed. Must be a non-zero positive value. It is in
     *                meters; so, for example, a value of '42000' means 42 km.
     *                The minimum allowed value is 0. The maximum allowed value
     *                is MAX_INT.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusResponse filterByRadius(String tableName, String viewName, String xColumnName, double xCenter, String yColumnName, double yCenter, double radius, Map<String, String> options) throws GPUdbException {
        FilterByRadiusRequest actualRequest_ = new FilterByRadiusRequest(tableName, viewName, xColumnName, xCenter, yColumnName, yCenter, radius, options);
        FilterByRadiusResponse actualResponse_ = new FilterByRadiusResponse();
        submitRequest("/filter/byradius", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * circle with the given radius and center point (i.e. circular NAI). The
     * operation is synchronous, meaning that a response will not be returned
     * until all the objects are fully available. The response payload provides
     * the count of the resulting set. A new resultant set (view) which
     * satisfies the input circular NAI restriction specification is also
     * created if a {@code viewName} is passed in as part of the request.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusGeometryResponse filterByRadiusGeometry(FilterByRadiusGeometryRequest request) throws GPUdbException {
        FilterByRadiusGeometryResponse actualResponse_ = new FilterByRadiusGeometryResponse();
        submitRequest("/filter/byradius/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * circle with the given radius and center point (i.e. circular NAI). The
     * operation is synchronous, meaning that a response will not be returned
     * until all the objects are fully available. The response payload provides
     * the count of the resulting set. A new resultant set (view) which
     * satisfies the input circular NAI restriction specification is also
     * created if a {@code viewName} is passed in as part of the request.
     * 
     * @param tableName  Name of the table on which the filter by radius
     *                   operation will be performed.  Must be an existing
     *                   table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Must not be an already existing
     *                  collection, table or view.
     * @param columnName  Name of the geospatial geometry column to be
     *                    filtered.
     * @param xCenter  Value of the longitude of the center. Must be within
     *                 [-180.0, 180.0].  The minimum allowed value is -180. The
     *                 maximum allowed value is 180.
     * @param yCenter  Value of the latitude of the center. Must be within
     *                 [-90.0, 90.0].  The minimum allowed value is -90. The
     *                 maximum allowed value is 90.
     * @param radius  The radius of the circle within which the search will be
     *                performed. Must be a non-zero positive value. It is in
     *                meters; so, for example, a value of '42000' means 42 km.
     *                The minimum allowed value is 0. The maximum allowed value
     *                is MAX_INT.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusGeometryResponse filterByRadiusGeometry(String tableName, String viewName, String columnName, double xCenter, double yCenter, double radius, Map<String, String> options) throws GPUdbException {
        FilterByRadiusGeometryRequest actualRequest_ = new FilterByRadiusGeometryRequest(tableName, viewName, columnName, xCenter, yCenter, radius, options);
        FilterByRadiusGeometryResponse actualResponse_ = new FilterByRadiusGeometryResponse();
        submitRequest("/filter/byradius/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table have a column that is within the
     * given bounds. An object from the table identified by {@code tableName}
     * is added to the view {@code viewName} if its column is within [{@code
     * lowerBound}, {@code upperBound}] (inclusive). The operation is
     * synchronous. The response provides a count of the number of objects
     * which passed the bound filter.  Although this functionality can also be
     * accomplished with the standard filter function, it is more efficient.
     * <p>
     * For track objects, the count reflects how many points fall within the
     * given bounds (which may not include all the track points of any given
     * track).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRangeResponse filterByRange(FilterByRangeRequest request) throws GPUdbException {
        FilterByRangeResponse actualResponse_ = new FilterByRangeResponse();
        submitRequest("/filter/byrange", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table have a column that is within the
     * given bounds. An object from the table identified by {@code tableName}
     * is added to the view {@code viewName} if its column is within [{@code
     * lowerBound}, {@code upperBound}] (inclusive). The operation is
     * synchronous. The response provides a count of the number of objects
     * which passed the bound filter.  Although this functionality can also be
     * accomplished with the standard filter function, it is more efficient.
     * <p>
     * For track objects, the count reflects how many points fall within the
     * given bounds (which may not include all the track points of any given
     * track).
     * 
     * @param tableName  Name of the table on which the filter by range
     *                   operation will be performed.  Must be an existing
     *                   table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param columnName  Name of a column on which the operation would be
     *                    applied.
     * @param lowerBound  Value of the lower bound (inclusive).
     * @param upperBound  Value of the upper bound (inclusive).
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRangeResponse filterByRange(String tableName, String viewName, String columnName, double lowerBound, double upperBound, Map<String, String> options) throws GPUdbException {
        FilterByRangeRequest actualRequest_ = new FilterByRangeRequest(tableName, viewName, columnName, lowerBound, upperBound, options);
        FilterByRangeResponse actualResponse_ = new FilterByRangeResponse();
        submitRequest("/filter/byrange", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects matching all points of the given track (works only on
     * track type data).  It allows users to specify a particular track to find
     * all other points in the table that fall within specified ranges-spatial
     * and temporal-of all points of the given track. Additionally, the user
     * can specify another track to see if the two intersect (or go close to
     * each other within the specified ranges). The user also has the
     * flexibility of using different metrics for the spatial distance
     * calculation: Euclidean (flat geometry) or Great Circle (spherical
     * geometry to approximate the Earth's surface distances). The filtered
     * points are stored in a newly created result set. The return value of the
     * function is the number of points in the resultant set (view).
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterBySeriesResponse filterBySeries(FilterBySeriesRequest request) throws GPUdbException {
        FilterBySeriesResponse actualResponse_ = new FilterBySeriesResponse();
        submitRequest("/filter/byseries", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects matching all points of the given track (works only on
     * track type data).  It allows users to specify a particular track to find
     * all other points in the table that fall within specified ranges-spatial
     * and temporal-of all points of the given track. Additionally, the user
     * can specify another track to see if the two intersect (or go close to
     * each other within the specified ranges). The user also has the
     * flexibility of using different metrics for the spatial distance
     * calculation: Euclidean (flat geometry) or Great Circle (spherical
     * geometry to approximate the Earth's surface distances). The filtered
     * points are stored in a newly created result set. The return value of the
     * function is the number of points in the resultant set (view).
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available.
     * 
     * @param tableName  Name of the table on which the filter by track
     *                   operation will be performed. Must be a currently
     *                   existing table with track semantic type.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param trackId  The ID of the track which will act as the filtering
     *                 points. Must be an existing track within the given
     *                 table.
     * @param targetTrackIds  Up to one track ID to intersect with the "filter"
     *                        track. If any provided, it must be an valid track
     *                        ID within the given set.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#SPATIAL_RADIUS
     *                 SPATIAL_RADIUS}: A positive number passed as a string
     *                 representing the radius of the search area centered
     *                 around each track point's geospatial coordinates. The
     *                 value is interpreted in meters. Required parameter.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#TIME_RADIUS
     *                 TIME_RADIUS}: A positive number passed as a string
     *                 representing the maximum allowable time difference
     *                 between the timestamps of a filtered object and the
     *                 given track's points. The value is interpreted in
     *                 seconds. Required parameter.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#SPATIAL_DISTANCE_METRIC
     *                 SPATIAL_DISTANCE_METRIC}: A string representing the
     *                 coordinate system to use for the spatial search
     *                 criteria. Acceptable values are 'euclidean' and
     *                 'great_circle'. Optional parameter; default is
     *                 'euclidean'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#EUCLIDEAN
     *                 EUCLIDEAN}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#GREAT_CIRCLE
     *                 GREAT_CIRCLE}
     *                 </ul>
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterBySeriesResponse filterBySeries(String tableName, String viewName, String trackId, List<String> targetTrackIds, Map<String, String> options) throws GPUdbException {
        FilterBySeriesRequest actualRequest_ = new FilterBySeriesRequest(tableName, viewName, trackId, targetTrackIds, options);
        FilterBySeriesResponse actualResponse_ = new FilterBySeriesResponse();
        submitRequest("/filter/byseries", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table, collection, or view match a
     * string expression for the given string columns. The options
     * 'case_sensitive' can be used to modify the behavior for all modes except
     * 'search'. For 'search' mode details and limitations, see <a
     * href="../../../../concepts/full_text_search.html" target="_top">Full
     * Text Search</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByStringResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByStringResponse filterByString(FilterByStringRequest request) throws GPUdbException {
        FilterByStringResponse actualResponse_ = new FilterByStringResponse();
        submitRequest("/filter/bystring", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table, collection, or view match a
     * string expression for the given string columns. The options
     * 'case_sensitive' can be used to modify the behavior for all modes except
     * 'search'. For 'search' mode details and limitations, see <a
     * href="../../../../concepts/full_text_search.html" target="_top">Full
     * Text Search</a>.
     * 
     * @param tableName  Name of the table on which the filter operation will
     *                   be performed.  Must be an existing table, collection
     *                   or view.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param expression  The expression with which to filter the table.
     * @param mode  The string filtering mode to apply. See below for details.
     *              Supported values:
     *              <ul>
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#SEARCH
     *              SEARCH}: Full text search query with wildcards and boolean
     *              operators. Note that for this mode, no column can be
     *              specified in {@code columnNames}; all string columns of the
     *              table that have text search enabled will be searched.
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#EQUALS
     *              EQUALS}: Exact whole-string match (accelerated).
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#CONTAINS
     *              CONTAINS}: Partial substring match (not accelerated).  If
     *              the column is a string type (non-charN) and the number of
     *              records is too large, it will return 0.
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#STARTS_WITH
     *              STARTS_WITH}: Strings that start with the given expression
     *              (not accelerated). If the column is a string type
     *              (non-charN) and the number of records is too large, it will
     *              return 0.
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#REGEX REGEX}:
     *              Full regular expression search (not accelerated). If the
     *              column is a string type (non-charN) and the number of
     *              records is too large, it will return 0.
     *              </ul>
     * @param columnNames  List of columns on which to apply the filter.
     *                     Ignored for 'search' mode.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#CASE_SENSITIVE
     *                 CASE_SENSITIVE}: If 'false' then string filtering will
     *                 ignore case. Does not apply to 'search' mode.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByStringResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByStringResponse filterByString(String tableName, String viewName, String expression, String mode, List<String> columnNames, Map<String, String> options) throws GPUdbException {
        FilterByStringRequest actualRequest_ = new FilterByStringRequest(tableName, viewName, expression, mode, columnNames, options);
        FilterByStringResponse actualResponse_ = new FilterByStringResponse();
        submitRequest("/filter/bystring", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects in one table based on objects in another table. The user
     * must specify matching column types from the two tables (i.e. the target
     * table from which objects will be filtered and the source table based on
     * which the filter will be created); the column names need not be the
     * same. If a {@code viewName} is specified, then the filtered objects will
     * then be put in a newly created view. The operation is synchronous,
     * meaning that a response will not be returned until all objects are fully
     * available in the result view. The return value contains the count (i.e.
     * the size) of the resulting view.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByTableResponse filterByTable(FilterByTableRequest request) throws GPUdbException {
        FilterByTableResponse actualResponse_ = new FilterByTableResponse();
        submitRequest("/filter/bytable", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects in one table based on objects in another table. The user
     * must specify matching column types from the two tables (i.e. the target
     * table from which objects will be filtered and the source table based on
     * which the filter will be created); the column names need not be the
     * same. If a {@code viewName} is specified, then the filtered objects will
     * then be put in a newly created view. The operation is synchronous,
     * meaning that a response will not be returned until all objects are fully
     * available in the result view. The return value contains the count (i.e.
     * the size) of the resulting view.
     * 
     * @param tableName  Name of the table whose data will be filtered. Must be
     *                   an existing table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param columnName  Name of the column by whose value the data will be
     *                    filtered from the table designated by {@code
     *                    tableName}.
     * @param sourceTableName  Name of the table whose data will be compared
     *                         against in the table called {@code tableName}.
     *                         Must be an existing table.
     * @param sourceTableColumnName  Name of the column in the {@code
     *                               sourceTableName} whose values will be used
     *                               as the filter for table {@code tableName}.
     *                               Must be a geospatial geometry column if in
     *                               'spatial' mode; otherwise, Must match the
     *                               type of the {@code columnName}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#FILTER_MODE
     *                 FILTER_MODE}: String indicating the filter mode, either
     *                 {@code in_table} or {@code not_in_table}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#IN_TABLE
     *                 IN_TABLE}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NOT_IN_TABLE
     *                 NOT_IN_TABLE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#IN_TABLE
     *                 IN_TABLE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#MODE
     *                 MODE}: Mode - should be either {@code spatial} or {@code
     *                 normal}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#SPATIAL
     *                 SPATIAL}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#BUFFER
     *                 BUFFER}: Buffer size, in meters. Only relevant for
     *                 {@code spatial} mode.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#BUFFER_METHOD
     *                 BUFFER_METHOD}: Method used to buffer polygons.  Only
     *                 relevant for {@code spatial} mode.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#GEOS
     *                 GEOS}: Use geos 1 edge per corner algorithm
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#MAX_PARTITION_SIZE
     *                 MAX_PARTITION_SIZE}: Maximum number of points in a
     *                 partition. Only relevant for {@code spatial} mode.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#MAX_PARTITION_SCORE
     *                 MAX_PARTITION_SCORE}: Maximum number of points * edges
     *                 in a partition. Only relevant for {@code spatial} mode.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#X_COLUMN_NAME
     *                 X_COLUMN_NAME}: Name of column containing x value of
     *                 point being filtered in {@code spatial} mode.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#Y_COLUMN_NAME
     *                 Y_COLUMN_NAME}: Name of column containing y value of
     *                 point being filtered in {@code spatial} mode.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByTableResponse filterByTable(String tableName, String viewName, String columnName, String sourceTableName, String sourceTableColumnName, Map<String, String> options) throws GPUdbException {
        FilterByTableRequest actualRequest_ = new FilterByTableRequest(tableName, viewName, columnName, sourceTableName, sourceTableColumnName, options);
        FilterByTableResponse actualResponse_ = new FilterByTableResponse();
        submitRequest("/filter/bytable", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table has a particular value for a
     * particular column. The input parameters provide a way to specify either
     * a String or a Double valued column and a desired value for the column on
     * which the filter is performed. The operation is synchronous, meaning
     * that a response will not be returned until all the objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new result view which satisfies the input filter restriction
     * specification is also created with a view name passed in as part of the
     * input payload.  Although this functionality can also be accomplished
     * with the standard filter function, it is more efficient.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByValueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByValueResponse filterByValue(FilterByValueRequest request) throws GPUdbException {
        FilterByValueResponse actualResponse_ = new FilterByValueResponse();
        submitRequest("/filter/byvalue", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table has a particular value for a
     * particular column. The input parameters provide a way to specify either
     * a String or a Double valued column and a desired value for the column on
     * which the filter is performed. The operation is synchronous, meaning
     * that a response will not be returned until all the objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new result view which satisfies the input filter restriction
     * specification is also created with a view name passed in as part of the
     * input payload.  Although this functionality can also be accomplished
     * with the standard filter function, it is more efficient.
     * 
     * @param tableName  Name of an existing table on which to perform the
     *                   calculation.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.
     * @param isString  Indicates whether the value being searched for is
     *                  string or numeric.
     * @param value  The value to search for.
     * @param valueStr  The string value to search for.
     * @param columnName  Name of a column on which the filter by value would
     *                    be applied.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByValueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByValueResponse filterByValue(String tableName, String viewName, boolean isString, double value, String valueStr, String columnName, Map<String, String> options) throws GPUdbException {
        FilterByValueRequest actualRequest_ = new FilterByValueRequest(tableName, viewName, isString, value, valueStr, columnName, options);
        FilterByValueResponse actualResponse_ = new FilterByValueResponse();
        submitRequest("/filter/byvalue", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary
     * or json.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsResponse getRecordsRaw(GetRecordsRequest request) throws GPUdbException {
        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary
     * or json.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(Object typeDescriptor, GetRecordsRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", request, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary
     * or json.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param tableName  Name of the table from which the records will be
     *                   fetched. Must be a table, view or homogeneous
     *                   collection.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FAST_INDEX_LOOKUP
     *                 FAST_INDEX_LOOKUP}: Indicates if indexes should be used
     *                 to perform the lookup for a given expression if
     *                 possible. Only applicable if there is no sorting, the
     *                 expression contains only equivalence comparisons based
     *                 on existing tables indexes and the range of requested
     *                 values is from [0 to END_OF_SET].
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_BY
     *                 SORT_BY}: Optional column that the data should be sorted
     *                 by. Empty by default (i.e. no sorting is applied).
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending. If
     *                 sort_order is provided, sort_by has to be provided.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(Object typeDescriptor, String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsRequest actualRequest_ = new GetRecordsRequest(tableName, offset, limit, null, options);
        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", actualRequest_, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary
     * or json.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(GetRecordsRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", request, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeName(), actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary
     * or json.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param tableName  Name of the table from which the records will be
     *                   fetched. Must be a table, view or homogeneous
     *                   collection.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FAST_INDEX_LOOKUP
     *                 FAST_INDEX_LOOKUP}: Indicates if indexes should be used
     *                 to perform the lookup for a given expression if
     *                 possible. Only applicable if there is no sorting, the
     *                 expression contains only equivalence comparisons based
     *                 on existing tables indexes and the range of requested
     *                 values is from [0 to END_OF_SET].
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_BY
     *                 SORT_BY}: Optional column that the data should be sorted
     *                 by. Empty by default (i.e. no sorting is applied).
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending. If
     *                 sort_order is provided, sort_by has to be provided.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsRequest actualRequest_ = new GetRecordsRequest(tableName, offset, limit, null, options);
        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", actualRequest_, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeName(), actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * For a given table, retrieves the values from the requested column(s).
     * Maps of column name to the array of values as well as the column data
     * type are returned. This endpoint supports pagination with the {@code
     * offset} and {@code limit} parameters.
     * <p>
     * When using pagination, if the table (or the underlying table in the case
     * of a view) is modified (records are inserted, updated, or deleted)
     * during a call to the endpoint, the records or values retrieved may
     * differ between calls based on the type of the update, e.g., the
     * contiguity across pages cannot be relied upon.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsByColumnResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsByColumnResponse getRecordsByColumnRaw(GetRecordsByColumnRequest request) throws GPUdbException {
        RawGetRecordsByColumnResponse actualResponse_ = new RawGetRecordsByColumnResponse();
        submitRequest("/get/records/bycolumn", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * For a given table, retrieves the values from the requested column(s).
     * Maps of column name to the array of values as well as the column data
     * type are returned. This endpoint supports pagination with the {@code
     * offset} and {@code limit} parameters.
     * <p>
     * When using pagination, if the table (or the underlying table in the case
     * of a view) is modified (records are inserted, updated, or deleted)
     * during a call to the endpoint, the records or values retrieved may
     * differ between calls based on the type of the update, e.g., the
     * contiguity across pages cannot be relied upon.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsByColumnResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GetRecordsByColumnResponse getRecordsByColumn(GetRecordsByColumnRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsByColumnResponse actualResponse_ = new RawGetRecordsByColumnResponse();
        submitRequest("/get/records/bycolumn", request, actualResponse_, false);
        GetRecordsByColumnResponse response_ = new GetRecordsByColumnResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * For a given table, retrieves the values from the requested column(s).
     * Maps of column name to the array of values as well as the column data
     * type are returned. This endpoint supports pagination with the {@code
     * offset} and {@code limit} parameters.
     * <p>
     * When using pagination, if the table (or the underlying table in the case
     * of a view) is modified (records are inserted, updated, or deleted)
     * during a call to the endpoint, the records or values retrieved may
     * differ between calls based on the type of the update, e.g., the
     * contiguity across pages cannot be relied upon.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../concepts/dynamic_schemas.html" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param tableName  Name of the table on which this operation will be
     *                   performed. The table cannot be a parent set.
     * @param columnNames  The list of column values to retrieve.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned (if not provided the default is
     *               10000), or END_OF_SET (-9999) to indicate that the maximum
     *               number of results allowed by the server should be
     *               returned.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#SORT_BY
     *                 SORT_BY}: Optional column that the data should be sorted
     *                 by. Empty by default (i.e. no sorting is applied).
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending. Default is
     *                 'ascending'. If sort_order is provided, sort_by has to
     *                 be provided.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by; e.g. 'timestamp asc, x desc'.  The columns
     *                 specified must be present in {@code columnNames}.  If
     *                 any alias is given for any column name, the alias must
     *                 be used, rather than the original column name.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsByColumnResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GetRecordsByColumnResponse getRecordsByColumn(String tableName, List<String> columnNames, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsByColumnRequest actualRequest_ = new GetRecordsByColumnRequest(tableName, columnNames, offset, limit, null, options);
        RawGetRecordsByColumnResponse actualResponse_ = new RawGetRecordsByColumnResponse();
        submitRequest("/get/records/bycolumn", actualRequest_, actualResponse_, false);
        GetRecordsByColumnResponse response_ = new GetRecordsByColumnResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecordsRaw(GetRecordsRequest)} this
     * returns records grouped by series/track. So if {@code offset} is 0 and
     * {@code limit} is 5 this operation would return the first 5 series/tracks
     * in {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsBySeriesResponse getRecordsBySeriesRaw(GetRecordsBySeriesRequest request) throws GPUdbException {
        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(Object, GetRecordsRequest)} this
     * returns records grouped by series/track. So if {@code offset} is 0 and
     * {@code limit} is 5 this operation would return the first 5 series/tracks
     * in {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(Object typeDescriptor, GetRecordsBySeriesRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", request, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(typeDescriptor, actualResponse_.getListRecordsBinary()));
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(Object, String, long, long, Map)}
     * this returns records grouped by series/track. So if {@code offset} is 0
     * and {@code limit} is 5 this operation would return the first 5
     * series/tracks in {@code tableName}. Each series/track will be returned
     * sorted by their TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param tableName  Name of the collection/table/view for which
     *                   series/tracks will be fetched.
     * @param worldTableName  Name of the table containing the complete
     *                        series/track information to be returned for the
     *                        tracks present in the {@code tableName}.
     *                        Typically this is used when retrieving
     *                        series/tracks from a view (which contains partial
     *                        series/tracks) but the user wants to retrieve the
     *                        entire original series/tracks. Can be blank.
     * @param offset  A positive integer indicating the number of initial
     *                series/tracks to skip (useful for paging through the
     *                results).  The minimum allowed value is 0. The maximum
     *                allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               series/tracks to be returned. Or END_OF_SET (-9999) to
     *               indicate that the max number of results should be
     *               returned.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(Object typeDescriptor, String tableName, String worldTableName, int offset, int limit, Map<String, String> options) throws GPUdbException {
        GetRecordsBySeriesRequest actualRequest_ = new GetRecordsBySeriesRequest(tableName, worldTableName, offset, limit, null, options);
        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(typeDescriptor, actualResponse_.getListRecordsBinary()));
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(GetRecordsRequest)} this returns
     * records grouped by series/track. So if {@code offset} is 0 and {@code
     * limit} is 5 this operation would return the first 5 series/tracks in
     * {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(GetRecordsBySeriesRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", request, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(actualResponse_.getTypeNames(), actualResponse_.getListRecordsBinary()));
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(String, long, long, Map)} this
     * returns records grouped by series/track. So if {@code offset} is 0 and
     * {@code limit} is 5 this operation would return the first 5 series/tracks
     * in {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param tableName  Name of the collection/table/view for which
     *                   series/tracks will be fetched.
     * @param worldTableName  Name of the table containing the complete
     *                        series/track information to be returned for the
     *                        tracks present in the {@code tableName}.
     *                        Typically this is used when retrieving
     *                        series/tracks from a view (which contains partial
     *                        series/tracks) but the user wants to retrieve the
     *                        entire original series/tracks. Can be blank.
     * @param offset  A positive integer indicating the number of initial
     *                series/tracks to skip (useful for paging through the
     *                results).  The minimum allowed value is 0. The maximum
     *                allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               series/tracks to be returned. Or END_OF_SET (-9999) to
     *               indicate that the max number of results should be
     *               returned.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(String tableName, String worldTableName, int offset, int limit, Map<String, String> options) throws GPUdbException {
        GetRecordsBySeriesRequest actualRequest_ = new GetRecordsBySeriesRequest(tableName, worldTableName, offset, limit, null, options);
        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(actualResponse_.getTypeNames(), actualResponse_.getListRecordsBinary()));
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(DeleteRecordsRequest)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsFromCollectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsFromCollectionResponse getRecordsFromCollectionRaw(GetRecordsFromCollectionRequest request) throws GPUdbException {
        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(DeleteRecordsRequest)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(Object typeDescriptor, GetRecordsFromCollectionRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", request, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(String, List, Map)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param tableName  Name of the collection or table from which records are
     *                   to be retrieved. Must be an existing collection or
     *                   table.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If 'true' then return the internal
     *                 record ID along with each returned record. Default is
     *                 'false'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(Object typeDescriptor, String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsFromCollectionRequest actualRequest_ = new GetRecordsFromCollectionRequest(tableName, offset, limit, null, options);
        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(DeleteRecordsRequest)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(GetRecordsFromCollectionRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", request, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeNames(), actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(String, List, Map)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param tableName  Name of the collection or table from which records are
     *                   to be retrieved. Must be an existing collection or
     *                   table.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The minimum allowed value is 0. The
     *                maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If 'true' then return the internal
     *                 record ID along with each returned record. Default is
     *                 'false'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsFromCollectionRequest actualRequest_ = new GetRecordsFromCollectionRequest(tableName, offset, limit, null, options);
        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeNames(), actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        return response_;
    }



    /**
     * Grants a system-level permission to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionSystemResponse grantPermissionSystem(GrantPermissionSystemRequest request) throws GPUdbException {
        GrantPermissionSystemResponse actualResponse_ = new GrantPermissionSystemResponse();
        submitRequest("/grant/permission/system", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a system-level permission to a user or role.
     * 
     * @param name  Name of the user or role to which the permission will be
     *              granted. Must be an existing user or role.
     * @param permission  Permission to grant to the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_ADMIN
     *                    SYSTEM_ADMIN}: Full access to all data and system
     *                    functions.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_WRITE
     *                    SYSTEM_WRITE}: Read and write access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_READ
     *                    SYSTEM_READ}: Read-only access to all tables.
     *                    </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionSystemResponse grantPermissionSystem(String name, String permission, Map<String, String> options) throws GPUdbException {
        GrantPermissionSystemRequest actualRequest_ = new GrantPermissionSystemRequest(name, permission, options);
        GrantPermissionSystemResponse actualResponse_ = new GrantPermissionSystemResponse();
        submitRequest("/grant/permission/system", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a table-level permission to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionTableResponse grantPermissionTable(GrantPermissionTableRequest request) throws GPUdbException {
        GrantPermissionTableResponse actualResponse_ = new GrantPermissionTableResponse();
        submitRequest("/grant/permission/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a table-level permission to a user or role.
     * 
     * @param name  Name of the user or role to which the permission will be
     *              granted. Must be an existing user or role.
     * @param permission  Permission to grant to the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_ADMIN
     *                    TABLE_ADMIN}: Full read/write and administrative
     *                    access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_INSERT
     *                    TABLE_INSERT}: Insert access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_UPDATE
     *                    TABLE_UPDATE}: Update access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_DELETE
     *                    TABLE_DELETE}: Delete access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_READ
     *                    TABLE_READ}: Read access to the table.
     *                    </ul>
     * @param tableName  Name of the table to which the permission grants
     *                   access. Must be an existing table, collection, or
     *                   view. If a collection, the permission also applies to
     *                   tables and views in the collection.
     * @param filterExpression  Reserved for future use.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionTableResponse grantPermissionTable(String name, String permission, String tableName, String filterExpression, Map<String, String> options) throws GPUdbException {
        GrantPermissionTableRequest actualRequest_ = new GrantPermissionTableRequest(name, permission, tableName, filterExpression, options);
        GrantPermissionTableResponse actualResponse_ = new GrantPermissionTableResponse();
        submitRequest("/grant/permission/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants membership in a role to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantRoleResponse grantRole(GrantRoleRequest request) throws GPUdbException {
        GrantRoleResponse actualResponse_ = new GrantRoleResponse();
        submitRequest("/grant/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants membership in a role to a user or role.
     * 
     * @param role  Name of the role in which membership will be granted. Must
     *              be an existing role.
     * @param member  Name of the user or role that will be granted membership
     *                in {@code role}. Must be an existing user or role.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantRoleResponse grantRole(String role, String member, Map<String, String> options) throws GPUdbException {
        GrantRoleRequest actualRequest_ = new GrantRoleRequest(role, member, options);
        GrantRoleResponse actualResponse_ = new GrantRoleResponse();
        submitRequest("/grant/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks the existence of a proc with the given name.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasProcResponse hasProc(HasProcRequest request) throws GPUdbException {
        HasProcResponse actualResponse_ = new HasProcResponse();
        submitRequest("/has/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks the existence of a proc with the given name.
     * 
     * @param procName  Name of the proc to check for existence.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasProcResponse hasProc(String procName, Map<String, String> options) throws GPUdbException {
        HasProcRequest actualRequest_ = new HasProcRequest(procName, options);
        HasProcResponse actualResponse_ = new HasProcResponse();
        submitRequest("/has/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks for the existence of a table with the given name.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTableResponse hasTable(HasTableRequest request) throws GPUdbException {
        HasTableResponse actualResponse_ = new HasTableResponse();
        submitRequest("/has/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks for the existence of a table with the given name.
     * 
     * @param tableName  Name of the table to check for existence.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTableResponse hasTable(String tableName, Map<String, String> options) throws GPUdbException {
        HasTableRequest actualRequest_ = new HasTableRequest(tableName, options);
        HasTableResponse actualResponse_ = new HasTableResponse();
        submitRequest("/has/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Check for the existence of a type.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTypeResponse hasType(HasTypeRequest request) throws GPUdbException {
        HasTypeResponse actualResponse_ = new HasTypeResponse();
        submitRequest("/has/type", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Check for the existence of a type.
     * 
     * @param typeId  Id of the type returned in response to {@link
     *                GPUdb#createType(String, String, Map, Map)} request.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTypeResponse hasType(String typeId, Map<String, String> options) throws GPUdbException {
        HasTypeRequest actualRequest_ = new HasTypeRequest(typeId, options);
        HasTypeResponse actualResponse_ = new HasTypeResponse();
        submitRequest("/has/type", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The {@code route_to_address} option directs that inserted records should
     * be targeted for a particular database node.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsResponse insertRecordsRaw(RawInsertRecordsRequest request) throws GPUdbException {
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", request, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The {@code route_to_address} option directs that inserted records should
     * be targeted for a particular database node.
     * 
     * @param <TRequest>  The type of object being added.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(InsertRecordsRequest<TRequest> request) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(request.getTableName(), this.encode( request.getData() ), null, null, request.getOptions());
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The {@code route_to_address} option directs that inserted records should
     * be targeted for a particular database node.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(TypeObjectMap<TRequest> typeObjectMap, InsertRecordsRequest<TRequest> request) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(request.getTableName(), this.encode( typeObjectMap, request.getData() ), null, null, request.getOptions());
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The {@code route_to_address} option directs that inserted records should
     * be targeted for a particular database node.
     * 
     * @param <TRequest>  The type of object being added.
     * @param tableName  Table to which the records are to be added. Must be an
     *                   existing table.
     * @param data  An array of binary-encoded data for the records to be
     *              added. All records must be of the same type as that of the
     *              table. Empty array if {@code listEncoding} is {@code json}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for inserting into a table with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a>.  If set to {@code true},
     *                 any existing table record with primary key values that
     *                 match those of a record being inserted will be replaced
     *                 by that new record.  If set to {@code false}, any
     *                 existing table record with primary key values that match
     *                 those of a record being inserted will remain unchanged
     *                 and the new record discarded.  If the specified table
     *                 does not have a primary key, then this option is
     *                 ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If {@code true} then return the
     *                 internal record id along for each inserted record.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#ROUTE_TO_ADDRESS
     *                 ROUTE_TO_ADDRESS}: Route to a specific rank/tom. Option
     *                 not suitable for tables using primary/shard keys
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(String tableName, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(tableName, this.encode( data ), null, null, options);
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The {@code route_to_address} option directs that inserted records should
     * be targeted for a particular database node.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param tableName  Table to which the records are to be added. Must be an
     *                   existing table.
     * @param data  An array of binary-encoded data for the records to be
     *              added. All records must be of the same type as that of the
     *              table. Empty array if {@code listEncoding} is {@code json}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for inserting into a table with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a>.  If set to {@code true},
     *                 any existing table record with primary key values that
     *                 match those of a record being inserted will be replaced
     *                 by that new record.  If set to {@code false}, any
     *                 existing table record with primary key values that match
     *                 those of a record being inserted will remain unchanged
     *                 and the new record discarded.  If the specified table
     *                 does not have a primary key, then this option is
     *                 ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If {@code true} then return the
     *                 internal record id along for each inserted record.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#ROUTE_TO_ADDRESS
     *                 ROUTE_TO_ADDRESS}: Route to a specific rank/tom. Option
     *                 not suitable for tables using primary/shard keys
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(TypeObjectMap<TRequest> typeObjectMap, String tableName, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(tableName, this.encode( typeObjectMap, data ), null, null, options);
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Generates a specified number of random records and adds them to the
     * given table. There is an optional parameter that allows the user to
     * customize the ranges of the column values. It also allows the user to
     * specify linear profiles for some or all columns in which case linear
     * values are generated rather than random ones. Only individual tables are
     * supported for this operation.
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all random records are fully available.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsRandomResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsRandomResponse insertRecordsRandom(InsertRecordsRandomRequest request) throws GPUdbException {
        InsertRecordsRandomResponse actualResponse_ = new InsertRecordsRandomResponse();
        submitRequest("/insert/records/random", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Generates a specified number of random records and adds them to the
     * given table. There is an optional parameter that allows the user to
     * customize the ranges of the column values. It also allows the user to
     * specify linear profiles for some or all columns in which case linear
     * values are generated rather than random ones. Only individual tables are
     * supported for this operation.
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all random records are fully available.
     * 
     * @param tableName  Table to which random records will be added. Must be
     *                   an existing table.  Also, must be an individual table,
     *                   not a collection of tables, nor a view of a table.
     * @param count  Number of records to generate.
     * @param options  Optional parameter to pass in specifications for the
     *                 randomness of the values.  This map is different from
     *                 the *options* parameter of most other endpoints in that
     *                 it is a map of string to map of string to doubles, while
     *                 most others are maps of string to string.  In this map,
     *                 the top level keys represent which column's parameters
     *                 are being specified, while the internal keys represents
     *                 which parameter is being specified.  These parameters
     *                 take on different meanings depending on the type of the
     *                 column.  Below follows a more detailed description of
     *                 the map:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#SEED
     *                 SEED}: If provided, the internal random number generator
     *                 will be initialized with the given value.  The minimum
     *                 is 0.  This allows for the same set of random numbers to
     *                 be generated across invocation of this endpoint in case
     *                 the user wants to repeat the test.  Since {@code
     *                 options}, is a map of maps, we need an internal map to
     *                 provide the seed value.  For example, to pass 100 as the
     *                 seed value through this parameter, you need something
     *                 equivalent to: 'options' = {'seed': { 'value': 100 } }
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#VALUE
     *                 VALUE}: Pass the seed value here.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#ALL
     *                 ALL}: This key indicates that the specifications relayed
     *                 in the internal map are to be applied to all columns of
     *                 the records.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MIN
     *                 MIN}: For numerical columns, the minimum of the
     *                 generated values is set to this value.  Default is
     *                 -99999.  For point, shape, and track semantic types, min
     *                 for numeric 'x' and 'y' columns needs to be within
     *                 [-180, 180] and [-90, 90], respectively. The default
     *                 minimum possible values for these columns in such cases
     *                 are -180.0 and -90.0. For the 'TIMESTAMP' column, the
     *                 default minimum corresponds to Jan 1, 2010.
     *                 For string columns, the minimum length of the randomly
     *                 generated strings is set to this value (default is 0).
     *                 If both minimum and maximum are provided, minimum must
     *                 be less than or equal to max. Value needs to be within
     *                 [0, 200].
     *                 If the min is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track
     *                 types, then those parameters will not be set; however,
     *                 an error will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MAX
     *                 MAX}: For numerical columns, the maximum of the
     *                 generated values is set to this value. Default is 99999.
     *                 For point, shape, and track semantic types, max for
     *                 numeric 'x' and 'y' columns needs to be within [-180,
     *                 180] and [-90, 90], respectively. The default minimum
     *                 possible values for these columns in such cases are
     *                 180.0 and 90.0.
     *                 For string columns, the maximum length of the randomly
     *                 generated strings is set to this value (default is 200).
     *                 If both minimum and maximum are provided, *max* must be
     *                 greater than or equal to *min*. Value needs to be within
     *                 [0, 200].
     *                 If the *max* is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track
     *                 types, then those parameters will not be set; however,
     *                 an error will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#INTERVAL
     *                 INTERVAL}: If specified, generate values for all columns
     *                 evenly spaced with the given interval value. If a max
     *                 value is specified for a given column the data is
     *                 randomly generated between min and max and decimated
     *                 down to the interval. If no max is provided the data is
     *                 linerally generated starting at the minimum value
     *                 (instead of generating random data). For non-decimated
     *                 string-type columns the interval value is ignored.
     *                 Instead the values are generated following the pattern:
     *                 'attrname_creationIndex#', i.e. the column name suffixed
     *                 with an underscore and a running counter (starting at
     *                 0). For string types with limited size (eg char4) the
     *                 prefix is dropped. No nulls will be generated for
     *                 nullable columns.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#NULL_PERCENTAGE
     *                 NULL_PERCENTAGE}: If specified, then generate the given
     *                 percentage of the count as nulls for all nullable
     *                 columns.  This option will be ignored for non-nullable
     *                 columns.  The value must be within the range [0, 1.0].
     *                 The default value is 5% (0.05).
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#CARDINALITY
     *                 CARDINALITY}: If specified, limit the randomly generated
     *                 values to a fixed set. Not allowed on a column with
     *                 interval specified, and is not applicable to WKT or
     *                 Track-specific columns. The value must be greater than
     *                 0. This option is disabled by default.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#ATTR_NAME
     *                 ATTR_NAME}: Use the desired column name in place of
     *                 {@code attr_name}, and set the following parameters for
     *                 the column specified. This overrides any parameter set
     *                 by {@code all}.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MIN
     *                 MIN}: For numerical columns, the minimum of the
     *                 generated values is set to this value.  Default is
     *                 -99999.  For point, shape, and track semantic types, min
     *                 for numeric 'x' and 'y' columns needs to be within
     *                 [-180, 180] and [-90, 90], respectively. The default
     *                 minimum possible values for these columns in such cases
     *                 are -180.0 and -90.0. For the 'TIMESTAMP' column, the
     *                 default minimum corresponds to Jan 1, 2010.
     *                 For string columns, the minimum length of the randomly
     *                 generated strings is set to this value (default is 0).
     *                 If both minimum and maximum are provided, minimum must
     *                 be less than or equal to max. Value needs to be within
     *                 [0, 200].
     *                 If the min is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track
     *                 types, then those parameters will not be set; however,
     *                 an error will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MAX
     *                 MAX}: For numerical columns, the maximum of the
     *                 generated values is set to this value. Default is 99999.
     *                 For point, shape, and track semantic types, max for
     *                 numeric 'x' and 'y' columns needs to be within [-180,
     *                 180] and [-90, 90], respectively. The default minimum
     *                 possible values for these columns in such cases are
     *                 180.0 and 90.0.
     *                 For string columns, the maximum length of the randomly
     *                 generated strings is set to this value (default is 200).
     *                 If both minimum and maximum are provided, *max* must be
     *                 greater than or equal to *min*. Value needs to be within
     *                 [0, 200].
     *                 If the *max* is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track
     *                 types, then those parameters will not be set; however,
     *                 an error will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#INTERVAL
     *                 INTERVAL}: If specified, generate values for all columns
     *                 evenly spaced with the given interval value. If a max
     *                 value is specified for a given column the data is
     *                 randomly generated between min and max and decimated
     *                 down to the interval. If no max is provided the data is
     *                 linerally generated starting at the minimum value
     *                 (instead of generating random data). For non-decimated
     *                 string-type columns the interval value is ignored.
     *                 Instead the values are generated following the pattern:
     *                 'attrname_creationIndex#', i.e. the column name suffixed
     *                 with an underscore and a running counter (starting at
     *                 0). For string types with limited size (eg char4) the
     *                 prefix is dropped. No nulls will be generated for
     *                 nullable columns.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#NULL_PERCENTAGE
     *                 NULL_PERCENTAGE}: If specified and if this column is
     *                 nullable, then generate the given percentage of the
     *                 count as nulls.  This option will result in an error if
     *                 the column is not nullable.  The value must be within
     *                 the range [0, 1.0].  The default value is 5% (0.05).
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#CARDINALITY
     *                 CARDINALITY}: If specified, limit the randomly generated
     *                 values to a fixed set. Not allowed on a column with
     *                 interval specified, and is not applicable to WKT or
     *                 Track-specific columns. The value must be greater than
     *                 0. This option is disabled by default.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#TRACK_LENGTH
     *                 TRACK_LENGTH}: This key-map pair is only valid for track
     *                 type data sets (an error is thrown otherwise).  No nulls
     *                 would be generated for nullable columns.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MIN
     *                 MIN}: Minimum possible length for generated series;
     *                 default is 100 records per series. Must be an integral
     *                 value within the range [1, 500]. If both min and max are
     *                 specified, min must be less than or equal to max.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MAX
     *                 MAX}: Maximum possible length for generated series;
     *                 default is 500 records per series. Must be an integral
     *                 value within the range [1, 500]. If both min and max are
     *                 specified, max must be greater than or equal to min.
     *                 </ul>
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsRandomResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsRandomResponse insertRecordsRandom(String tableName, long count, Map<String, Map<String, Double>> options) throws GPUdbException {
        InsertRecordsRandomRequest actualRequest_ = new InsertRecordsRandomRequest(tableName, count, options);
        InsertRecordsRandomResponse actualResponse_ = new InsertRecordsRandomResponse();
        submitRequest("/insert/records/random", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Adds a symbol or icon (i.e. an image) to represent data points when data
     * is rendered visually. Users must provide the symbol identifier (string),
     * a format (currently supported: 'svg' and 'svg_path'), the data for the
     * symbol, and any additional optional parameter (e.g. color). To have a
     * symbol used for rendering create a table with a string column named
     * 'SYMBOLCODE' (along with 'x' or 'y' for example). Then when the table is
     * rendered (via <a href="../../../../api/rest/wms_rest.html"
     * target="_top">WMS</a>) if the 'dosymbology' parameter is 'true' then the
     * value of the 'SYMBOLCODE' column is used to pick the symbol displayed
     * for each point.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertSymbolResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertSymbolResponse insertSymbol(InsertSymbolRequest request) throws GPUdbException {
        InsertSymbolResponse actualResponse_ = new InsertSymbolResponse();
        submitRequest("/insert/symbol", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Adds a symbol or icon (i.e. an image) to represent data points when data
     * is rendered visually. Users must provide the symbol identifier (string),
     * a format (currently supported: 'svg' and 'svg_path'), the data for the
     * symbol, and any additional optional parameter (e.g. color). To have a
     * symbol used for rendering create a table with a string column named
     * 'SYMBOLCODE' (along with 'x' or 'y' for example). Then when the table is
     * rendered (via <a href="../../../../api/rest/wms_rest.html"
     * target="_top">WMS</a>) if the 'dosymbology' parameter is 'true' then the
     * value of the 'SYMBOLCODE' column is used to pick the symbol displayed
     * for each point.
     * 
     * @param symbolId  The id of the symbol being added. This is the same id
     *                  that should be in the 'SYMBOLCODE' column for objects
     *                  using this symbol
     * @param symbolFormat  Specifies the symbol format. Must be either 'svg'
     *                      or 'svg_path'.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.InsertSymbolRequest.SymbolFormat#SVG
     *                      SVG}
     *                              <li> {@link
     *                      com.gpudb.protocol.InsertSymbolRequest.SymbolFormat#SVG_PATH
     *                      SVG_PATH}
     *                      </ul>
     * @param symbolData  The actual symbol data. If {@code symbolFormat} is
     *                    'svg' then this should be the raw bytes representing
     *                    an svg file. If {@code symbolFormat} is svg path then
     *                    this should be an svg path string, for example:
     *                    'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertSymbolRequest.Options#COLOR
     *                 COLOR}: If {@code symbolFormat} is 'svg' this is
     *                 ignored. If {@code symbolFormat} is 'svg_path' then this
     *                 option specifies the color (in RRGGBB hex format) of the
     *                 path. For example, to have the path rendered in red,
     *                 used 'FF0000'. If 'color' is not provided then '00FF00'
     *                 (i.e. green) is used by default.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertSymbolResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertSymbolResponse insertSymbol(String symbolId, String symbolFormat, ByteBuffer symbolData, Map<String, String> options) throws GPUdbException {
        InsertSymbolRequest actualRequest_ = new InsertSymbolRequest(symbolId, symbolFormat, symbolData, options);
        InsertSymbolResponse actualResponse_ = new InsertSymbolResponse();
        submitRequest("/insert/symbol", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Kills a running proc instance.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  KillProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public KillProcResponse killProc(KillProcRequest request) throws GPUdbException {
        KillProcResponse actualResponse_ = new KillProcResponse();
        submitRequest("/kill/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Kills a running proc instance.
     * 
     * @param runId  The run ID of the running proc instance. If the run ID is
     *               not found or the proc instance has already completed, this
     *               does nothing. If not specified, all running proc instances
     *               will be killed.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  KillProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public KillProcResponse killProc(String runId, Map<String, String> options) throws GPUdbException {
        KillProcRequest actualRequest_ = new KillProcRequest(runId, options);
        KillProcResponse actualResponse_ = new KillProcResponse();
        submitRequest("/kill/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Manages global access to a table's data.  By default a table has a
     * {@code lockType} of {@code read_write}, indicating all operations are
     * permitted.  A user may request a {@code read_only} or a {@code
     * write_only} lock, after which only read or write operations,
     * respectively, are permitted on the table until the lock is removed.
     * When {@code lockType} is {@code no_access} then no operations are
     * permitted on the table.  The lock status can be queried by setting
     * {@code lockType} to {@code status}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  LockTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public LockTableResponse lockTable(LockTableRequest request) throws GPUdbException {
        LockTableResponse actualResponse_ = new LockTableResponse();
        submitRequest("/lock/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Manages global access to a table's data.  By default a table has a
     * {@code lockType} of {@code read_write}, indicating all operations are
     * permitted.  A user may request a {@code read_only} or a {@code
     * write_only} lock, after which only read or write operations,
     * respectively, are permitted on the table until the lock is removed.
     * When {@code lockType} is {@code no_access} then no operations are
     * permitted on the table.  The lock status can be queried by setting
     * {@code lockType} to {@code status}.
     * 
     * @param tableName  Name of the table to be locked. It must be a currently
     *                   existing table, collection, or view.
     * @param lockType  The type of lock being applied to the table. Setting it
     *                  to {@code status} will return the current lock status
     *                  of the table without changing it.
     *                  Supported values:
     *                  <ul>
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#STATUS
     *                  STATUS}: Show locked status
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#NO_ACCESS
     *                  NO_ACCESS}: Allow no read/write operations
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#READ_ONLY
     *                  READ_ONLY}: Allow only read operations
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#WRITE_ONLY
     *                  WRITE_ONLY}: Allow only write operations
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#READ_WRITE
     *                  READ_WRITE}: Allow all read/write operations
     *                  </ul>
     *                  The default value is {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#STATUS
     *                  STATUS}.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  LockTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public LockTableResponse lockTable(String tableName, String lockType, Map<String, String> options) throws GPUdbException {
        LockTableRequest actualRequest_ = new LockTableRequest(tableName, lockType, options);
        LockTableResponse actualResponse_ = new LockTableResponse();
        submitRequest("/lock/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Create a new empty result table (specified by {@code tableName}), and
     * insert all records from source tables (specified by {@code
     * sourceTableNames}) based on the field mapping information (specified by
     * {@code fieldMaps}). The field map (specified by {@code fieldMaps}) holds
     * the user specified maps of target table column names to source table
     * columns. The array of {@code fieldMaps} must match one-to-one with the
     * {@code sourceTableNames}, e.g., there's a map present in {@code
     * fieldMaps} for each table listed in {@code sourceTableNames}. Read more
     * about Merge Records <a href="../../../../concepts/merge_records.html"
     * target="_top">here</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  MergeRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public MergeRecordsResponse mergeRecords(MergeRecordsRequest request) throws GPUdbException {
        MergeRecordsResponse actualResponse_ = new MergeRecordsResponse();
        submitRequest("/merge/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Create a new empty result table (specified by {@code tableName}), and
     * insert all records from source tables (specified by {@code
     * sourceTableNames}) based on the field mapping information (specified by
     * {@code fieldMaps}). The field map (specified by {@code fieldMaps}) holds
     * the user specified maps of target table column names to source table
     * columns. The array of {@code fieldMaps} must match one-to-one with the
     * {@code sourceTableNames}, e.g., there's a map present in {@code
     * fieldMaps} for each table listed in {@code sourceTableNames}. Read more
     * about Merge Records <a href="../../../../concepts/merge_records.html"
     * target="_top">here</a>.
     * 
     * @param tableName  The new result table name for the records to be
     *                   merged.  Must NOT be an existing table.
     * @param sourceTableNames  The list of source table names to get the
     *                          records from. Must be existing table names.
     * @param fieldMaps  Contains a list of source/target column mappings, one
     *                   mapping for each source table listed in {@code
     *                   sourceTableNames} being merged into the target table
     *                   specified by {@code tableName}.  Each mapping contains
     *                   the target column names (as keys) that the data in the
     *                   mapped source columns (as values) will be merged into.
     *                   All of the source columns being merged into a given
     *                   target column must match in type, as that type will
     *                   determine the type of the new target column.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created merged table specified by
     *                 {@code tableName}. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the newly created merged table
     *                 will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: Indicates the <a
     *                 href="../../../../concepts/tables.html#distribution"
     *                 target="_top">distribution scheme</a> for the data of
     *                 the merged table specified in {@code tableName}.  If
     *                 true, the table will be <a
     *                 href="../../../../concepts/tables.html#replication"
     *                 target="_top">replicated</a>.  If false, the table will
     *                 be <a
     *                 href="../../../../concepts/tables.html#random-sharding"
     *                 target="_top">randomly sharded</a>.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the merged table specified in
     *                 {@code tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for the
     *                 merged table specified in {@code tableName}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  MergeRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public MergeRecordsResponse mergeRecords(String tableName, List<String> sourceTableNames, List<Map<String, String>> fieldMaps, Map<String, String> options) throws GPUdbException {
        MergeRecordsRequest actualRequest_ = new MergeRecordsRequest(tableName, sourceTableNames, fieldMaps, options);
        MergeRecordsResponse actualResponse_ = new MergeRecordsResponse();
        submitRequest("/merge/records", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public AdminReplaceTomResponse adminReplaceTom(AdminReplaceTomRequest request) throws GPUdbException {
        AdminReplaceTomResponse actualResponse_ = new AdminReplaceTomResponse();
        submitRequest("/replace/tom", request, actualResponse_, false);
        return actualResponse_;
    }



    public AdminReplaceTomResponse adminReplaceTom(long oldRankTom, long newRankTom) throws GPUdbException {
        AdminReplaceTomRequest actualRequest_ = new AdminReplaceTomRequest(oldRankTom, newRankTom);
        AdminReplaceTomResponse actualResponse_ = new AdminReplaceTomResponse();
        submitRequest("/replace/tom", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a system-level permission from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionSystemResponse revokePermissionSystem(RevokePermissionSystemRequest request) throws GPUdbException {
        RevokePermissionSystemResponse actualResponse_ = new RevokePermissionSystemResponse();
        submitRequest("/revoke/permission/system", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a system-level permission from a user or role.
     * 
     * @param name  Name of the user or role from which the permission will be
     *              revoked. Must be an existing user or role.
     * @param permission  Permission to revoke from the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_ADMIN
     *                    SYSTEM_ADMIN}: Full access to all data and system
     *                    functions.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_WRITE
     *                    SYSTEM_WRITE}: Read and write access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_READ
     *                    SYSTEM_READ}: Read-only access to all tables.
     *                    </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionSystemResponse revokePermissionSystem(String name, String permission, Map<String, String> options) throws GPUdbException {
        RevokePermissionSystemRequest actualRequest_ = new RevokePermissionSystemRequest(name, permission, options);
        RevokePermissionSystemResponse actualResponse_ = new RevokePermissionSystemResponse();
        submitRequest("/revoke/permission/system", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a table-level permission from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionTableResponse revokePermissionTable(RevokePermissionTableRequest request) throws GPUdbException {
        RevokePermissionTableResponse actualResponse_ = new RevokePermissionTableResponse();
        submitRequest("/revoke/permission/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a table-level permission from a user or role.
     * 
     * @param name  Name of the user or role from which the permission will be
     *              revoked. Must be an existing user or role.
     * @param permission  Permission to revoke from the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_ADMIN
     *                    TABLE_ADMIN}: Full read/write and administrative
     *                    access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_INSERT
     *                    TABLE_INSERT}: Insert access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_UPDATE
     *                    TABLE_UPDATE}: Update access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_DELETE
     *                    TABLE_DELETE}: Delete access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_READ
     *                    TABLE_READ}: Read access to the table.
     *                    </ul>
     * @param tableName  Name of the table to which the permission grants
     *                   access. Must be an existing table, collection, or
     *                   view.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionTableResponse revokePermissionTable(String name, String permission, String tableName, Map<String, String> options) throws GPUdbException {
        RevokePermissionTableRequest actualRequest_ = new RevokePermissionTableRequest(name, permission, tableName, options);
        RevokePermissionTableResponse actualResponse_ = new RevokePermissionTableResponse();
        submitRequest("/revoke/permission/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes membership in a role from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokeRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokeRoleResponse revokeRole(RevokeRoleRequest request) throws GPUdbException {
        RevokeRoleResponse actualResponse_ = new RevokeRoleResponse();
        submitRequest("/revoke/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes membership in a role from a user or role.
     * 
     * @param role  Name of the role in which membership will be revoked. Must
     *              be an existing role.
     * @param member  Name of the user or role that will be revoked membership
     *                in {@code role}. Must be an existing user or role.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokeRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokeRoleResponse revokeRole(String role, String member, Map<String, String> options) throws GPUdbException {
        RevokeRoleRequest actualRequest_ = new RevokeRoleRequest(role, member, options);
        RevokeRoleResponse actualResponse_ = new RevokeRoleResponse();
        submitRequest("/revoke/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information about a proc.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcResponse showProc(ShowProcRequest request) throws GPUdbException {
        ShowProcResponse actualResponse_ = new ShowProcResponse();
        submitRequest("/show/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information about a proc.
     * 
     * @param procName  Name of the proc to show information about. If
     *                  specified, must be the name of a currently existing
     *                  proc. If not specified, information about all procs
     *                  will be returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#INCLUDE_FILES
     *                 INCLUDE_FILES}: If set to {@code true}, the files that
     *                 make up the proc will be returned. If set to {@code
     *                 false}, the files will not be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#FALSE FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcResponse showProc(String procName, Map<String, String> options) throws GPUdbException {
        ShowProcRequest actualRequest_ = new ShowProcRequest(procName, options);
        ShowProcResponse actualResponse_ = new ShowProcResponse();
        submitRequest("/show/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from {@link
     * GPUdb#executeProc(ExecuteProcRequest)}) and data segment ID (each
     * invocation of the proc command on a data segment is assigned a data
     * segment ID).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcStatusResponse showProcStatus(ShowProcStatusRequest request) throws GPUdbException {
        ShowProcStatusResponse actualResponse_ = new ShowProcStatusResponse();
        submitRequest("/show/proc/status", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from {@link GPUdb#executeProc(String,
     * Map, Map, List, Map, List, Map)}) and data segment ID (each invocation
     * of the proc command on a data segment is assigned a data segment ID).
     * 
     * @param runId  The run ID of a specific running or completed proc
     *               instance for which the status will be returned. If the run
     *               ID is not found, nothing will be returned. If not
     *               specified, the statuses of all running and completed proc
     *               instances will be returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#CLEAR_COMPLETE
     *                 CLEAR_COMPLETE}: If set to {@code true}, if a proc
     *                 instance has completed (either successfully or
     *                 unsuccessfully) then its status will be cleared and no
     *                 longer returned in subsequent calls.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcStatusResponse showProcStatus(String runId, Map<String, String> options) throws GPUdbException {
        ShowProcStatusRequest actualRequest_ = new ShowProcStatusRequest(runId, options);
        ShowProcStatusResponse actualResponse_ = new ShowProcStatusResponse();
        submitRequest("/show/proc/status", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows security information relating to users and/or roles. If the caller
     * is not a system administrator, only information relating to the caller
     * and their roles is returned.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSecurityResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSecurityResponse showSecurity(ShowSecurityRequest request) throws GPUdbException {
        ShowSecurityResponse actualResponse_ = new ShowSecurityResponse();
        submitRequest("/show/security", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows security information relating to users and/or roles. If the caller
     * is not a system administrator, only information relating to the caller
     * and their roles is returned.
     * 
     * @param names  A list of names of users and/or roles about which security
     *               information is requested. If none are provided,
     *               information about all users and roles will be returned.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSecurityResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSecurityResponse showSecurity(List<String> names, Map<String, String> options) throws GPUdbException {
        ShowSecurityRequest actualRequest_ = new ShowSecurityRequest(names, options);
        ShowSecurityResponse actualResponse_ = new ShowSecurityResponse();
        submitRequest("/show/security", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns server configuration and version related information to the
     * caller. The admin tool uses it to present server related information to
     * the user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemPropertiesResponse showSystemProperties(ShowSystemPropertiesRequest request) throws GPUdbException {
        ShowSystemPropertiesResponse actualResponse_ = new ShowSystemPropertiesResponse();
        submitRequest("/show/system/properties", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns server configuration and version related information to the
     * caller. The admin tool uses it to present server related information to
     * the user.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowSystemPropertiesRequest.Options#PROPERTIES
     *                 PROPERTIES}: A list of comma separated names of
     *                 properties requested. If not specified, all properties
     *                 will be returned.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemPropertiesResponse showSystemProperties(Map<String, String> options) throws GPUdbException {
        ShowSystemPropertiesRequest actualRequest_ = new ShowSystemPropertiesRequest(options);
        ShowSystemPropertiesResponse actualResponse_ = new ShowSystemPropertiesResponse();
        submitRequest("/show/system/properties", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Provides server configuration and health related status to the caller.
     * The admin tool uses it to present server related information to the
     * user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemStatusResponse showSystemStatus(ShowSystemStatusRequest request) throws GPUdbException {
        ShowSystemStatusResponse actualResponse_ = new ShowSystemStatusResponse();
        submitRequest("/show/system/status", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Provides server configuration and health related status to the caller.
     * The admin tool uses it to present server related information to the
     * user.
     * 
     * @param options  Optional parameters, currently unused.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemStatusResponse showSystemStatus(Map<String, String> options) throws GPUdbException {
        ShowSystemStatusRequest actualRequest_ = new ShowSystemStatusRequest(options);
        ShowSystemStatusResponse actualResponse_ = new ShowSystemStatusResponse();
        submitRequest("/show/system/status", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns the last 100 database requests along with the request timing and
     * internal job id. The admin tool uses it to present request timing
     * information to the user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemTimingResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemTimingResponse showSystemTiming(ShowSystemTimingRequest request) throws GPUdbException {
        ShowSystemTimingResponse actualResponse_ = new ShowSystemTimingResponse();
        submitRequest("/show/system/timing", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns the last 100 database requests along with the request timing and
     * internal job id. The admin tool uses it to present request timing
     * information to the user.
     * 
     * @param options  Optional parameters, currently unused.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemTimingResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemTimingResponse showSystemTiming(Map<String, String> options) throws GPUdbException {
        ShowSystemTimingRequest actualRequest_ = new ShowSystemTimingRequest(options);
        ShowSystemTimingResponse actualResponse_ = new ShowSystemTimingResponse();
        submitRequest("/show/system/timing", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves detailed information about a table, view, or collection,
     * specified in {@code tableName}. If the supplied {@code tableName} is a
     * collection, the call can return information about either the collection
     * itself or the tables and views it contains. If {@code tableName} is
     * empty, information about all collections and top-level tables and views
     * can be returned.
     * <p>
     * If the option {@code get_sizes} is set to {@code true}, then the sizes
     * (objects and elements) of each table are returned (in {@code sizes} and
     * {@code fullSizes}), along with the total number of objects in the
     * requested table (in {@code totalSize} and {@code totalFullSize}).
     * <p>
     * For a collection, setting the {@code show_children} option to {@code
     * false} returns only information about the collection itself; setting
     * {@code show_children} to {@code true} returns a list of tables and views
     * contained in the collection, along with their corresponding detail.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableResponse showTable(ShowTableRequest request) throws GPUdbException {
        ShowTableResponse actualResponse_ = new ShowTableResponse();
        submitRequest("/show/table", request, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); i_++) {
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getTypeLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Retrieves detailed information about a table, view, or collection,
     * specified in {@code tableName}. If the supplied {@code tableName} is a
     * collection, the call can return information about either the collection
     * itself or the tables and views it contains. If {@code tableName} is
     * empty, information about all collections and top-level tables and views
     * can be returned.
     * <p>
     * If the option {@code get_sizes} is set to {@code true}, then the sizes
     * (objects and elements) of each table are returned (in {@code sizes} and
     * {@code fullSizes}), along with the total number of objects in the
     * requested table (in {@code totalSize} and {@code totalFullSize}).
     * <p>
     * For a collection, setting the {@code show_children} option to {@code
     * false} returns only information about the collection itself; setting
     * {@code show_children} to {@code true} returns a list of tables and views
     * contained in the collection, along with their corresponding detail.
     * 
     * @param tableName  Name of the table for which to retrieve the
     *                   information. If blank, then information about all
     *                   collections and top-level tables and views is
     *                   returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     *                 GET_SIZES}: If {@code true} then the table sizes will be
     *                 returned; blank, otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#SHOW_CHILDREN
     *                 SHOW_CHILDREN}: If {@code tableName} is a collection,
     *                 then {@code true} will return information about the
     *                 children of the collection, and {@code false} will
     *                 return information about the collection itself. If
     *                 {@code tableName} is a table or view, {@code
     *                 show_children} must be {@code false}. If {@code
     *                 tableName} is empty, then {@code show_children} must be
     *                 {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code false} will return an
     *                 error if the provided {@code tableName} does not exist.
     *                 If {@code true} then it will return an empty result.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#GET_COLUMN_INFO
     *                 GET_COLUMN_INFO}: If {@code true} then column info
     *                 (memory usage, etc) will be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableResponse showTable(String tableName, Map<String, String> options) throws GPUdbException {
        ShowTableRequest actualRequest_ = new ShowTableRequest(tableName, options);
        ShowTableResponse actualResponse_ = new ShowTableResponse();
        submitRequest("/show/table", actualRequest_, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); i_++) {
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getTypeLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Retrieves the user provided metadata for the specified tables.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableMetadataResponse showTableMetadata(ShowTableMetadataRequest request) throws GPUdbException {
        ShowTableMetadataResponse actualResponse_ = new ShowTableMetadataResponse();
        submitRequest("/show/table/metadata", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves the user provided metadata for the specified tables.
     * 
     * @param tableNames  Tables whose metadata will be fetched. All provided
     *                    tables must exist, or an error is returned.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableMetadataResponse showTableMetadata(List<String> tableNames, Map<String, String> options) throws GPUdbException {
        ShowTableMetadataRequest actualRequest_ = new ShowTableMetadataRequest(tableNames, options);
        ShowTableMetadataResponse actualResponse_ = new ShowTableMetadataResponse();
        submitRequest("/show/table/metadata", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Gets names of the tables whose type matches the given criteria. Each
     * table has a particular type. This type is made out of the type label,
     * schema of the table, and the semantic type of the table. This function
     * allows a look up of the existing tables based on full or partial type
     * information. The operation is synchronous.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTablesByTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTablesByTypeResponse showTablesByType(ShowTablesByTypeRequest request) throws GPUdbException {
        ShowTablesByTypeResponse actualResponse_ = new ShowTablesByTypeResponse();
        submitRequest("/show/tables/bytype", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Gets names of the tables whose type matches the given criteria. Each
     * table has a particular type. This type is made out of the type label,
     * schema of the table, and the semantic type of the table. This function
     * allows a look up of the existing tables based on full or partial type
     * information. The operation is synchronous.
     * 
     * @param typeId  Type id returned by a call to {@link
     *                GPUdb#createType(String, String, Map, Map)}.
     * @param label  Optional user supplied label which can be used instead of
     *               the type_id to retrieve all tables with the given label.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTablesByTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTablesByTypeResponse showTablesByType(String typeId, String label, Map<String, String> options) throws GPUdbException {
        ShowTablesByTypeRequest actualRequest_ = new ShowTablesByTypeRequest(typeId, label, options);
        ShowTablesByTypeResponse actualResponse_ = new ShowTablesByTypeResponse();
        submitRequest("/show/tables/bytype", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves information regarding the specified triggers or all existing
     * triggers currently active.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTriggersResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTriggersResponse showTriggers(ShowTriggersRequest request) throws GPUdbException {
        ShowTriggersResponse actualResponse_ = new ShowTriggersResponse();
        submitRequest("/show/triggers", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves information regarding the specified triggers or all existing
     * triggers currently active.
     * 
     * @param triggerIds  List of IDs of the triggers whose information is to
     *                    be retrieved. An empty list means information will be
     *                    retrieved on all active triggers.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTriggersResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTriggersResponse showTriggers(List<String> triggerIds, Map<String, String> options) throws GPUdbException {
        ShowTriggersRequest actualRequest_ = new ShowTriggersRequest(triggerIds, options);
        ShowTriggersResponse actualResponse_ = new ShowTriggersResponse();
        submitRequest("/show/triggers", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves information for the specified data type. Given a type ID, the
     * database returns the data type schema, the label, and the semantic type
     * along with the type ID. If the user provides any combination of label
     * and semantic type, then the database returns the pertinent information
     * for all data types that match the input criteria.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTypesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTypesResponse showTypes(ShowTypesRequest request) throws GPUdbException {
        ShowTypesResponse actualResponse_ = new ShowTypesResponse();
        submitRequest("/show/types", request, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); i_++) {
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Retrieves information for the specified data type. Given a type ID, the
     * database returns the data type schema, the label, and the semantic type
     * along with the type ID. If the user provides any combination of label
     * and semantic type, then the database returns the pertinent information
     * for all data types that match the input criteria.
     * 
     * @param typeId  Type Id returned in response to a call to {@link
     *                GPUdb#createType(String, String, Map, Map)}.
     * @param label  Option string that was supplied by user in a call to
     *               {@link GPUdb#createType(String, String, Map, Map)}.
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTypesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTypesResponse showTypes(String typeId, String label, Map<String, String> options) throws GPUdbException {
        ShowTypesRequest actualRequest_ = new ShowTypesRequest(typeId, label, options);
        ShowTypesResponse actualResponse_ = new ShowTypesResponse();
        submitRequest("/show/types", actualRequest_, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); i_++) {
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public UpdateRecordsResponse updateRecordsRaw(RawUpdateRecordsRequest request) throws GPUdbException {
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", request, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.
     * 
     * @param <TRequest>  The type of object being added.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(UpdateRecordsRequest<TRequest> request) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(request.getTableName(), request.getExpressions(), request.getNewValuesMaps(), this.encode( request.getData() ), null, null, request.getOptions());
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(TypeObjectMap<TRequest> typeObjectMap, UpdateRecordsRequest<TRequest> request) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(request.getTableName(), request.getExpressions(), request.getNewValuesMaps(), this.encode( typeObjectMap, request.getData() ), null, null, request.getOptions());
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.
     * 
     * @param <TRequest>  The type of object being added.
     * @param tableName  Table to be updated. Must be a currently existing
     *                   table and not a collection or view.
     * @param expressions  A list of the actual predicates, one for each
     *                     update; format should follow the guidelines {@link
     *                     GPUdb#filter(String, String, String, Map) here}.
     * @param newValuesMaps  List of new values for the matching records.  Each
     *                       element is a map with (key, value) pairs where the
     *                       keys are the names of the columns whose values are
     *                       to be updated; the values are the new values.  The
     *                       number of elements in the list should match the
     *                       length of {@code expressions}.
     * @param data  An *optional* list of new binary-avro encoded records to
     *              insert, one for each update.  If one of {@code expressions}
     *              does not yield a matching record to be updated, then the
     *              corresponding element from this list will be added to the
     *              table.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#GLOBAL_EXPRESSION
     *                 GLOBAL_EXPRESSION}: An optional global expression to
     *                 reduce the search space of the predicates listed in
     *                 {@code expressions}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#BYPASS_SAFETY_CHECKS
     *                 BYPASS_SAFETY_CHECKS}: When set to 'true', all
     *                 predicates are available for primary key updates.  Keep
     *                 in mind that it is possible to destroy data in this
     *                 case, since a single predicate may match multiple
     *                 objects (potentially all of records of a table), and
     *                 then updating all of those records to have the same
     *                 primary key will, due to the primary key uniqueness
     *                 constraints, effectively delete all but one of those
     *                 updated records.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Can be used to customize
     *                 behavior when the updated primary key value already
     *                 exists, as described in {@link
     *                 GPUdb#insertRecords(String, List, Map)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#RECORD_ID
     *                 RECORD_ID}: ID of a single record to be updated
     *                 (returned in the call to {@link
     *                 GPUdb#insertRecords(String, List, Map)} or {@link
     *                 GPUdb#getRecordsFromCollection(Object, String, long,
     *                 long, Map)}).
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(String tableName, List<String> expressions, List<Map<String, String>> newValuesMaps, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(tableName, expressions, newValuesMaps, this.encode( data ), null, null, options);
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param tableName  Table to be updated. Must be a currently existing
     *                   table and not a collection or view.
     * @param expressions  A list of the actual predicates, one for each
     *                     update; format should follow the guidelines {@link
     *                     GPUdb#filter(String, String, String, Map) here}.
     * @param newValuesMaps  List of new values for the matching records.  Each
     *                       element is a map with (key, value) pairs where the
     *                       keys are the names of the columns whose values are
     *                       to be updated; the values are the new values.  The
     *                       number of elements in the list should match the
     *                       length of {@code expressions}.
     * @param data  An *optional* list of new binary-avro encoded records to
     *              insert, one for each update.  If one of {@code expressions}
     *              does not yield a matching record to be updated, then the
     *              corresponding element from this list will be added to the
     *              table.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#GLOBAL_EXPRESSION
     *                 GLOBAL_EXPRESSION}: An optional global expression to
     *                 reduce the search space of the predicates listed in
     *                 {@code expressions}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#BYPASS_SAFETY_CHECKS
     *                 BYPASS_SAFETY_CHECKS}: When set to 'true', all
     *                 predicates are available for primary key updates.  Keep
     *                 in mind that it is possible to destroy data in this
     *                 case, since a single predicate may match multiple
     *                 objects (potentially all of records of a table), and
     *                 then updating all of those records to have the same
     *                 primary key will, due to the primary key uniqueness
     *                 constraints, effectively delete all but one of those
     *                 updated records.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Can be used to customize
     *                 behavior when the updated primary key value already
     *                 exists, as described in {@link
     *                 GPUdb#insertRecords(TypeObjectMap, String, List, Map)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#RECORD_ID
     *                 RECORD_ID}: ID of a single record to be updated
     *                 (returned in the call to {@link
     *                 GPUdb#insertRecords(TypeObjectMap, String, List, Map)}
     *                 or {@link GPUdb#getRecordsFromCollection(Object, String,
     *                 long, long, Map)}).
     *                 </ul>
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(TypeObjectMap<TRequest> typeObjectMap, String tableName, List<String> expressions, List<Map<String, String>> newValuesMaps, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(tableName, expressions, newValuesMaps, this.encode( typeObjectMap, data ), null, null, options);
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Updates the view specified by {@code tableName} to include full series
     * (track) information from the {@code worldTableName} for the series
     * (tracks) present in the {@code viewName}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public UpdateRecordsBySeriesResponse updateRecordsBySeries(UpdateRecordsBySeriesRequest request) throws GPUdbException {
        UpdateRecordsBySeriesResponse actualResponse_ = new UpdateRecordsBySeriesResponse();
        submitRequest("/update/records/byseries", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Updates the view specified by {@code tableName} to include full series
     * (track) information from the {@code worldTableName} for the series
     * (tracks) present in the {@code viewName}.
     * 
     * @param tableName  Name of the view on which the update operation will be
     *                   performed. Must be an existing view.
     * @param worldTableName  Name of the table containing the complete series
     *                        (track) information.
     * @param viewName  Optional name of the view containing the series
     *                  (tracks) which have to be updated.
     * @param reserved
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public UpdateRecordsBySeriesResponse updateRecordsBySeries(String tableName, String worldTableName, String viewName, List<String> reserved, Map<String, String> options) throws GPUdbException {
        UpdateRecordsBySeriesRequest actualRequest_ = new UpdateRecordsBySeriesRequest(tableName, worldTableName, viewName, reserved, options);
        UpdateRecordsBySeriesResponse actualResponse_ = new UpdateRecordsBySeriesResponse();
        submitRequest("/update/records/byseries", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageResponse visualizeImage(VisualizeImageRequest request) throws GPUdbException {
        VisualizeImageResponse actualResponse_ = new VisualizeImageResponse();
        submitRequest("/visualize/image", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageResponse visualizeImage(List<String> tableNames, List<String> worldTableNames, String xColumnName, String yColumnName, String geometryColumnName, List<List<String>> trackIds, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageRequest actualRequest_ = new VisualizeImageRequest(tableNames, worldTableNames, xColumnName, yColumnName, geometryColumnName, trackIds, minX, maxX, minY, maxY, width, height, projection, bgColor, styleOptions, options);
        VisualizeImageResponse actualResponse_ = new VisualizeImageResponse();
        submitRequest("/visualize/image", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Scatter plot is the only plot type currently supported. A non-numeric
     * column can be specified as x or y column and jitters can be added to
     * them to avoid excessive overlapping. All color values must be in the
     * format RRGGBB or AARRGGBB (to specify the alpha value).
     * The image is contained in the {@code imageData} field.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  VisualizeImageChartResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public VisualizeImageChartResponse visualizeImageChart(VisualizeImageChartRequest request) throws GPUdbException {
        VisualizeImageChartResponse actualResponse_ = new VisualizeImageChartResponse();
        submitRequest("/visualize/image/chart", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Scatter plot is the only plot type currently supported. A non-numeric
     * column can be specified as x or y column and jitters can be added to
     * them to avoid excessive overlapping. All color values must be in the
     * format RRGGBB or AARRGGBB (to specify the alpha value).
     * The image is contained in the {@code imageData} field.
     * 
     * @param tableName  Name of the table containing the data to be drawn as a
     *                   chart.
     * @param xColumnName  Name of the column containing the data mapped to the
     *                     x axis of a chart.
     * @param yColumnName  Name of the column containing the data mapped to the
     *                     y axis of a chart.
     * @param minX  Lower bound for the x column values. For non-numeric x
     *              column, each x column item is mapped to an integral value
     *              starting from 0.
     * @param maxX  Upper bound for the x column values. For non-numeric x
     *              column, each x column item is mapped to an integral value
     *              starting from 0.
     * @param minY  Lower bound for the y column values. For non-numeric y
     *              column, each y column item is mapped to an integral value
     *              starting from 0.
     * @param maxY  Upper bound for the y column values. For non-numeric y
     *              column, each y column item is mapped to an integral value
     *              starting from 0.
     * @param width  Width of the generated image in pixels.
     * @param height  Height of the generated image in pixels.
     * @param bgColor  Background color of the generated image.
     * @param styleOptions  Rendering style options for a chart.
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#POINTCOLOR
     *                      POINTCOLOR}: The color of points in the plot
     *                      represented as a hexadecimal number.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#POINTSIZE
     *                      POINTSIZE}: The size of points in the plot
     *                      represented as number of pixels.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#POINTSHAPE
     *                      POINTSHAPE}: The shape of points in the plot.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#NONE
     *                      NONE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CIRCLE
     *                      CIRCLE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#SQUARE
     *                      SQUARE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#DIAMOND
     *                      DIAMOND}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#HOLLOWCIRCLE
     *                      HOLLOWCIRCLE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#HOLLOWSQUARE
     *                      HOLLOWSQUARE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#HOLLOWDIAMOND
     *                      HOLLOWDIAMOND}
     *                      </ul>
     *                      The default value is {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#SQUARE
     *                      SQUARE}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_POINTCOLORS
     *                      CB_POINTCOLORS}: Point color class break
     *                      information consisting of three entries:
     *                      class-break attribute, class-break values/ranges,
     *                      and point color values. This option overrides the
     *                      pointcolor option if both are provided. Class-break
     *                      ranges are represented in the form of "min:max".
     *                      Class-break values/ranges and point color values
     *                      are separated by cb_delimiter, e.g. {"price",
     *                      "20:30;30:40;40:50", "0xFF0000;0x00FF00;0x0000FF"}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_POINTSIZES
     *                      CB_POINTSIZES}: Point size class break information
     *                      consisting of three entries: class-break attribute,
     *                      class-break values/ranges, and point size values.
     *                      This option overrides the pointsize option if both
     *                      are provided. Class-break ranges are represented in
     *                      the form of "min:max". Class-break values/ranges
     *                      and point size values are separated by
     *                      cb_delimiter, e.g. {"states", "NY;TX;CA", "3;5;7"}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_POINTSHAPES
     *                      CB_POINTSHAPES}: Point shape class break
     *                      information consisting of three entries:
     *                      class-break attribute, class-break values/ranges,
     *                      and point shape names. This option overrides the
     *                      pointshape option if both are provided. Class-break
     *                      ranges are represented in the form of "min:max".
     *                      Class-break values/ranges and point shape names are
     *                      separated by cb_delimiter, e.g. {"states",
     *                      "NY;TX;CA", "circle;square;diamond"}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_DELIMITER
     *                      CB_DELIMITER}: A character or string which
     *                      separates per-class values in a class-break style
     *                      option string.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#X_ORDER_BY
     *                      X_ORDER_BY}: An expression or aggregate expression
     *                      by which non-numeric x column values are sorted,
     *                      e.g. avg(price).
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#Y_ORDER_BY
     *                      Y_ORDER_BY}: An expression or aggregate expression
     *                      by which non-numeric y column values are sorted,
     *                      e.g. avg(price).
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#JITTER_X
     *                      JITTER_X}: Amplitude of horizontal jitter applied
     *                      to non-numaric x column values.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#JITTER_Y
     *                      JITTER_Y}: Amplitude of vertical jitter applied to
     *                      non-numaric y column values.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#PLOT_ALL
     *                      PLOT_ALL}: If this options is set to "true", all
     *                      non-numeric column values are plotted ignoring
     *                      min_x, max_x, min_y and max_y parameters.
     *                      </ul>
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  VisualizeImageChartResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public VisualizeImageChartResponse visualizeImageChart(String tableName, String xColumnName, String yColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String bgColor, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageChartRequest actualRequest_ = new VisualizeImageChartRequest(tableName, xColumnName, yColumnName, minX, maxX, minY, maxY, width, height, bgColor, styleOptions, options);
        VisualizeImageChartResponse actualResponse_ = new VisualizeImageChartResponse();
        submitRequest("/visualize/image/chart", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageClassbreakResponse visualizeImageClassbreak(VisualizeImageClassbreakRequest request) throws GPUdbException {
        VisualizeImageClassbreakResponse actualResponse_ = new VisualizeImageClassbreakResponse();
        submitRequest("/visualize/image/classbreak", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageClassbreakResponse visualizeImageClassbreak(List<String> tableNames, List<String> worldTableNames, String xColumnName, String yColumnName, String geometryColumnName, List<List<String>> trackIds, String cbColumnName, List<String> cbVals, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageClassbreakRequest actualRequest_ = new VisualizeImageClassbreakRequest(tableNames, worldTableNames, xColumnName, yColumnName, geometryColumnName, trackIds, cbColumnName, cbVals, minX, maxX, minY, maxY, width, height, projection, bgColor, styleOptions, options);
        VisualizeImageClassbreakResponse actualResponse_ = new VisualizeImageClassbreakResponse();
        submitRequest("/visualize/image/classbreak", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageHeatmapResponse visualizeImageHeatmap(VisualizeImageHeatmapRequest request) throws GPUdbException {
        VisualizeImageHeatmapResponse actualResponse_ = new VisualizeImageHeatmapResponse();
        submitRequest("/visualize/image/heatmap", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageHeatmapResponse visualizeImageHeatmap(List<String> tableNames, String xColumnName, String yColumnName, String valueColumnName, String geometryColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, Map<String, String> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageHeatmapRequest actualRequest_ = new VisualizeImageHeatmapRequest(tableNames, xColumnName, yColumnName, valueColumnName, geometryColumnName, minX, maxX, minY, maxY, width, height, projection, styleOptions, options);
        VisualizeImageHeatmapResponse actualResponse_ = new VisualizeImageHeatmapResponse();
        submitRequest("/visualize/image/heatmap", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageLabelsResponse visualizeImageLabels(VisualizeImageLabelsRequest request) throws GPUdbException {
        VisualizeImageLabelsResponse actualResponse_ = new VisualizeImageLabelsResponse();
        submitRequest("/visualize/image/labels", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageLabelsResponse visualizeImageLabels(String tableName, String xColumnName, String yColumnName, String xOffset, String yOffset, String textString, String font, String textColor, String textAngle, String textScale, String drawBox, String drawLeader, String lineWidth, String lineColor, String fillColor, String leaderXColumnName, String leaderYColumnName, String filter, double minX, double maxX, double minY, double maxY, int width, int height, String projection, Map<String, String> options) throws GPUdbException {
        VisualizeImageLabelsRequest actualRequest_ = new VisualizeImageLabelsRequest(tableName, xColumnName, yColumnName, xOffset, yOffset, textString, font, textColor, textAngle, textScale, drawBox, drawLeader, lineWidth, lineColor, fillColor, leaderXColumnName, leaderYColumnName, filter, minX, maxX, minY, maxY, width, height, projection, options);
        VisualizeImageLabelsResponse actualResponse_ = new VisualizeImageLabelsResponse();
        submitRequest("/visualize/image/labels", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoResponse visualizeVideo(VisualizeVideoRequest request) throws GPUdbException {
        VisualizeVideoResponse actualResponse_ = new VisualizeVideoResponse();
        submitRequest("/visualize/video", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoResponse visualizeVideo(List<String> tableNames, List<String> worldTableNames, List<List<String>> trackIds, String xColumnName, String yColumnName, String geometryColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, List<List<Double>> timeIntervals, String videoStyle, String sessionKey, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeVideoRequest actualRequest_ = new VisualizeVideoRequest(tableNames, worldTableNames, trackIds, xColumnName, yColumnName, geometryColumnName, minX, maxX, minY, maxY, width, height, projection, bgColor, timeIntervals, videoStyle, sessionKey, styleOptions, options);
        VisualizeVideoResponse actualResponse_ = new VisualizeVideoResponse();
        submitRequest("/visualize/video", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoHeatmapResponse visualizeVideoHeatmap(VisualizeVideoHeatmapRequest request) throws GPUdbException {
        VisualizeVideoHeatmapResponse actualResponse_ = new VisualizeVideoHeatmapResponse();
        submitRequest("/visualize/video/heatmap", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoHeatmapResponse visualizeVideoHeatmap(List<String> tableNames, String xColumnName, String yColumnName, double minX, double maxX, double minY, double maxY, List<List<Double>> timeIntervals, int width, int height, String projection, String videoStyle, String sessionKey, Map<String, String> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeVideoHeatmapRequest actualRequest_ = new VisualizeVideoHeatmapRequest(tableNames, xColumnName, yColumnName, minX, maxX, minY, maxY, timeIntervals, width, height, projection, videoStyle, sessionKey, styleOptions, options);
        VisualizeVideoHeatmapResponse actualResponse_ = new VisualizeVideoHeatmapResponse();
        submitRequest("/visualize/video/heatmap", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }


}