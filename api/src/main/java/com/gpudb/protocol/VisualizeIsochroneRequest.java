
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class VisualizeIsochroneRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeIsochroneRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("weightsOnEdges").type().array().items().stringType().noDefault()
                .name("sourceNode").type().stringType().noDefault()
                .name("restrictions").type().array().items().stringType().noDefault()
                .name("maxSolutionRadius").type().doubleType().noDefault()
                .name("numLevels").type().intType().noDefault()
                .name("generateImage").type().booleanType().noDefault()
                .name("projection").type().stringType().noDefault()
                .name("imageWidth").type().intType().noDefault()
                .name("imageHeight").type().intType().noDefault()
                .name("styleOptions").type().map().values().stringType().noDefault()
                .name("solveOptions").type().map().values().stringType().noDefault()
                .name("contourOptions").type().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    public static final class Projection {

        public static final String _3857 = "3857";

        public static final String _102100 = "102100";

        public static final String _900913 = "900913";

        public static final String EPSG_4326 = "EPSG:4326";

        public static final String PLATE_CARREE = "PLATE_CARREE";

        public static final String EPSG_900913 = "EPSG:900913";

        public static final String EPSG_102100 = "EPSG:102100";

        public static final String EPSG_3857 = "EPSG:3857";

        public static final String WEB_MERCATOR = "WEB_MERCATOR";


        private Projection() {  }
    }


    public static final class StyleOptions {

        public static final String LINE_SIZE = "line_size";

        public static final String COLOR = "color";

        public static final String BG_COLOR = "bg_color";

        public static final String TEXT_COLOR = "text_color";

        public static final String COLORMAP = "colormap";

        public static final String JET = "jet";

        public static final String ACCENT = "accent";

        public static final String AFMHOT = "afmhot";

        public static final String AUTUMN = "autumn";

        public static final String BINARY = "binary";

        public static final String BLUES = "blues";

        public static final String BONE = "bone";

        public static final String BRBG = "brbg";

        public static final String BRG = "brg";

        public static final String BUGN = "bugn";

        public static final String BUPU = "bupu";

        public static final String BWR = "bwr";

        public static final String CMRMAP = "cmrmap";

        public static final String COOL = "cool";

        public static final String COOLWARM = "coolwarm";

        public static final String COPPER = "copper";

        public static final String CUBEHELIX = "cubehelix";

        public static final String DARK2 = "dark2";

        public static final String FLAG = "flag";

        public static final String GIST_EARTH = "gist_earth";

        public static final String GIST_GRAY = "gist_gray";

        public static final String GIST_HEAT = "gist_heat";

        public static final String GIST_NCAR = "gist_ncar";

        public static final String GIST_RAINBOW = "gist_rainbow";

        public static final String GIST_STERN = "gist_stern";

        public static final String GIST_YARG = "gist_yarg";

        public static final String GNBU = "gnbu";

        public static final String GNUPLOT2 = "gnuplot2";

        public static final String GNUPLOT = "gnuplot";

        public static final String GRAY = "gray";

        public static final String GREENS = "greens";

        public static final String GREYS = "greys";

        public static final String HOT = "hot";

        public static final String HSV = "hsv";

        public static final String INFERNO = "inferno";

        public static final String MAGMA = "magma";

        public static final String NIPY_SPECTRAL = "nipy_spectral";

        public static final String OCEAN = "ocean";

        public static final String ORANGES = "oranges";

        public static final String ORRD = "orrd";

        public static final String PAIRED = "paired";

        public static final String PASTEL1 = "pastel1";

        public static final String PASTEL2 = "pastel2";

        public static final String PINK = "pink";

        public static final String PIYG = "piyg";

        public static final String PLASMA = "plasma";

        public static final String PRGN = "prgn";

        public static final String PRISM = "prism";

        public static final String PUBU = "pubu";

        public static final String PUBUGN = "pubugn";

        public static final String PUOR = "puor";

        public static final String PURD = "purd";

        public static final String PURPLES = "purples";

        public static final String RAINBOW = "rainbow";

        public static final String RDBU = "rdbu";

        public static final String RDGY = "rdgy";

        public static final String RDPU = "rdpu";

        public static final String RDYLBU = "rdylbu";

        public static final String RDYLGN = "rdylgn";

        public static final String REDS = "reds";

        public static final String SEISMIC = "seismic";

        public static final String SET1 = "set1";

        public static final String SET2 = "set2";

        public static final String SET3 = "set3";

        public static final String SPECTRAL = "spectral";

        public static final String SPRING = "spring";

        public static final String SUMMER = "summer";

        public static final String TERRAIN = "terrain";

        public static final String VIRIDIS = "viridis";

        public static final String WINTER = "winter";

        public static final String WISTIA = "wistia";

        public static final String YLGN = "ylgn";

        public static final String YLGNBU = "ylgnbu";

        public static final String YLORBR = "ylorbr";

        public static final String YLORRD = "ylorrd";


        private StyleOptions() {  }
    }


    public static final class SolveOptions {

        public static final String REMOVE_PREVIOUS_RESTRICTIONS = "remove_previous_restrictions";

        public static final String TRUE = "true";

        public static final String FALSE = "false";

        public static final String RESTRICTION_THRESHOLD_VALUE = "restriction_threshold_value";

        public static final String UNIFORM_WEIGHTS = "uniform_weights";


        private SolveOptions() {  }
    }


    public static final class ContourOptions {

        public static final String SEARCH_RADIUS = "search_radius";

        public static final String GRID_SIZE = "grid_size";

        public static final String COLOR_ISOLINES = "color_isolines";

        public static final String ADD_LABELS = "add_labels";

        public static final String LABELS_FONT_SIZE = "labels_font_size";

        public static final String LABELS_FONT_FAMILY = "labels_font_family";

        public static final String LABELS_SEARCH_WINDOW = "labels_search_window";

        public static final String LABELS_INTRALEVEL_SEPARATION = "labels_intralevel_separation";

        public static final String LABELS_INTERLEVEL_SEPARATION = "labels_interlevel_separation";

        public static final String LABELS_MAX_ANGLE = "labels_max_angle";


        private ContourOptions() {  }
    }


    public static final class Options {

        public static final String LEVELS_TABLE = "levels_table";

        public static final String SOLVE_TABLE = "solve_table";

        public static final String IS_REPLICATED = "is_replicated";

        public static final String DATA_MIN_X = "data_min_x";

        public static final String DATA_MAX_X = "data_max_x";

        public static final String DATA_MIN_Y = "data_min_y";

        public static final String DATA_MAX_Y = "data_max_y";

        public static final String CONCAVITY_LEVEL = "concavity_level";

        public static final String SOLVE_DIRECTION = "solve_direction";

        public static final String FROM_SOURCE = "from_source";

        public static final String TO_SOURCE = "to_source";


        private Options() {  }
    }


    private String graphName;
    private List<String> weightsOnEdges;
    private String sourceNode;
    private List<String> restrictions;
    private double maxSolutionRadius;
    private int numLevels;
    private boolean generateImage;
    private String projection;
    private int imageWidth;
    private int imageHeight;
    private Map<String, String> styleOptions;
    private Map<String, String> solveOptions;
    private Map<String, String> contourOptions;
    private Map<String, String> options;


    public VisualizeIsochroneRequest() {
        graphName = "";
        weightsOnEdges = new ArrayList<>();
        sourceNode = "";
        restrictions = new ArrayList<>();
        projection = "";
        styleOptions = new LinkedHashMap<>();
        solveOptions = new LinkedHashMap<>();
        contourOptions = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    public VisualizeIsochroneRequest(String graphName, List<String> weightsOnEdges, String sourceNode, List<String> restrictions, double maxSolutionRadius, int numLevels, boolean generateImage, String projection, int imageWidth, int imageHeight, Map<String, String> styleOptions, Map<String, String> solveOptions, Map<String, String> contourOptions, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.weightsOnEdges = (weightsOnEdges == null) ? new ArrayList<String>() : weightsOnEdges;
        this.sourceNode = (sourceNode == null) ? "" : sourceNode;
        this.restrictions = (restrictions == null) ? new ArrayList<String>() : restrictions;
        this.maxSolutionRadius = maxSolutionRadius;
        this.numLevels = numLevels;
        this.generateImage = generateImage;
        this.projection = (projection == null) ? "" : projection;
        this.imageWidth = imageWidth;
        this.imageHeight = imageHeight;
        this.styleOptions = (styleOptions == null) ? new LinkedHashMap<String, String>() : styleOptions;
        this.solveOptions = (solveOptions == null) ? new LinkedHashMap<String, String>() : solveOptions;
        this.contourOptions = (contourOptions == null) ? new LinkedHashMap<String, String>() : contourOptions;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public String getGraphName() {
        return graphName;
    }

    public VisualizeIsochroneRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    public List<String> getWeightsOnEdges() {
        return weightsOnEdges;
    }

    public VisualizeIsochroneRequest setWeightsOnEdges(List<String> weightsOnEdges) {
        this.weightsOnEdges = (weightsOnEdges == null) ? new ArrayList<String>() : weightsOnEdges;
        return this;
    }

    public String getSourceNode() {
        return sourceNode;
    }

    public VisualizeIsochroneRequest setSourceNode(String sourceNode) {
        this.sourceNode = (sourceNode == null) ? "" : sourceNode;
        return this;
    }

    public List<String> getRestrictions() {
        return restrictions;
    }

    public VisualizeIsochroneRequest setRestrictions(List<String> restrictions) {
        this.restrictions = (restrictions == null) ? new ArrayList<String>() : restrictions;
        return this;
    }

    public double getMaxSolutionRadius() {
        return maxSolutionRadius;
    }

    public VisualizeIsochroneRequest setMaxSolutionRadius(double maxSolutionRadius) {
        this.maxSolutionRadius = maxSolutionRadius;
        return this;
    }

    public int getNumLevels() {
        return numLevels;
    }

    public VisualizeIsochroneRequest setNumLevels(int numLevels) {
        this.numLevels = numLevels;
        return this;
    }

    public boolean getGenerateImage() {
        return generateImage;
    }

    public VisualizeIsochroneRequest setGenerateImage(boolean generateImage) {
        this.generateImage = generateImage;
        return this;
    }

    public String getProjection() {
        return projection;
    }

    public VisualizeIsochroneRequest setProjection(String projection) {
        this.projection = (projection == null) ? "" : projection;
        return this;
    }

    public int getImageWidth() {
        return imageWidth;
    }

    public VisualizeIsochroneRequest setImageWidth(int imageWidth) {
        this.imageWidth = imageWidth;
        return this;
    }

    public int getImageHeight() {
        return imageHeight;
    }

    public VisualizeIsochroneRequest setImageHeight(int imageHeight) {
        this.imageHeight = imageHeight;
        return this;
    }

    public Map<String, String> getStyleOptions() {
        return styleOptions;
    }

    public VisualizeIsochroneRequest setStyleOptions(Map<String, String> styleOptions) {
        this.styleOptions = (styleOptions == null) ? new LinkedHashMap<String, String>() : styleOptions;
        return this;
    }

    public Map<String, String> getSolveOptions() {
        return solveOptions;
    }

    public VisualizeIsochroneRequest setSolveOptions(Map<String, String> solveOptions) {
        this.solveOptions = (solveOptions == null) ? new LinkedHashMap<String, String>() : solveOptions;
        return this;
    }

    public Map<String, String> getContourOptions() {
        return contourOptions;
    }

    public VisualizeIsochroneRequest setContourOptions(Map<String, String> contourOptions) {
        this.contourOptions = (contourOptions == null) ? new LinkedHashMap<String, String>() : contourOptions;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public VisualizeIsochroneRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.weightsOnEdges;

            case 2:
                return this.sourceNode;

            case 3:
                return this.restrictions;

            case 4:
                return this.maxSolutionRadius;

            case 5:
                return this.numLevels;

            case 6:
                return this.generateImage;

            case 7:
                return this.projection;

            case 8:
                return this.imageWidth;

            case 9:
                return this.imageHeight;

            case 10:
                return this.styleOptions;

            case 11:
                return this.solveOptions;

            case 12:
                return this.contourOptions;

            case 13:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.weightsOnEdges = (List<String>)value;
                break;

            case 2:
                this.sourceNode = (String)value;
                break;

            case 3:
                this.restrictions = (List<String>)value;
                break;

            case 4:
                this.maxSolutionRadius = (Double)value;
                break;

            case 5:
                this.numLevels = (Integer)value;
                break;

            case 6:
                this.generateImage = (Boolean)value;
                break;

            case 7:
                this.projection = (String)value;
                break;

            case 8:
                this.imageWidth = (Integer)value;
                break;

            case 9:
                this.imageHeight = (Integer)value;
                break;

            case 10:
                this.styleOptions = (Map<String, String>)value;
                break;

            case 11:
                this.solveOptions = (Map<String, String>)value;
                break;

            case 12:
                this.contourOptions = (Map<String, String>)value;
                break;

            case 13:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        VisualizeIsochroneRequest that = (VisualizeIsochroneRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.weightsOnEdges.equals( that.weightsOnEdges )
                 && this.sourceNode.equals( that.sourceNode )
                 && this.restrictions.equals( that.restrictions )
                 && ( (Double)this.maxSolutionRadius ).equals( (Double)that.maxSolutionRadius )
                 && ( this.numLevels == that.numLevels )
                 && ( this.generateImage == that.generateImage )
                 && this.projection.equals( that.projection )
                 && ( this.imageWidth == that.imageWidth )
                 && ( this.imageHeight == that.imageHeight )
                 && this.styleOptions.equals( that.styleOptions )
                 && this.solveOptions.equals( that.solveOptions )
                 && this.contourOptions.equals( that.contourOptions )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "weightsOnEdges" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.weightsOnEdges ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceNode" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceNode ) );
        builder.append( ", " );
        builder.append( gd.toString( "restrictions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.restrictions ) );
        builder.append( ", " );
        builder.append( gd.toString( "maxSolutionRadius" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.maxSolutionRadius ) );
        builder.append( ", " );
        builder.append( gd.toString( "numLevels" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numLevels ) );
        builder.append( ", " );
        builder.append( gd.toString( "generateImage" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.generateImage ) );
        builder.append( ", " );
        builder.append( gd.toString( "projection" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.projection ) );
        builder.append( ", " );
        builder.append( gd.toString( "imageWidth" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.imageWidth ) );
        builder.append( ", " );
        builder.append( gd.toString( "imageHeight" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.imageHeight ) );
        builder.append( ", " );
        builder.append( gd.toString( "styleOptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.styleOptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "solveOptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.solveOptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "contourOptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.contourOptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.weightsOnEdges.hashCode();
        hashCode = (31 * hashCode) + this.sourceNode.hashCode();
        hashCode = (31 * hashCode) + this.restrictions.hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxSolutionRadius).hashCode();
        hashCode = (31 * hashCode) + this.numLevels;
        hashCode = (31 * hashCode) + ((Boolean)this.generateImage).hashCode();
        hashCode = (31 * hashCode) + this.projection.hashCode();
        hashCode = (31 * hashCode) + this.imageWidth;
        hashCode = (31 * hashCode) + this.imageHeight;
        hashCode = (31 * hashCode) + this.styleOptions.hashCode();
        hashCode = (31 * hashCode) + this.solveOptions.hashCode();
        hashCode = (31 * hashCode) + this.contourOptions.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
