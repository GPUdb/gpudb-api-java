/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.nio.ByteBuffer;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#executeProc(ExecuteProcRequest)}.
 * <p>
 * Exectues a proc in the GPUdb Node.js proc server.
 */
public class ExecuteProcRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ExecuteProcRequest")
            .namespace("com.gpudb")
            .fields()
                .name("name").type().stringType().noDefault()
                .name("params").type().map().values().stringType().noDefault()
                .name("binParams").type().map().values().bytesType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String name;
    private Map<String, String> params;
    private Map<String, ByteBuffer> binParams;
    private Map<String, String> options;


    /**
     * Constructs an ExecuteProcRequest object with default parameters.
     */
    public ExecuteProcRequest() {
        name = "";
        params = new LinkedHashMap<>();
        binParams = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an ExecuteProcRequest object with the specified parameters.
     * 
     * @param name  Name of the proc to execute.
     * @param params  A map containing string parameters to pass to the proc.
     *                Each key/value pair specifies the name of a parameter and
     *                its value.
     * @param binParams  A map containing binary parameters to pass to the
     *                   proc. Each key/value pair specifies the name of a
     *                   parameter and its value.
     * @param options  Optional parameters.
     * 
     */
    public ExecuteProcRequest(String name, Map<String, String> params, Map<String, ByteBuffer> binParams, Map<String, String> options) {
        this.name = (name == null) ? "" : name;
        this.params = (params == null) ? new LinkedHashMap<String, String>() : params;
        this.binParams = (binParams == null) ? new LinkedHashMap<String, ByteBuffer>() : binParams;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the proc to execute.
     * 
     */
    public String getName() {
        return name;
    }

    /**
     * 
     * @param name  Name of the proc to execute.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExecuteProcRequest setName(String name) {
        this.name = (name == null) ? "" : name;
        return this;
    }

    /**
     * 
     * @return A map containing string parameters to pass to the proc. Each
     *         key/value pair specifies the name of a parameter and its value.
     * 
     */
    public Map<String, String> getParams() {
        return params;
    }

    /**
     * 
     * @param params  A map containing string parameters to pass to the proc.
     *                Each key/value pair specifies the name of a parameter and
     *                its value.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExecuteProcRequest setParams(Map<String, String> params) {
        this.params = (params == null) ? new LinkedHashMap<String, String>() : params;
        return this;
    }

    /**
     * 
     * @return A map containing binary parameters to pass to the proc. Each
     *         key/value pair specifies the name of a parameter and its value.
     * 
     */
    public Map<String, ByteBuffer> getBinParams() {
        return binParams;
    }

    /**
     * 
     * @param binParams  A map containing binary parameters to pass to the
     *                   proc. Each key/value pair specifies the name of a
     *                   parameter and its value.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExecuteProcRequest setBinParams(Map<String, ByteBuffer> binParams) {
        this.binParams = (binParams == null) ? new LinkedHashMap<String, ByteBuffer>() : binParams;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExecuteProcRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.name;

            case 1:
                return this.params;

            case 2:
                return this.binParams;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.name = (String)value;
                break;

            case 1:
                this.params = (Map<String, String>)value;
                break;

            case 2:
                this.binParams = (Map<String, ByteBuffer>)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ExecuteProcRequest that = (ExecuteProcRequest)obj;

        return ( this.name.equals( that.name )
                 && this.params.equals( that.params )
                 && this.binParams.equals( that.binParams )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "name" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.name ) );
        builder.append( ", " );
        builder.append( gd.toString( "params" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.params ) );
        builder.append( ", " );
        builder.append( gd.toString( "binParams" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.binParams ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.name.hashCode();
        hashCode = (31 * hashCode) + this.params.hashCode();
        hashCode = (31 * hashCode) + this.binParams.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
