/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createUnion(CreateUnionRequest)}.
 * <p>
 * Performs a <a href="../../../../../concepts/unions.html"
 * target="_top">union</a> (concatenation) of one or more existing tables or
 * views, the results of which are stored in a new table. It is equivalent to
 * the SQL UNION ALL operator.  Non-charN 'string' and 'bytes' column types
 * cannot be included in a union, neither can columns with the property
 * 'store_only'. Though not explicitly unions, <a
 * href="../../../../../concepts/intersect.html" target="_top">intersect</a>
 * and <a href="../../../../../concepts/except.html" target="_top">except</a>
 * are also available from this endpoint.
 */
public class CreateUnionRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateUnionRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("inputColumnNames").type().array().items().array().items().stringType().noDefault()
                .name("outputColumnNames").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#COLLECTION_NAME
     * COLLECTION_NAME}: Name of a collection which is to contain the union. If
     * the collection provided is non-existent, the collection will be
     * automatically created. If empty, then the union will be a top-level
     * table.
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#MATERIALIZE_ON_GPU
     * MATERIALIZE_ON_GPU}: If 'true' then the columns of the union will be
     * cached on the GPU.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}.
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#MODE
     * MODE}: If 'merge_views' then this operation will merge (i.e. union) the
     * provided views. All 'table_names' must be views from the same underlying
     * base table.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL UNION_ALL}:
     * Retains all rows from the specified tables.
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#UNION
     * UNION}: Retains all unique rows from the specified tables (synonym for
     * 'union_distinct').
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
     * UNION_DISTINCT}: Retains all unique rows from the specified tables.
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT
     * EXCEPT}: Retains all unique rows from the first table that do not appear
     * in the second table (only works on 2 tables).
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT INTERSECT}:
     * Retains all unique rows that appear in both of the specified tables
     * (only works on 2 tables).
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS MERGE_VIEWS}:
     * Merge two or more views (or views of views) of the same base data set
     * into a new view. If this mode is selected
     *                                       {@code inputColumnNames} AND
     * {@code outputColumnNames} are ignored The resulting view would match the
     * results of a SQL OR operation, e.g., if filter 1 creates a view using
     * the expression 'x = 10' and filter 2 creates a view using the expression
     * 'x <= 10', then the merge views operation creates a new view using the
     * expression 'x = 10 OR x <= 10'.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL UNION_ALL}.
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#CHUNK_SIZE CHUNK_SIZE}:
     * Indicates the chunk size to be used for this table.
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#TTL
     * TTL}: Sets the <a href="../../../../../concepts/ttl.html"
     * target="_top">TTL</a> of the table specified in {@code tableName}.
     *         <li> {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#PERSIST PERSIST}: If
     * {@code true}, then the union specified in {@code tableName} will be
     * persisted and will not expire unless a {@code ttl} is specified.   If
     * {@code false}, then the union will be an in-memory table and will expire
     * unless a {@code ttl} is specified otherwise.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}.
     * </ul>
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Name of a collection which is to contain the union. If the
         * collection provided is non-existent, the collection will be
         * automatically created. If empty, then the union will be a top-level
         * table.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * If 'true' then the columns of the union will be cached on the GPU.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}.
         */
        public static final String MATERIALIZE_ON_GPU = "materialize_on_gpu";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If 'merge_views' then this operation will merge (i.e. union) the
         * provided views. All 'table_names' must be views from the same
         * underlying base table.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL UNION_ALL}:
         * Retains all rows from the specified tables.
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#UNION UNION}: Retains
         * all unique rows from the specified tables (synonym for
         * 'union_distinct').
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
         * UNION_DISTINCT}: Retains all unique rows from the specified tables.
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT EXCEPT}:
         * Retains all unique rows from the first table that do not appear in
         * the second table (only works on 2 tables).
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT INTERSECT}:
         * Retains all unique rows that appear in both of the specified tables
         * (only works on 2 tables).
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS
         * MERGE_VIEWS}: Merge two or more views (or views of views) of the
         * same base data set into a new view. If this mode is selected
         *                                       {@code inputColumnNames} AND
         * {@code outputColumnNames} are ignored The resulting view would match
         * the results of a SQL OR operation, e.g., if filter 1 creates a view
         * using the expression 'x = 10' and filter 2 creates a view using the
         * expression 'x <= 10', then the merge views operation creates a new
         * view using the expression 'x = 10 OR x <= 10'.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL UNION_ALL}.
         */
        public static final String MODE = "mode";

        /**
         * Retains all rows from the specified tables.
         */
        public static final String UNION_ALL = "union_all";

        /**
         * Retains all unique rows from the specified tables (synonym for
         * 'union_distinct').
         */
        public static final String UNION = "union";

        /**
         * Retains all unique rows from the specified tables.
         */
        public static final String UNION_DISTINCT = "union_distinct";

        /**
         * Retains all unique rows from the first table that do not appear in
         * the second table (only works on 2 tables).
         */
        public static final String EXCEPT = "except";

        /**
         * Retains all unique rows that appear in both of the specified tables
         * (only works on 2 tables).
         */
        public static final String INTERSECT = "intersect";

        /**
         * Merge two or more views (or views of views) of the same base data
         * set into a new view. If this mode is selected
         *                                       {@code inputColumnNames} AND
         * {@code outputColumnNames} are ignored The resulting view would match
         * the results of a SQL OR operation, e.g., if filter 1 creates a view
         * using the expression 'x = 10' and filter 2 creates a view using the
         * expression 'x <= 10', then the merge views operation creates a new
         * view using the expression 'x = 10 OR x <= 10'.
         */
        public static final String MERGE_VIEWS = "merge_views";

        /**
         * Indicates the chunk size to be used for this table.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Sets the <a href="../../../../../concepts/ttl.html"
         * target="_top">TTL</a> of the table specified in {@code tableName}.
         */
        public static final String TTL = "ttl";

        /**
         * If {@code true}, then the union specified in {@code tableName} will
         * be persisted and will not expire unless a {@code ttl} is specified.
         * If {@code false}, then the union will be an in-memory table and will
         * expire unless a {@code ttl} is specified otherwise.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}.
         */
        public static final String PERSIST = "persist";

        private Options() {  }
    }

    private String tableName;
    private List<String> tableNames;
    private List<List<String>> inputColumnNames;
    private List<String> outputColumnNames;
    private Map<String, String> options;


    /**
     * Constructs a CreateUnionRequest object with default parameters.
     */
    public CreateUnionRequest() {
        tableName = "";
        tableNames = new ArrayList<>();
        inputColumnNames = new ArrayList<>();
        outputColumnNames = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateUnionRequest object with the specified parameters.
     * 
     * @param tableName  Name of the table to be created. Has the same naming
     *                   restrictions as <a
     *                   href="../../../../../concepts/tables.html"
     *                   target="_top">tables</a>.
     * @param tableNames  The list of table names making up the union. Must
     *                    contain the names of one or more existing tables.
     * @param inputColumnNames  The list of columns from each of the
     *                          corresponding input tables.
     * @param outputColumnNames  The list of names of the columns to be stored
     *                           in the union.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the union. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the union will be a top-level
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: If 'true' then the columns of the
     *                 union will be cached on the GPU.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MODE
     *                 MODE}: If 'merge_views' then this operation will merge
     *                 (i.e. union) the provided views. All 'table_names' must
     *                 be views from the same underlying base table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}: Retains all rows from the specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION
     *                 UNION}: Retains all unique rows from the specified
     *                 tables (synonym for 'union_distinct').
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
     *                 UNION_DISTINCT}: Retains all unique rows from the
     *                 specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT
     *                 EXCEPT}: Retains all unique rows from the first table
     *                 that do not appear in the second table (only works on 2
     *                 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT
     *                 INTERSECT}: Retains all unique rows that appear in both
     *                 of the specified tables (only works on 2 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS
     *                 MERGE_VIEWS}: Merge two or more views (or views of
     *                 views) of the same base data set into a new view. If
     *                 this mode is selected
     *                                                       {@code
     *                 inputColumnNames} AND {@code outputColumnNames} are
     *                 ignored The resulting view would match the results of a
     *                 SQL OR operation, e.g., if filter 1 creates a view using
     *                 the expression 'x = 10' and filter 2 creates a view
     *                 using the expression 'x <= 10', then the merge views
     *                 operation creates a new view using the expression 'x =
     *                 10 OR x <= 10'.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for
     *                 this table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the union specified in
     *                 {@code tableName} will be persisted and will not expire
     *                 unless a {@code ttl} is specified.   If {@code false},
     *                 then the union will be an in-memory table and will
     *                 expire unless a {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     */
    public CreateUnionRequest(String tableName, List<String> tableNames, List<List<String>> inputColumnNames, List<String> outputColumnNames, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.inputColumnNames = (inputColumnNames == null) ? new ArrayList<List<String>>() : inputColumnNames;
        this.outputColumnNames = (outputColumnNames == null) ? new ArrayList<String>() : outputColumnNames;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the table to be created. Has the same naming
     *         restrictions as <a href="../../../../../concepts/tables.html"
     *         target="_top">tables</a>.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Name of the table to be created. Has the same naming
     *                   restrictions as <a
     *                   href="../../../../../concepts/tables.html"
     *                   target="_top">tables</a>.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateUnionRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return The list of table names making up the union. Must contain the
     *         names of one or more existing tables.
     * 
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * 
     * @param tableNames  The list of table names making up the union. Must
     *                    contain the names of one or more existing tables.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateUnionRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * 
     * @return The list of columns from each of the corresponding input tables.
     * 
     */
    public List<List<String>> getInputColumnNames() {
        return inputColumnNames;
    }

    /**
     * 
     * @param inputColumnNames  The list of columns from each of the
     *                          corresponding input tables.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateUnionRequest setInputColumnNames(List<List<String>> inputColumnNames) {
        this.inputColumnNames = (inputColumnNames == null) ? new ArrayList<List<String>>() : inputColumnNames;
        return this;
    }

    /**
     * 
     * @return The list of names of the columns to be stored in the union.
     * 
     */
    public List<String> getOutputColumnNames() {
        return outputColumnNames;
    }

    /**
     * 
     * @param outputColumnNames  The list of names of the columns to be stored
     *                           in the union.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateUnionRequest setOutputColumnNames(List<String> outputColumnNames) {
        this.outputColumnNames = (outputColumnNames == null) ? new ArrayList<String>() : outputColumnNames;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#COLLECTION_NAME
     *         COLLECTION_NAME}: Name of a collection which is to contain the
     *         union. If the collection provided is non-existent, the
     *         collection will be automatically created. If empty, then the
     *         union will be a top-level table.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#MATERIALIZE_ON_GPU
     *         MATERIALIZE_ON_GPU}: If 'true' then the columns of the union
     *         will be cached on the GPU.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#MODE MODE}: If
     *         'merge_views' then this operation will merge (i.e. union) the
     *         provided views. All 'table_names' must be views from the same
     *         underlying base table.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *         UNION_ALL}: Retains all rows from the specified tables.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#UNION UNION}:
     *         Retains all unique rows from the specified tables (synonym for
     *         'union_distinct').
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
     *         UNION_DISTINCT}: Retains all unique rows from the specified
     *         tables.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT EXCEPT}:
     *         Retains all unique rows from the first table that do not appear
     *         in the second table (only works on 2 tables).
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT
     *         INTERSECT}: Retains all unique rows that appear in both of the
     *         specified tables (only works on 2 tables).
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS
     *         MERGE_VIEWS}: Merge two or more views (or views of views) of the
     *         same base data set into a new view. If this mode is selected
     *                                               {@code inputColumnNames}
     *         AND {@code outputColumnNames} are ignored The resulting view
     *         would match the results of a SQL OR operation, e.g., if filter 1
     *         creates a view using the expression 'x = 10' and filter 2
     *         creates a view using the expression 'x <= 10', then the merge
     *         views operation creates a new view using the expression 'x = 10
     *         OR x <= 10'.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *         UNION_ALL}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#CHUNK_SIZE
     *         CHUNK_SIZE}: Indicates the chunk size to be used for this table.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#TTL TTL}: Sets the
     *         <a href="../../../../../concepts/ttl.html" target="_top">TTL</a>
     *         of the table specified in {@code tableName}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#PERSIST PERSIST}:
     *         If {@code true}, then the union specified in {@code tableName}
     *         will be persisted and will not expire unless a {@code ttl} is
     *         specified.   If {@code false}, then the union will be an
     *         in-memory table and will expire unless a {@code ttl} is
     *         specified otherwise.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateUnionRequest.Options#FALSE FALSE}.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the union. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the union will be a top-level
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: If 'true' then the columns of the
     *                 union will be cached on the GPU.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MODE
     *                 MODE}: If 'merge_views' then this operation will merge
     *                 (i.e. union) the provided views. All 'table_names' must
     *                 be views from the same underlying base table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}: Retains all rows from the specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION
     *                 UNION}: Retains all unique rows from the specified
     *                 tables (synonym for 'union_distinct').
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
     *                 UNION_DISTINCT}: Retains all unique rows from the
     *                 specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT
     *                 EXCEPT}: Retains all unique rows from the first table
     *                 that do not appear in the second table (only works on 2
     *                 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT
     *                 INTERSECT}: Retains all unique rows that appear in both
     *                 of the specified tables (only works on 2 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS
     *                 MERGE_VIEWS}: Merge two or more views (or views of
     *                 views) of the same base data set into a new view. If
     *                 this mode is selected
     *                                                       {@code
     *                 inputColumnNames} AND {@code outputColumnNames} are
     *                 ignored The resulting view would match the results of a
     *                 SQL OR operation, e.g., if filter 1 creates a view using
     *                 the expression 'x = 10' and filter 2 creates a view
     *                 using the expression 'x <= 10', then the merge views
     *                 operation creates a new view using the expression 'x =
     *                 10 OR x <= 10'.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the chunk size to be used for
     *                 this table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the union specified in
     *                 {@code tableName} will be persisted and will not expire
     *                 unless a {@code ttl} is specified.   If {@code false},
     *                 then the union will be an in-memory table and will
     *                 expire unless a {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateUnionRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.tableNames;

            case 2:
                return this.inputColumnNames;

            case 3:
                return this.outputColumnNames;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.tableNames = (List<String>)value;
                break;

            case 2:
                this.inputColumnNames = (List<List<String>>)value;
                break;

            case 3:
                this.outputColumnNames = (List<String>)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateUnionRequest that = (CreateUnionRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.tableNames.equals( that.tableNames )
                 && this.inputColumnNames.equals( that.inputColumnNames )
                 && this.outputColumnNames.equals( that.outputColumnNames )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "inputColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inputColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "outputColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.outputColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.inputColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.outputColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
