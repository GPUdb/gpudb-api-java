/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link com.gpudb.GPUdb#alterTable(AlterTableRequest)}.
 * <br />
 * <br />Apply various modifications to a table or collection. Available modifications include:
 * <br />
 * <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Creating or deleting an index on a particular column. This can speed up certain search
 * queries (such as {@link com.gpudb.GPUdb#getRecordsRaw(GetRecordsRequest)}, {@link
 * com.gpudb.GPUdb#deleteRecords(DeleteRecordsRequest)}, {@link com.gpudb.GPUdb#updateRecordsRaw(RawUpdateRecordsRequest)}) when
 * using expressions containing equality or relational operators on indexed columns. This only applies to tables.
 * <br />
 * <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Setting the time-to-live (TTL). This can be applied to tables, views, or collections.  When
 * applied to collections, every table & view within the collection will have its TTL set to the given value.
 * <br />
 * <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Making a table protected or not. Protected tables have their TTLs set to not automatically
 * expire. This can be applied to tables, views, and collections.
 * <br />
 * <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Allowing homogeneous tables within a collection.
 */
public class AlterTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("value").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Modification operation to be applied Values: create_index, delete_index, allow_homogeneous_tables, protected, ttl,
     * add_column, delete_column, change_column, rename_table.
     * <br />
     * <br />A set of string constants for the parameter {@code action}.
     */
    public static final class Action {

        /**
         * Creates an index on the column name specified in {@code value}. If this column is already indexed, an error will be
         * returned.
         */
        public static final String CREATE_INDEX = "create_index";

        /**
         * Deletes an existing index on the column name specified in {@code value}. If this column does not have indexing turned on,
         * an error will be returned.
         */
        public static final String DELETE_INDEX = "delete_index";

        /**
         * Sets whether homogeneous tables are allowed in the given collection. This action is only valid if {@code tableName} is a
         * collection. The {@code value} must be either 'true' or 'false'.
         */
        public static final String ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

        /**
         * Sets whether the given {@code tableName} should be protected or not. The {@code value} must be either 'true' or 'false'.
         */
        public static final String PROTECTED = "protected";

        /**
         * Sets the TTL of the table, view, or collection specified in {@code tableName}. The {@code value} must be the desired TTL
         * in minutes.
         */
        public static final String TTL = "ttl";

        /**
         * Add a column {@code value} to the table. set the column properties in options
         */
        public static final String ADD_COLUMN = "add_column";

        /**
         * Delete a column {@code value} from the table
         */
        public static final String DELETE_COLUMN = "delete_column";

        /**
         * Change properties of a column {@code value} in the table. set the column properties in options
         */
        public static final String CHANGE_COLUMN = "change_column";

        /**
         * Rename a table {@code value}.
         */
        public static final String RENAME_TABLE = "rename_table";

        private Action() {  }
    }


    /**
     * Optional parameters.
     * <br /><ul>
     * <br />  <li> column_default_value: when adding a column: set a default value, for existing data.
     * <br />  <li> column_properties: when adding or changing a column: set the column properties (strings, separated by a comma:
     * data, store_only, text_search, char8, int8 etc).
     * <br />  <li> column_type: when adding or changing a column: set the column type (strings, separated by a comma: int, double,
     * string, null etc).
     * <br />  <li> validate_change_column: Validate the type change before applying column_change request. Default is true (if
     * option is missing). If True, then validate all values. A value too large (or too long) for the new type will prevent any
     * change. If False, then when a value is too large or long, it will be truncated. Values: true, false.
     * <br />
     * <br />  <li> copy_values_from_column: when adding or changing a column: enter column name - from where to copy values.
     * <br />  <li> rename_column: new column name (using change_column).
     * <br /></ul>
     * <br />A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * when adding a column: set a default value, for existing data.
         */
        public static final String COLUMN_DEFAULT_VALUE = "column_default_value";

        /**
         * when adding or changing a column: set the column properties (strings, separated by a comma: data, store_only,
         * text_search, char8, int8 etc).
         */
        public static final String COLUMN_PROPERTIES = "column_properties";

        /**
         * when adding or changing a column: set the column type (strings, separated by a comma: int, double, string, null etc).
         */
        public static final String COLUMN_TYPE = "column_type";

        /**
         * Validate the type change before applying column_change request. Default is true (if option is missing). If True, then
         * validate all values. A value too large (or too long) for the new type will prevent any change. If False, then when a
         * value is too large or long, it will be truncated. Values: true, false.
         * <br />
         */
        public static final String VALIDATE_CHANGE_COLUMN = "validate_change_column";

        /**
         * true
         */
        public static final String TRUE = "true";

        /**
         * false
         */
        public static final String FALSE = "false";

        /**
         * when adding or changing a column: enter column name - from where to copy values.
         */
        public static final String COPY_VALUES_FROM_COLUMN = "copy_values_from_column";

        /**
         * new column name (using change_column).
         */
        public static final String RENAME_COLUMN = "rename_column";

        private Options() {  }
    }

    private String tableName;
    private String action;
    private String value;
    private Map<String, String> options;


    /**
     * Constructs an AlterTableRequest object with default parameters.
     */
    public AlterTableRequest() {
        tableName = "";
        action = "";
        value = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterTableRequest object with the specified parameters.
     * 
     * @param tableName  Table on which the operation will be performed. Must be an existing table, view, or collection.
     * @param action  Modification operation to be applied Values: create_index, delete_index, allow_homogeneous_tables, protected,
     *                ttl, add_column, delete_column, change_column, rename_table.
     * @param value  The value of the modification. May be a column name, 'true' or 'false', or a TTL depending on {@code action}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> column_default_value: when adding a column: set a default value, for existing data.
     *                         <li> column_properties: when adding or changing a column: set the column properties (strings,
     *                 separated by a comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> column_type: when adding or changing a column: set the column type (strings, separated by a
     *                 comma: int, double, string, null etc).
     *                         <li> validate_change_column: Validate the type change before applying column_change request. Default
     *                 is true (if option is missing). If True, then validate all values. A value too large (or too long) for the
     *                 new type will prevent any change. If False, then when a value is too large or long, it will be truncated.
     *                 Values: true, false.
     *                         <li> copy_values_from_column: when adding or changing a column: enter column name - from where to
     *                 copy values.
     *                         <li> rename_column: new column name (using change_column).
     *                 </ul>
     * 
     */
    public AlterTableRequest(String tableName, String action, String value, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.action = (action == null) ? "" : action;
        this.value = (value == null) ? "" : value;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Table on which the operation will be performed. Must be an existing table, view, or collection.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Table on which the operation will be performed. Must be an existing table, view, or collection.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Modification operation to be applied Values: create_index, delete_index, allow_homogeneous_tables, protected, ttl,
     *         add_column, delete_column, change_column, rename_table.
     * 
     */
    public String getAction() {
        return action;
    }

    /**
     * 
     * @param action  Modification operation to be applied Values: create_index, delete_index, allow_homogeneous_tables, protected,
     *                ttl, add_column, delete_column, change_column, rename_table.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    /**
     * 
     * @return The value of the modification. May be a column name, 'true' or 'false', or a TTL depending on {@code action}.
     * 
     */
    public String getValue() {
        return value;
    }

    /**
     * 
     * @param value  The value of the modification. May be a column name, 'true' or 'false', or a TTL depending on {@code action}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setValue(String value) {
        this.value = (value == null) ? "" : value;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> column_default_value: when adding a column: set a default value, for existing data.
     *                 <li> column_properties: when adding or changing a column: set the column properties (strings, separated by a
     *         comma: data, store_only, text_search, char8, int8 etc).
     *                 <li> column_type: when adding or changing a column: set the column type (strings, separated by a comma: int,
     *         double, string, null etc).
     *                 <li> validate_change_column: Validate the type change before applying column_change request. Default is true
     *         (if option is missing). If True, then validate all values. A value too large (or too long) for the new type will
     *         prevent any change. If False, then when a value is too large or long, it will be truncated. Values: true, false.
     *                 <li> copy_values_from_column: when adding or changing a column: enter column name - from where to copy
     *         values.
     *                 <li> rename_column: new column name (using change_column).
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> column_default_value: when adding a column: set a default value, for existing data.
     *                         <li> column_properties: when adding or changing a column: set the column properties (strings,
     *                 separated by a comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> column_type: when adding or changing a column: set the column type (strings, separated by a
     *                 comma: int, double, string, null etc).
     *                         <li> validate_change_column: Validate the type change before applying column_change request. Default
     *                 is true (if option is missing). If True, then validate all values. A value too large (or too long) for the
     *                 new type will prevent any change. If False, then when a value is too large or long, it will be truncated.
     *                 Values: true, false.
     *                         <li> copy_values_from_column: when adding or changing a column: enter column name - from where to
     *                 copy values.
     *                         <li> rename_column: new column name (using change_column).
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.action;

            case 2:
                return this.value;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.value = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTableRequest that = (AlterTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.action.equals( that.action )
                 && this.value.equals( that.value )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "value" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.value ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.value.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
