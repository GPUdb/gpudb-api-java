/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createJoinTable(CreateJoinTableRequest)}.
 * <p>
 * Creates a joint_table which is a list of tables and aliases for those
 * tables.
 */
public class CreateJoinTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateJoinTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("joinTableName").type().stringType().noDefault()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("aliases").type().array().items().stringType().noDefault()
                .name("expression").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * The maximum number of tables in a joined table that can be accessed
         * by a query and are not equated by a foreign-key to primary-key
         * equality predicate
         */
        public static final String MAX_QUERY_DIMENSIONS = "max_query_dimensions";

        private Options() {  }
    }

    private String joinTableName;
    private List<String> tableNames;
    private List<String> aliases;
    private String expression;
    private Map<String, String> options;


    /**
     * Constructs a CreateJoinTableRequest object with default parameters.
     */
    public CreateJoinTableRequest() {
        joinTableName = "";
        tableNames = new ArrayList<>();
        aliases = new ArrayList<>();
        expression = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateJoinTableRequest object with the specified
     * parameters.
     * 
     * @param joinTableName  Name of the join_table to be created. Must not be
     *                       the name of a currently existing GPUdb table or
     *                       join_table. Cannot be an empty string.
     * @param tableNames  The list of table names making up the joined set.
     *                    Corresponds to SQL statement from clause
     * @param aliases  The list of aliases for each of the corresponding
     *                 tables.
     * @param expression  An optional expression GPUdb uses to filter the join-
     *                    table being created.  Corresponds to SQL select
     *                    statement where clause. For details see <a
     *                    href="../../../../../../concepts/index.html#expressions"
     *                    target="_top">concepts</a>.
     * @param options  Optional parameters.
     * 
     */
    public CreateJoinTableRequest(String joinTableName, List<String> tableNames, List<String> aliases, String expression, Map<String, String> options) {
        this.joinTableName = (joinTableName == null) ? "" : joinTableName;
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.aliases = (aliases == null) ? new ArrayList<String>() : aliases;
        this.expression = (expression == null) ? "" : expression;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the join_table to be created. Must not be the name of a
     *         currently existing GPUdb table or join_table. Cannot be an empty
     *         string.
     * 
     */
    public String getJoinTableName() {
        return joinTableName;
    }

    /**
     * 
     * @param joinTableName  Name of the join_table to be created. Must not be
     *                       the name of a currently existing GPUdb table or
     *                       join_table. Cannot be an empty string.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateJoinTableRequest setJoinTableName(String joinTableName) {
        this.joinTableName = (joinTableName == null) ? "" : joinTableName;
        return this;
    }

    /**
     * 
     * @return The list of table names making up the joined set.  Corresponds
     *         to SQL statement from clause
     * 
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * 
     * @param tableNames  The list of table names making up the joined set.
     *                    Corresponds to SQL statement from clause
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateJoinTableRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * 
     * @return The list of aliases for each of the corresponding tables.
     * 
     */
    public List<String> getAliases() {
        return aliases;
    }

    /**
     * 
     * @param aliases  The list of aliases for each of the corresponding
     *                 tables.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateJoinTableRequest setAliases(List<String> aliases) {
        this.aliases = (aliases == null) ? new ArrayList<String>() : aliases;
        return this;
    }

    /**
     * 
     * @return An optional expression GPUdb uses to filter the join-table being
     *         created.  Corresponds to SQL select statement where clause. For
     *         details see <a
     *         href="../../../../../../concepts/index.html#expressions"
     *         target="_top">concepts</a>.
     * 
     */
    public String getExpression() {
        return expression;
    }

    /**
     * 
     * @param expression  An optional expression GPUdb uses to filter the join-
     *                    table being created.  Corresponds to SQL select
     *                    statement where clause. For details see <a
     *                    href="../../../../../../concepts/index.html#expressions"
     *                    target="_top">concepts</a>.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateJoinTableRequest setExpression(String expression) {
        this.expression = (expression == null) ? "" : expression;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateJoinTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.joinTableName;

            case 1:
                return this.tableNames;

            case 2:
                return this.aliases;

            case 3:
                return this.expression;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.joinTableName = (String)value;
                break;

            case 1:
                this.tableNames = (List<String>)value;
                break;

            case 2:
                this.aliases = (List<String>)value;
                break;

            case 3:
                this.expression = (String)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateJoinTableRequest that = (CreateJoinTableRequest)obj;

        return ( this.joinTableName.equals( that.joinTableName )
                 && this.tableNames.equals( that.tableNames )
                 && this.aliases.equals( that.aliases )
                 && this.expression.equals( that.expression )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "joinTableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.joinTableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "aliases" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.aliases ) );
        builder.append( ", " );
        builder.append( gd.toString( "expression" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.expression ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.joinTableName.hashCode();
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.aliases.hashCode();
        hashCode = (31 * hashCode) + this.expression.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
