/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link com.gpudb.GPUdb#alterSystemProperties(AlterSystemPropertiesRequest)}.
 * <br />
 * <br />The alter_system_properties endpoint is primarily used to simplify the testing of the system and is not expected to be used
 * during normal execution.  Commands are given through the properties_update_map whose keys are commands and values are strings
 * representing integer values (for example '8000') or boolean values ('true' or 'false').
 */
public class AlterSystemPropertiesRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterSystemPropertiesRequest")
            .namespace("com.gpudb")
            .fields()
                .name("propertyUpdatesMap").type().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Map containing the properties of the system to be updated. Error if empty.
     * <br /><ul>
     * <br />  <li> sm_omp_threads: Set the number of sm_omp_threads to the specified integer value.
     * <br />  <li> kernel_omp_threads: Set the number of kernel_omp_threads to the specified integer value.
     * <br />  <li> concurrent_kernel_execution: Enables concurrent kernel execution if the value is 'true' and disables it if the
     * value is 'false'.
     * <br />  <li> chunk_size: Sets the chunk size of all new sets to the specified integer value.
     * <br />  <li> flush_to_disk: Flushes any changes to any tables to the persistent store.  These changes include updates to the
     * vector store, object store, and text search store, Value string is ignored
     * <br />  <li> clear_cache: Clears cached results.  Useful to allow repeated timing of endpoints. Value string is ignored
     * <br />  <li> communicator_test: Invoke the communicator test and report timing results. Value string is is a comma separated
     * list of <key>=<value> expressions.  Expressions are: num_transactions = <num> where <num> is the number of request reply
     * transactions to invoke per test; message_size = <bytes> where bytes is the size of the messages to send in bytes;
     * check_values = <enabled> where if enabled is true the value of the messages received are verified.
     * <br />  <li> set_message_timers_enabled: Enables the communicator test to collect additional timing statistics when the value
     * string is 'true'. Disables the collection when the value string is 'false'
     * <br />  <li> bulk_add_test: Invoke the bulk_add test and report timing results. Value string is ignored.
     * <br />  <li> network_speed: Invoke the network speed test and report timing results. Value string is a comma separated list
     * of <key>=<value> expressions.  Expressions are: seconds = <time> where time is the time in seconds to run the test; data_size
     * = <size> where <size> is the size in bytes of the block to be transferred; threads = <number of threads>; to_ranks = <comma
     * separated list of ranks> where the list of ranks is the ranks that rank 0 will send data to and get data from. If to_ranks is
     * unspecified then all worker ranks are used.
     * <br />  <li> request_timeout: Number of minutes after which /filter/* and /aggregate/* queries will timeout.
     * <br />  <li> max_get_records_size: set max_get_records_size. default 20000
     * <br /></ul>
     * <br />A set of string constants for the parameter {@code propertyUpdatesMap}.
     */
    public static final class PropertyUpdatesMap {

        /**
         * Set the number of sm_omp_threads to the specified integer value.
         */
        public static final String SM_OMP_THREADS = "sm_omp_threads";

        /**
         * Set the number of kernel_omp_threads to the specified integer value.
         */
        public static final String KERNEL_OMP_THREADS = "kernel_omp_threads";

        /**
         * Enables concurrent kernel execution if the value is 'true' and disables it if the value is 'false'.
         */
        public static final String CONCURRENT_KERNEL_EXECUTION = "concurrent_kernel_execution";

        /**
         * Sets the chunk size of all new sets to the specified integer value.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Flushes any changes to any tables to the persistent store.  These changes include updates to the vector store, object
         * store, and text search store, Value string is ignored
         */
        public static final String FLUSH_TO_DISK = "flush_to_disk";

        /**
         * Clears cached results.  Useful to allow repeated timing of endpoints. Value string is ignored
         */
        public static final String CLEAR_CACHE = "clear_cache";

        /**
         * Invoke the communicator test and report timing results. Value string is is a comma separated list of <key>=<value>
         * expressions.  Expressions are: num_transactions = <num> where <num> is the number of request reply transactions to invoke
         * per test; message_size = <bytes> where bytes is the size of the messages to send in bytes; check_values = <enabled> where
         * if enabled is true the value of the messages received are verified.
         */
        public static final String COMMUNICATOR_TEST = "communicator_test";

        /**
         * Enables the communicator test to collect additional timing statistics when the value string is 'true'. Disables the
         * collection when the value string is 'false'
         */
        public static final String SET_MESSAGE_TIMERS_ENABLED = "set_message_timers_enabled";

        /**
         * Invoke the bulk_add test and report timing results. Value string is ignored.
         */
        public static final String BULK_ADD_TEST = "bulk_add_test";

        /**
         * Invoke the network speed test and report timing results. Value string is a comma separated list of <key>=<value>
         * expressions.  Expressions are: seconds = <time> where time is the time in seconds to run the test; data_size = <size>
         * where <size> is the size in bytes of the block to be transferred; threads = <number of threads>; to_ranks = <comma
         * separated list of ranks> where the list of ranks is the ranks that rank 0 will send data to and get data from. If
         * to_ranks is unspecified then all worker ranks are used.
         */
        public static final String NETWORK_SPEED = "network_speed";

        /**
         * Number of minutes after which /filter/* and /aggregate/* queries will timeout.
         */
        public static final String REQUEST_TIMEOUT = "request_timeout";

        /**
         * set max_get_records_size. default 20000
         */
        public static final String MAX_GET_RECORDS_SIZE = "max_get_records_size";

        private PropertyUpdatesMap() {  }
    }

    private Map<String, String> propertyUpdatesMap;
    private Map<String, String> options;


    /**
     * Constructs an AlterSystemPropertiesRequest object with default parameters.
     */
    public AlterSystemPropertiesRequest() {
        propertyUpdatesMap = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterSystemPropertiesRequest object with the specified parameters.
     * 
     * @param propertyUpdatesMap  Map containing the properties of the system to be updated. Error if empty.
     *                            <ul>
     *                                    <li> sm_omp_threads: Set the number of sm_omp_threads to the specified integer value.
     *                                    <li> kernel_omp_threads: Set the number of kernel_omp_threads to the specified integer
     *                            value.
     *                                    <li> concurrent_kernel_execution: Enables concurrent kernel execution if the value is
     *                            'true' and disables it if the value is 'false'.
     *                                    <li> chunk_size: Sets the chunk size of all new sets to the specified integer value.
     *                                    <li> flush_to_disk: Flushes any changes to any tables to the persistent store.  These
     *                            changes include updates to the vector store, object store, and text search store, Value string is
     *                            ignored
     *                                    <li> clear_cache: Clears cached results.  Useful to allow repeated timing of endpoints.
     *                            Value string is ignored
     *                                    <li> communicator_test: Invoke the communicator test and report timing results. Value
     *                            string is is a comma separated list of <key>=<value> expressions.  Expressions are:
     *                            num_transactions = <num> where <num> is the number of request reply transactions to invoke per
     *                            test; message_size = <bytes> where bytes is the size of the messages to send in bytes;
     *                            check_values = <enabled> where if enabled is true the value of the messages received are verified.
     *                                    <li> set_message_timers_enabled: Enables the communicator test to collect additional
     *                            timing statistics when the value string is 'true'. Disables the collection when the value string
     *                            is 'false'
     *                                    <li> bulk_add_test: Invoke the bulk_add test and report timing results. Value string is
     *                            ignored.
     *                                    <li> network_speed: Invoke the network speed test and report timing results. Value string
     *                            is a comma separated list of <key>=<value> expressions.  Expressions are: seconds = <time> where
     *                            time is the time in seconds to run the test; data_size = <size> where <size> is the size in bytes
     *                            of the block to be transferred; threads = <number of threads>; to_ranks = <comma separated list of
     *                            ranks> where the list of ranks is the ranks that rank 0 will send data to and get data from. If
     *                            to_ranks is unspecified then all worker ranks are used.
     *                                    <li> request_timeout: Number of minutes after which /filter/* and /aggregate/* queries
     *                            will timeout.
     *                                    <li> max_get_records_size: set max_get_records_size. default 20000
     *                            </ul>
     * @param options  Optional parameters.
     * 
     */
    public AlterSystemPropertiesRequest(Map<String, String> propertyUpdatesMap, Map<String, String> options) {
        this.propertyUpdatesMap = (propertyUpdatesMap == null) ? new LinkedHashMap<String, String>() : propertyUpdatesMap;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Map containing the properties of the system to be updated. Error if empty.
     *         <ul>
     *                 <li> sm_omp_threads: Set the number of sm_omp_threads to the specified integer value.
     *                 <li> kernel_omp_threads: Set the number of kernel_omp_threads to the specified integer value.
     *                 <li> concurrent_kernel_execution: Enables concurrent kernel execution if the value is 'true' and disables it
     *         if the value is 'false'.
     *                 <li> chunk_size: Sets the chunk size of all new sets to the specified integer value.
     *                 <li> flush_to_disk: Flushes any changes to any tables to the persistent store.  These changes include updates
     *         to the vector store, object store, and text search store, Value string is ignored
     *                 <li> clear_cache: Clears cached results.  Useful to allow repeated timing of endpoints. Value string is
     *         ignored
     *                 <li> communicator_test: Invoke the communicator test and report timing results. Value string is is a comma
     *         separated list of <key>=<value> expressions.  Expressions are: num_transactions = <num> where <num> is the number of
     *         request reply transactions to invoke per test; message_size = <bytes> where bytes is the size of the messages to send
     *         in bytes; check_values = <enabled> where if enabled is true the value of the messages received are verified.
     *                 <li> set_message_timers_enabled: Enables the communicator test to collect additional timing statistics when
     *         the value string is 'true'. Disables the collection when the value string is 'false'
     *                 <li> bulk_add_test: Invoke the bulk_add test and report timing results. Value string is ignored.
     *                 <li> network_speed: Invoke the network speed test and report timing results. Value string is a comma
     *         separated list of <key>=<value> expressions.  Expressions are: seconds = <time> where time is the time in seconds to
     *         run the test; data_size = <size> where <size> is the size in bytes of the block to be transferred; threads = <number
     *         of threads>; to_ranks = <comma separated list of ranks> where the list of ranks is the ranks that rank 0 will send
     *         data to and get data from. If to_ranks is unspecified then all worker ranks are used.
     *                 <li> request_timeout: Number of minutes after which /filter/* and /aggregate/* queries will timeout.
     *                 <li> max_get_records_size: set max_get_records_size. default 20000
     *         </ul>
     * 
     */
    public Map<String, String> getPropertyUpdatesMap() {
        return propertyUpdatesMap;
    }

    /**
     * 
     * @param propertyUpdatesMap  Map containing the properties of the system to be updated. Error if empty.
     *                            <ul>
     *                                    <li> sm_omp_threads: Set the number of sm_omp_threads to the specified integer value.
     *                                    <li> kernel_omp_threads: Set the number of kernel_omp_threads to the specified integer
     *                            value.
     *                                    <li> concurrent_kernel_execution: Enables concurrent kernel execution if the value is
     *                            'true' and disables it if the value is 'false'.
     *                                    <li> chunk_size: Sets the chunk size of all new sets to the specified integer value.
     *                                    <li> flush_to_disk: Flushes any changes to any tables to the persistent store.  These
     *                            changes include updates to the vector store, object store, and text search store, Value string is
     *                            ignored
     *                                    <li> clear_cache: Clears cached results.  Useful to allow repeated timing of endpoints.
     *                            Value string is ignored
     *                                    <li> communicator_test: Invoke the communicator test and report timing results. Value
     *                            string is is a comma separated list of <key>=<value> expressions.  Expressions are:
     *                            num_transactions = <num> where <num> is the number of request reply transactions to invoke per
     *                            test; message_size = <bytes> where bytes is the size of the messages to send in bytes;
     *                            check_values = <enabled> where if enabled is true the value of the messages received are verified.
     *                                    <li> set_message_timers_enabled: Enables the communicator test to collect additional
     *                            timing statistics when the value string is 'true'. Disables the collection when the value string
     *                            is 'false'
     *                                    <li> bulk_add_test: Invoke the bulk_add test and report timing results. Value string is
     *                            ignored.
     *                                    <li> network_speed: Invoke the network speed test and report timing results. Value string
     *                            is a comma separated list of <key>=<value> expressions.  Expressions are: seconds = <time> where
     *                            time is the time in seconds to run the test; data_size = <size> where <size> is the size in bytes
     *                            of the block to be transferred; threads = <number of threads>; to_ranks = <comma separated list of
     *                            ranks> where the list of ranks is the ranks that rank 0 will send data to and get data from. If
     *                            to_ranks is unspecified then all worker ranks are used.
     *                                    <li> request_timeout: Number of minutes after which /filter/* and /aggregate/* queries
     *                            will timeout.
     *                                    <li> max_get_records_size: set max_get_records_size. default 20000
     *                            </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterSystemPropertiesRequest setPropertyUpdatesMap(Map<String, String> propertyUpdatesMap) {
        this.propertyUpdatesMap = (propertyUpdatesMap == null) ? new LinkedHashMap<String, String>() : propertyUpdatesMap;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterSystemPropertiesRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.propertyUpdatesMap;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.propertyUpdatesMap = (Map<String, String>)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterSystemPropertiesRequest that = (AlterSystemPropertiesRequest)obj;

        return ( this.propertyUpdatesMap.equals( that.propertyUpdatesMap )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "propertyUpdatesMap" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.propertyUpdatesMap ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.propertyUpdatesMap.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
