
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class ExecuteProcRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("ExecuteProcRequest")
            .namespace("com.gpudb")
            .fields()
                .name("procName").type().stringType().noDefault()
                .name("params").type().map().values().stringType().noDefault()
                .name("binParams").type().map().values().bytesType().noDefault()
                .name("inputTableNames").type().array().items().stringType().noDefault()
                .name("inputColumnNames").type().map().values().array().items().stringType().noDefault()
                .name("outputTableNames").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    private String procName;
    private Map<String, String> params;
    private Map<String, ByteBuffer> binParams;
    private List<String> inputTableNames;
    private Map<String, List<String>> inputColumnNames;
    private List<String> outputTableNames;
    private Map<String, String> options;


    public ExecuteProcRequest() {
        procName = "";
        params = new LinkedHashMap<>();
        binParams = new LinkedHashMap<>();
        inputTableNames = new ArrayList<>();
        inputColumnNames = new LinkedHashMap<>();
        outputTableNames = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    public ExecuteProcRequest(String procName, Map<String, String> params, Map<String, ByteBuffer> binParams, List<String> inputTableNames, Map<String, List<String>> inputColumnNames, List<String> outputTableNames, Map<String, String> options) {
        this.procName = (procName == null) ? "" : procName;
        this.params = (params == null) ? new LinkedHashMap<String, String>() : params;
        this.binParams = (binParams == null) ? new LinkedHashMap<String, ByteBuffer>() : binParams;
        this.inputTableNames = (inputTableNames == null) ? new ArrayList<String>() : inputTableNames;
        this.inputColumnNames = (inputColumnNames == null) ? new LinkedHashMap<String, List<String>>() : inputColumnNames;
        this.outputTableNames = (outputTableNames == null) ? new ArrayList<String>() : outputTableNames;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public String getProcName() {
        return procName;
    }

    public ExecuteProcRequest setProcName(String procName) {
        this.procName = (procName == null) ? "" : procName;
        return this;
    }

    public Map<String, String> getParams() {
        return params;
    }

    public ExecuteProcRequest setParams(Map<String, String> params) {
        this.params = (params == null) ? new LinkedHashMap<String, String>() : params;
        return this;
    }

    public Map<String, ByteBuffer> getBinParams() {
        return binParams;
    }

    public ExecuteProcRequest setBinParams(Map<String, ByteBuffer> binParams) {
        this.binParams = (binParams == null) ? new LinkedHashMap<String, ByteBuffer>() : binParams;
        return this;
    }

    public List<String> getInputTableNames() {
        return inputTableNames;
    }

    public ExecuteProcRequest setInputTableNames(List<String> inputTableNames) {
        this.inputTableNames = (inputTableNames == null) ? new ArrayList<String>() : inputTableNames;
        return this;
    }

    public Map<String, List<String>> getInputColumnNames() {
        return inputColumnNames;
    }

    public ExecuteProcRequest setInputColumnNames(Map<String, List<String>> inputColumnNames) {
        this.inputColumnNames = (inputColumnNames == null) ? new LinkedHashMap<String, List<String>>() : inputColumnNames;
        return this;
    }

    public List<String> getOutputTableNames() {
        return outputTableNames;
    }

    public ExecuteProcRequest setOutputTableNames(List<String> outputTableNames) {
        this.outputTableNames = (outputTableNames == null) ? new ArrayList<String>() : outputTableNames;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public ExecuteProcRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.procName;

            case 1:
                return this.params;

            case 2:
                return this.binParams;

            case 3:
                return this.inputTableNames;

            case 4:
                return this.inputColumnNames;

            case 5:
                return this.outputTableNames;

            case 6:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.procName = (String)value;
                break;

            case 1:
                this.params = (Map<String, String>)value;
                break;

            case 2:
                this.binParams = (Map<String, ByteBuffer>)value;
                break;

            case 3:
                this.inputTableNames = (List<String>)value;
                break;

            case 4:
                this.inputColumnNames = (Map<String, List<String>>)value;
                break;

            case 5:
                this.outputTableNames = (List<String>)value;
                break;

            case 6:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ExecuteProcRequest that = (ExecuteProcRequest)obj;

        return ( this.procName.equals( that.procName )
                 && this.params.equals( that.params )
                 && this.binParams.equals( that.binParams )
                 && this.inputTableNames.equals( that.inputTableNames )
                 && this.inputColumnNames.equals( that.inputColumnNames )
                 && this.outputTableNames.equals( that.outputTableNames )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "procName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.procName ) );
        builder.append( ", " );
        builder.append( gd.toString( "params" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.params ) );
        builder.append( ", " );
        builder.append( gd.toString( "binParams" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.binParams ) );
        builder.append( ", " );
        builder.append( gd.toString( "inputTableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inputTableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "inputColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inputColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "outputTableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.outputTableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.procName.hashCode();
        hashCode = (31 * hashCode) + this.params.hashCode();
        hashCode = (31 * hashCode) + this.binParams.hashCode();
        hashCode = (31 * hashCode) + this.inputTableNames.hashCode();
        hashCode = (31 * hashCode) + this.inputColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.outputTableNames.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
