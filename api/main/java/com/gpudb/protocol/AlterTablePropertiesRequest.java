/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterTableProperties(AlterTablePropertiesRequest)}.
 * <p>
 * Updates properties for a group of specified tables. The user can change the
 * protected-ness of the tables and allow or disallow duplicate child tables if
 * they are all collections.
 */
public class AlterTablePropertiesRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTablePropertiesRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("propertiesMap").type().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Map containing the properties of the tables to be updated. Only one map
     * can be specified per function call so the changes to the tables will be
     * identical.
     * A set of string constants for the parameter {@code propertiesMap}.
     */
    public static final class PropertiesMap {

        /**
         * Whether homogeneous tables are allowed.  This option is valid only
         * for tables registered as collections. A collection that allow
         * homogeneous tables can have multiple tables of the same record type.
         * If one or more specified tables are not collections, GPUdb will
         * throw an error.
         */
        public static final String ALLOW_HOMOGENOUS_TABLES = "allow_homogenous_tables";
        public static final String FALSE = "false";
        public static final String TRUE = "true";

        /**
         * 'true' turns all the specified tables into protected tables and
         * 'false' clears that setting for all of them.
         */
        public static final String PROTECTED = "protected";

        /**
         * Updates the time-to-live (TTL) setting for all specified tables.
         * The unit of the TTL is minutes.
         */
        public static final String TABLE_TTL = "table_ttl";

        private PropertiesMap() {  }
    }

    private List<String> tableNames;
    private Map<String, String> propertiesMap;
    private Map<String, String> options;


    /**
     * Constructs an AlterTablePropertiesRequest object with default
     * parameters.
     */
    public AlterTablePropertiesRequest() {
        tableNames = new ArrayList<>();
        propertiesMap = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterTablePropertiesRequest object with the specified
     * parameters.
     * 
     * @param tableNames  Names of the tables whose properties will be updated.
     *                    All provided must exist in GPUdb or an error will be
     *                    returned.
     * @param propertiesMap  Map containing the properties of the tables to be
     *                       updated. Only one map can be specified per
     *                       function call so the changes to the tables will be
     *                       identical.
     * @param options  Optional parameters.
     * 
     */
    public AlterTablePropertiesRequest(List<String> tableNames, Map<String, String> propertiesMap, Map<String, String> options) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.propertiesMap = (propertiesMap == null) ? new LinkedHashMap<String, String>() : propertiesMap;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Names of the tables whose properties will be updated. All
     *         provided must exist in GPUdb or an error will be returned.
     * 
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * 
     * @param tableNames  Names of the tables whose properties will be updated.
     *                    All provided must exist in GPUdb or an error will be
     *                    returned.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTablePropertiesRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * 
     * @return Map containing the properties of the tables to be updated. Only
     *         one map can be specified per function call so the changes to the
     *         tables will be identical.
     * 
     */
    public Map<String, String> getPropertiesMap() {
        return propertiesMap;
    }

    /**
     * 
     * @param propertiesMap  Map containing the properties of the tables to be
     *                       updated. Only one map can be specified per
     *                       function call so the changes to the tables will be
     *                       identical.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTablePropertiesRequest setPropertiesMap(Map<String, String> propertiesMap) {
        this.propertiesMap = (propertiesMap == null) ? new LinkedHashMap<String, String>() : propertiesMap;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTablePropertiesRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.propertiesMap;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>)value;
                break;

            case 1:
                this.propertiesMap = (Map<String, String>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTablePropertiesRequest that = (AlterTablePropertiesRequest)obj;

        return ( this.tableNames.equals( that.tableNames )
                 && this.propertiesMap.equals( that.propertiesMap )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "propertiesMap" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.propertiesMap ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.propertiesMap.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
