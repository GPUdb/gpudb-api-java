
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class CreateProcRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("CreateProcRequest")
            .namespace("com.gpudb")
            .fields()
                .name("procName").type().stringType().noDefault()
                .name("files").type().map().values().bytesType().noDefault()
                .name("command").type().stringType().noDefault()
                .name("args").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    public static final class Options {

        public static final String NONDISTRIBUTED = "nondistributed";

        public static final String TRUE = "true";

        public static final String FALSE = "false";


        private Options() {  }
    }


    private String procName;
    private Map<String, ByteBuffer> files;
    private String command;
    private List<String> args;
    private Map<String, String> options;


    public CreateProcRequest() {
        procName = "";
        files = new LinkedHashMap<>();
        command = "";
        args = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    public CreateProcRequest(String procName, Map<String, ByteBuffer> files, String command, List<String> args, Map<String, String> options) {
        this.procName = (procName == null) ? "" : procName;
        this.files = (files == null) ? new LinkedHashMap<String, ByteBuffer>() : files;
        this.command = (command == null) ? "" : command;
        this.args = (args == null) ? new ArrayList<String>() : args;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public String getProcName() {
        return procName;
    }

    public CreateProcRequest setProcName(String procName) {
        this.procName = (procName == null) ? "" : procName;
        return this;
    }

    public Map<String, ByteBuffer> getFiles() {
        return files;
    }

    public CreateProcRequest setFiles(Map<String, ByteBuffer> files) {
        this.files = (files == null) ? new LinkedHashMap<String, ByteBuffer>() : files;
        return this;
    }

    public String getCommand() {
        return command;
    }

    public CreateProcRequest setCommand(String command) {
        this.command = (command == null) ? "" : command;
        return this;
    }

    public List<String> getArgs() {
        return args;
    }

    public CreateProcRequest setArgs(List<String> args) {
        this.args = (args == null) ? new ArrayList<String>() : args;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public CreateProcRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.procName;

            case 1:
                return this.files;

            case 2:
                return this.command;

            case 3:
                return this.args;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.procName = (String)value;
                break;

            case 1:
                this.files = (Map<String, ByteBuffer>)value;
                break;

            case 2:
                this.command = (String)value;
                break;

            case 3:
                this.args = (List<String>)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateProcRequest that = (CreateProcRequest)obj;

        return ( this.procName.equals( that.procName )
                 && this.files.equals( that.files )
                 && this.command.equals( that.command )
                 && this.args.equals( that.args )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "procName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.procName ) );
        builder.append( ", " );
        builder.append( gd.toString( "files" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.files ) );
        builder.append( ", " );
        builder.append( gd.toString( "command" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.command ) );
        builder.append( ", " );
        builder.append( gd.toString( "args" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.args ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.procName.hashCode();
        hashCode = (31 * hashCode) + this.files.hashCode();
        hashCode = (31 * hashCode) + this.command.hashCode();
        hashCode = (31 * hashCode) + this.args.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
