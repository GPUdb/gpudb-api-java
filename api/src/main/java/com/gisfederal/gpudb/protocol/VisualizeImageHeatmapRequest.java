/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gisfederal.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gisfederal.gpudb.GPUdb#visualizeImageHeatmap(VisualizeImageHeatmapRequest)}.
 * <p>
 * Generates rasterized heatmap image tiles for an area of interest using the
 * given tables and the provided parameters.
 * <p>
 * All color values must be in the format RRGGBB or AARRGGBB (to specify the
 * alpha value).
 * <p>

 * The heatmap image is contained in the {@code imageData} field.
 */
public class VisualizeImageHeatmapRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeImageHeatmapRequest")
            .namespace("com.gisfederal.gpudb")
            .fields()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("xColumnName").type().stringType().noDefault()
                .name("yColumnName").type().stringType().noDefault()
                .name("valueColumnName").type().stringType().noDefault()
                .name("minX").type().doubleType().noDefault()
                .name("maxX").type().doubleType().noDefault()
                .name("minY").type().doubleType().noDefault()
                .name("maxY").type().doubleType().noDefault()
                .name("width").type().intType().noDefault()
                .name("height").type().intType().noDefault()
                .name("projection").type().stringType().noDefault()
                .name("colormap").type().stringType().noDefault()
                .name("blurRadius").type().intType().noDefault()
                .name("bgColor").type().longType().noDefault()
                .name("gradientStartColor").type().longType().noDefault()
                .name("gradientEndColor").type().longType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Spatial Reference System (i.e. EPSG Code).
     * A set of string constants for the parameter {@code projection}.
     */
    public static final class Projection {
        public static final String EPSG_4326 = "EPSG:4326";
        public static final String PLATE_CARREE = "PLATE_CARREE";
        public static final String _900913 = "900913";
        public static final String EPSG_900913 = "EPSG:900913";
        public static final String _102100 = "102100";
        public static final String EPSG_102100 = "EPSG:102100";
        public static final String _3857 = "3857";
        public static final String EPSG_3857 = "EPSG:3857";
        public static final String WEB_MERCATOR = "WEB_MERCATOR";

        private Projection() {  }
    }

    private List<String> tableNames;
    private String xColumnName;
    private String yColumnName;
    private String valueColumnName;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private int width;
    private int height;
    private String projection;
    private String colormap;
    private int blurRadius;
    private long bgColor;
    private long gradientStartColor;
    private long gradientEndColor;
    private Map<String, String> options;


    /**
     * Constructs a VisualizeImageHeatmapRequest object with default
     * parameters.
     */
    public VisualizeImageHeatmapRequest() {
        tableNames = new ArrayList<>();
        xColumnName = "";
        yColumnName = "";
        valueColumnName = "";
        projection = "";
        colormap = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a VisualizeImageHeatmapRequest object with the specified
     * parameters.
     * 
     * @param tableNames  Name of the table containing the data for the various
     *                    layers to be rendered.
     * @param xColumnName  Name of the column containing the x coordinates.
     * @param yColumnName  Name of the column containing the y coordinates.
     * @param valueColumnName
     * @param minX  Lower bound for the x values.
     * @param maxX  Upper bound for the x values.
     * @param minY  Lower bound for the y values.
     * @param maxY  Upper bound for the y values.
     * @param width  Width of the generated image.
     * @param height  Height of the generated image.
     * @param projection  Spatial Reference System (i.e. EPSG Code).
     * @param colormap  Colormap for the heat map.
     * @param blurRadius  Blurring radius for the heat map.  The minimum
     *                    allowed value is 1. The maximum allowed value is 32.
     * @param bgColor  Background color of the generated image.
     * @param gradientStartColor  User defined gradient start color for the
     *                            heat map.
     * @param gradientEndColor  User defined gradient end color for the heat
     *                          map.
     * @param options  Optional parameters.
     * 
     */
    public VisualizeImageHeatmapRequest(List<String> tableNames, String xColumnName, String yColumnName, String valueColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, String colormap, int blurRadius, long bgColor, long gradientStartColor, long gradientEndColor, Map<String, String> options) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        this.valueColumnName = (valueColumnName == null) ? "" : valueColumnName;
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
        this.width = width;
        this.height = height;
        this.projection = (projection == null) ? "" : projection;
        this.colormap = (colormap == null) ? "" : colormap;
        this.blurRadius = blurRadius;
        this.bgColor = bgColor;
        this.gradientStartColor = gradientStartColor;
        this.gradientEndColor = gradientEndColor;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the table containing the data for the various layers to
     *         be rendered.
     * 
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * 
     * @param tableNames  Name of the table containing the data for the various
     *                    layers to be rendered.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * 
     * @return Name of the column containing the x coordinates.
     * 
     */
    public String getXColumnName() {
        return xColumnName;
    }

    /**
     * 
     * @param xColumnName  Name of the column containing the x coordinates.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setXColumnName(String xColumnName) {
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        return this;
    }

    /**
     * 
     * @return Name of the column containing the y coordinates.
     * 
     */
    public String getYColumnName() {
        return yColumnName;
    }

    /**
     * 
     * @param yColumnName  Name of the column containing the y coordinates.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setYColumnName(String yColumnName) {
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        return this;
    }
    public String getValueColumnName() {
        return valueColumnName;
    }

    /**
     * 
     * @param valueColumnName
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setValueColumnName(String valueColumnName) {
        this.valueColumnName = (valueColumnName == null) ? "" : valueColumnName;
        return this;
    }

    /**
     * 
     * @return Lower bound for the x values.
     * 
     */
    public double getMinX() {
        return minX;
    }

    /**
     * 
     * @param minX  Lower bound for the x values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setMinX(double minX) {
        this.minX = minX;
        return this;
    }

    /**
     * 
     * @return Upper bound for the x values.
     * 
     */
    public double getMaxX() {
        return maxX;
    }

    /**
     * 
     * @param maxX  Upper bound for the x values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setMaxX(double maxX) {
        this.maxX = maxX;
        return this;
    }

    /**
     * 
     * @return Lower bound for the y values.
     * 
     */
    public double getMinY() {
        return minY;
    }

    /**
     * 
     * @param minY  Lower bound for the y values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setMinY(double minY) {
        this.minY = minY;
        return this;
    }

    /**
     * 
     * @return Upper bound for the y values.
     * 
     */
    public double getMaxY() {
        return maxY;
    }

    /**
     * 
     * @param maxY  Upper bound for the y values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setMaxY(double maxY) {
        this.maxY = maxY;
        return this;
    }

    /**
     * 
     * @return Width of the generated image.
     * 
     */
    public int getWidth() {
        return width;
    }

    /**
     * 
     * @param width  Width of the generated image.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setWidth(int width) {
        this.width = width;
        return this;
    }

    /**
     * 
     * @return Height of the generated image.
     * 
     */
    public int getHeight() {
        return height;
    }

    /**
     * 
     * @param height  Height of the generated image.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setHeight(int height) {
        this.height = height;
        return this;
    }

    /**
     * 
     * @return Spatial Reference System (i.e. EPSG Code).
     * 
     */
    public String getProjection() {
        return projection;
    }

    /**
     * 
     * @param projection  Spatial Reference System (i.e. EPSG Code).
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setProjection(String projection) {
        this.projection = (projection == null) ? "" : projection;
        return this;
    }

    /**
     * 
     * @return Colormap for the heat map.
     * 
     */
    public String getColormap() {
        return colormap;
    }

    /**
     * 
     * @param colormap  Colormap for the heat map.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setColormap(String colormap) {
        this.colormap = (colormap == null) ? "" : colormap;
        return this;
    }

    /**
     * 
     * @return Blurring radius for the heat map.  The minimum allowed value is
     *         1. The maximum allowed value is 32.
     * 
     */
    public int getBlurRadius() {
        return blurRadius;
    }

    /**
     * 
     * @param blurRadius  Blurring radius for the heat map.  The minimum
     *                    allowed value is 1. The maximum allowed value is 32.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setBlurRadius(int blurRadius) {
        this.blurRadius = blurRadius;
        return this;
    }

    /**
     * 
     * @return Background color of the generated image.
     * 
     */
    public long getBgColor() {
        return bgColor;
    }

    /**
     * 
     * @param bgColor  Background color of the generated image.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setBgColor(long bgColor) {
        this.bgColor = bgColor;
        return this;
    }

    /**
     * 
     * @return User defined gradient start color for the heat map.
     * 
     */
    public long getGradientStartColor() {
        return gradientStartColor;
    }

    /**
     * 
     * @param gradientStartColor  User defined gradient start color for the
     *                            heat map.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setGradientStartColor(long gradientStartColor) {
        this.gradientStartColor = gradientStartColor;
        return this;
    }

    /**
     * 
     * @return User defined gradient end color for the heat map.
     * 
     */
    public long getGradientEndColor() {
        return gradientEndColor;
    }

    /**
     * 
     * @param gradientEndColor  User defined gradient end color for the heat
     *                          map.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setGradientEndColor(long gradientEndColor) {
        this.gradientEndColor = gradientEndColor;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeImageHeatmapRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.xColumnName;

            case 2:
                return this.yColumnName;

            case 3:
                return this.valueColumnName;

            case 4:
                return this.minX;

            case 5:
                return this.maxX;

            case 6:
                return this.minY;

            case 7:
                return this.maxY;

            case 8:
                return this.width;

            case 9:
                return this.height;

            case 10:
                return this.projection;

            case 11:
                return this.colormap;

            case 12:
                return this.blurRadius;

            case 13:
                return this.bgColor;

            case 14:
                return this.gradientStartColor;

            case 15:
                return this.gradientEndColor;

            case 16:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>)value;
                break;

            case 1:
                this.xColumnName = (String)value;
                break;

            case 2:
                this.yColumnName = (String)value;
                break;

            case 3:
                this.valueColumnName = (String)value;
                break;

            case 4:
                this.minX = (Double)value;
                break;

            case 5:
                this.maxX = (Double)value;
                break;

            case 6:
                this.minY = (Double)value;
                break;

            case 7:
                this.maxY = (Double)value;
                break;

            case 8:
                this.width = (Integer)value;
                break;

            case 9:
                this.height = (Integer)value;
                break;

            case 10:
                this.projection = (String)value;
                break;

            case 11:
                this.colormap = (String)value;
                break;

            case 12:
                this.blurRadius = (Integer)value;
                break;

            case 13:
                this.bgColor = (Long)value;
                break;

            case 14:
                this.gradientStartColor = (Long)value;
                break;

            case 15:
                this.gradientEndColor = (Long)value;
                break;

            case 16:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        VisualizeImageHeatmapRequest that = (VisualizeImageHeatmapRequest)obj;

        return ( this.tableNames.equals( that.tableNames )
                 && this.xColumnName.equals( that.xColumnName )
                 && this.yColumnName.equals( that.yColumnName )
                 && this.valueColumnName.equals( that.valueColumnName )
                 && ( (Double)this.minX ).equals( (Double)that.minX )
                 && ( (Double)this.maxX ).equals( (Double)that.maxX )
                 && ( (Double)this.minY ).equals( (Double)that.minY )
                 && ( (Double)this.maxY ).equals( (Double)that.maxY )
                 && ( this.width == that.width )
                 && ( this.height == that.height )
                 && this.projection.equals( that.projection )
                 && this.colormap.equals( that.colormap )
                 && ( this.blurRadius == that.blurRadius )
                 && ( this.bgColor == that.bgColor )
                 && ( this.gradientStartColor == that.gradientStartColor )
                 && ( this.gradientEndColor == that.gradientEndColor )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( gd.toString( "tableNames" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "xColumnName" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.xColumnName ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "yColumnName" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.yColumnName ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "valueColumnName" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.valueColumnName ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "minX" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.minX ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "maxX" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.maxX ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "minY" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.minY ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "maxY" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.maxY ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "width" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.width ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "height" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.height ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "projection" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.projection ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "colormap" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.colormap ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "blurRadius" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.blurRadius ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "bgColor" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.bgColor ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "gradientStartColor" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.gradientStartColor ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "gradientEndColor" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.gradientEndColor ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "options" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.options ) );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.xColumnName.hashCode();
        hashCode = (31 * hashCode) + this.yColumnName.hashCode();
        hashCode = (31 * hashCode) + this.valueColumnName.hashCode();
        hashCode = (31 * hashCode) + ((Double)this.minX).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxX).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.minY).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxY).hashCode();
        hashCode = (31 * hashCode) + this.width;
        hashCode = (31 * hashCode) + this.height;
        hashCode = (31 * hashCode) + this.projection.hashCode();
        hashCode = (31 * hashCode) + this.colormap.hashCode();
        hashCode = (31 * hashCode) + this.blurRadius;
        hashCode = (31 * hashCode) + ((Long)this.bgColor).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.gradientStartColor).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.gradientEndColor).hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
