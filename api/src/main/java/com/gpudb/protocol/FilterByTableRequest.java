/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link com.gpudb.GPUdb#filterByTable(FilterByTableRequest)}.
 * <br />
 * <br />Filters objects in one table based on objects in another table. The user must specify matching column types from the two
 * tables (i.e. the target table from which objects will be filtered and the source table based on which the filter will be
 * created); the column names need not be the same. If a {@code viewName} is specified, then the filtered objects will then be put
 * in a newly created view. The operation is synchronous, meaning that a response will not be returned until all objects are fully
 * available in the result view. The return value contains the count (i.e. the size) of the resulting view.
 */
public class FilterByTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("FilterByTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("viewName").type().stringType().noDefault()
                .name("columnName").type().stringType().noDefault()
                .name("sourceTableName").type().stringType().noDefault()
                .name("sourceTableColumnName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <br /><ul>
     * <br />  <li> filter_mode: String indicating the filter mode, either 'in_table' or 'not_in_table'. Values: in_table,
     * not_in_table.
     * <br />
     * <br />  <li> mode: Mode - should be either 'spatial' or 'normal'. Values: normal, spatial.
     * <br />
     * <br />  <li> buffer: Buffer size, in meters. Only relevant for 'spatial' mode.
     * <br />  <li> buffer_method: Method used to buffer polygons.  Only relevant for 'spatial' mode. Values: normal, geos.
     * <br />
     * <br />  <li> max_partition_size: Maximum number of points in a partition. Only relevant for 'spatial' mode.
     * <br />  <li> max_partition_score: Maximum number of points * edges in a partition. Only relevant for 'spatial' mode.
     * <br />  <li> x_column_name: Name of column containing x value of point being filtered in spatial mode.
     * <br />  <li> y_column_name: Name of column containing x value of point being filtered in spatial mode.
     * <br /></ul>
     * <br />A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * String indicating the filter mode, either 'in_table' or 'not_in_table'. Values: in_table, not_in_table.
         * <br />
         */
        public static final String FILTER_MODE = "filter_mode";
        public static final String IN_TABLE = "in_table";
        public static final String NOT_IN_TABLE = "not_in_table";

        /**
         * Mode - should be either 'spatial' or 'normal'. Values: normal, spatial.
         * <br />
         */
        public static final String MODE = "mode";
        public static final String NORMAL = "normal";
        public static final String SPATIAL = "spatial";

        /**
         * Buffer size, in meters. Only relevant for 'spatial' mode.
         */
        public static final String BUFFER = "buffer";

        /**
         * Method used to buffer polygons.  Only relevant for 'spatial' mode. Values: normal, geos.
         * <br />
         */
        public static final String BUFFER_METHOD = "buffer_method";

        /**
         * Use geos 1 edge per corner algorithm
         */
        public static final String GEOS = "geos";

        /**
         * Maximum number of points in a partition. Only relevant for 'spatial' mode.
         */
        public static final String MAX_PARTITION_SIZE = "max_partition_size";

        /**
         * Maximum number of points * edges in a partition. Only relevant for 'spatial' mode.
         */
        public static final String MAX_PARTITION_SCORE = "max_partition_score";

        /**
         * Name of column containing x value of point being filtered in spatial mode.
         */
        public static final String X_COLUMN_NAME = "x_column_name";

        /**
         * Name of column containing x value of point being filtered in spatial mode.
         */
        public static final String Y_COLUMN_NAME = "y_column_name";

        private Options() {  }
    }

    private String tableName;
    private String viewName;
    private String columnName;
    private String sourceTableName;
    private String sourceTableColumnName;
    private Map<String, String> options;


    /**
     * Constructs a FilterByTableRequest object with default parameters.
     */
    public FilterByTableRequest() {
        tableName = "";
        viewName = "";
        columnName = "";
        sourceTableName = "";
        sourceTableColumnName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a FilterByTableRequest object with the specified parameters.
     * 
     * @param tableName  Name of the table whose data will be filtered. Must be an existing table.
     * @param viewName  If provided, then this will be the name of the view containing the results. Must not be an already existing
     *                  collection, table or view.
     * @param columnName  Name of the column by whose value the data will be filtered from the table designated by {@code
     *                    tableName}.
     * @param sourceTableName  Name of the table whose data will be compared against in the table called {@code tableName}. Must be
     *                         an existing table.
     * @param sourceTableColumnName  Name of the column in the {@code sourceTableName} whose values will be used as the filter for
     *                               table {@code tableName}. Must match the type of the {@code columnName}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> filter_mode: String indicating the filter mode, either 'in_table' or 'not_in_table'. Values:
     *                 in_table, not_in_table.
     *                         <li> mode: Mode - should be either 'spatial' or 'normal'. Values: normal, spatial.
     *                         <li> buffer: Buffer size, in meters. Only relevant for 'spatial' mode.
     *                         <li> buffer_method: Method used to buffer polygons.  Only relevant for 'spatial' mode. Values:
     *                 normal, geos.
     *                         <li> max_partition_size: Maximum number of points in a partition. Only relevant for 'spatial' mode.
     *                         <li> max_partition_score: Maximum number of points * edges in a partition. Only relevant for
     *                 'spatial' mode.
     *                         <li> x_column_name: Name of column containing x value of point being filtered in spatial mode.
     *                         <li> y_column_name: Name of column containing x value of point being filtered in spatial mode.
     *                 </ul>
     * 
     */
    public FilterByTableRequest(String tableName, String viewName, String columnName, String sourceTableName, String sourceTableColumnName, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.viewName = (viewName == null) ? "" : viewName;
        this.columnName = (columnName == null) ? "" : columnName;
        this.sourceTableName = (sourceTableName == null) ? "" : sourceTableName;
        this.sourceTableColumnName = (sourceTableColumnName == null) ? "" : sourceTableColumnName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the table whose data will be filtered. Must be an existing table.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Name of the table whose data will be filtered. Must be an existing table.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public FilterByTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return If provided, then this will be the name of the view containing the results. Must not be an already existing
     *         collection, table or view.
     * 
     */
    public String getViewName() {
        return viewName;
    }

    /**
     * 
     * @param viewName  If provided, then this will be the name of the view containing the results. Must not be an already existing
     *                  collection, table or view.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public FilterByTableRequest setViewName(String viewName) {
        this.viewName = (viewName == null) ? "" : viewName;
        return this;
    }

    /**
     * 
     * @return Name of the column by whose value the data will be filtered from the table designated by {@code tableName}.
     * 
     */
    public String getColumnName() {
        return columnName;
    }

    /**
     * 
     * @param columnName  Name of the column by whose value the data will be filtered from the table designated by {@code
     *                    tableName}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public FilterByTableRequest setColumnName(String columnName) {
        this.columnName = (columnName == null) ? "" : columnName;
        return this;
    }

    /**
     * 
     * @return Name of the table whose data will be compared against in the table called {@code tableName}. Must be an existing
     *         table.
     * 
     */
    public String getSourceTableName() {
        return sourceTableName;
    }

    /**
     * 
     * @param sourceTableName  Name of the table whose data will be compared against in the table called {@code tableName}. Must be
     *                         an existing table.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public FilterByTableRequest setSourceTableName(String sourceTableName) {
        this.sourceTableName = (sourceTableName == null) ? "" : sourceTableName;
        return this;
    }

    /**
     * 
     * @return Name of the column in the {@code sourceTableName} whose values will be used as the filter for table {@code
     *         tableName}. Must match the type of the {@code columnName}.
     * 
     */
    public String getSourceTableColumnName() {
        return sourceTableColumnName;
    }

    /**
     * 
     * @param sourceTableColumnName  Name of the column in the {@code sourceTableName} whose values will be used as the filter for
     *                               table {@code tableName}. Must match the type of the {@code columnName}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public FilterByTableRequest setSourceTableColumnName(String sourceTableColumnName) {
        this.sourceTableColumnName = (sourceTableColumnName == null) ? "" : sourceTableColumnName;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> filter_mode: String indicating the filter mode, either 'in_table' or 'not_in_table'. Values: in_table,
     *         not_in_table.
     *                 <li> mode: Mode - should be either 'spatial' or 'normal'. Values: normal, spatial.
     *                 <li> buffer: Buffer size, in meters. Only relevant for 'spatial' mode.
     *                 <li> buffer_method: Method used to buffer polygons.  Only relevant for 'spatial' mode. Values: normal, geos.
     *                 <li> max_partition_size: Maximum number of points in a partition. Only relevant for 'spatial' mode.
     *                 <li> max_partition_score: Maximum number of points * edges in a partition. Only relevant for 'spatial' mode.
     *                 <li> x_column_name: Name of column containing x value of point being filtered in spatial mode.
     *                 <li> y_column_name: Name of column containing x value of point being filtered in spatial mode.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> filter_mode: String indicating the filter mode, either 'in_table' or 'not_in_table'. Values:
     *                 in_table, not_in_table.
     *                         <li> mode: Mode - should be either 'spatial' or 'normal'. Values: normal, spatial.
     *                         <li> buffer: Buffer size, in meters. Only relevant for 'spatial' mode.
     *                         <li> buffer_method: Method used to buffer polygons.  Only relevant for 'spatial' mode. Values:
     *                 normal, geos.
     *                         <li> max_partition_size: Maximum number of points in a partition. Only relevant for 'spatial' mode.
     *                         <li> max_partition_score: Maximum number of points * edges in a partition. Only relevant for
     *                 'spatial' mode.
     *                         <li> x_column_name: Name of column containing x value of point being filtered in spatial mode.
     *                         <li> y_column_name: Name of column containing x value of point being filtered in spatial mode.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public FilterByTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.viewName;

            case 2:
                return this.columnName;

            case 3:
                return this.sourceTableName;

            case 4:
                return this.sourceTableColumnName;

            case 5:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.viewName = (String)value;
                break;

            case 2:
                this.columnName = (String)value;
                break;

            case 3:
                this.sourceTableName = (String)value;
                break;

            case 4:
                this.sourceTableColumnName = (String)value;
                break;

            case 5:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        FilterByTableRequest that = (FilterByTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.viewName.equals( that.viewName )
                 && this.columnName.equals( that.columnName )
                 && this.sourceTableName.equals( that.sourceTableName )
                 && this.sourceTableColumnName.equals( that.sourceTableColumnName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "viewName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.viewName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceTableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceTableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceTableColumnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceTableColumnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.viewName.hashCode();
        hashCode = (31 * hashCode) + this.columnName.hashCode();
        hashCode = (31 * hashCode) + this.sourceTableName.hashCode();
        hashCode = (31 * hashCode) + this.sourceTableColumnName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
