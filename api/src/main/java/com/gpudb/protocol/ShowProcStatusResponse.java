
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.nio.ByteBuffer;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class ShowProcStatusResponse implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("ShowProcStatusResponse")
            .namespace("com.gpudb")
            .fields()
                .name("procNames").type().map().values().stringType().noDefault()
                .name("params").type().map().values().map().values().stringType().noDefault()
                .name("binParams").type().map().values().map().values().bytesType().noDefault()
                .name("inputTableNames").type().map().values().array().items().stringType().noDefault()
                .name("inputColumnNames").type().map().values().map().values().array().items().stringType().noDefault()
                .name("outputTableNames").type().map().values().array().items().stringType().noDefault()
                .name("overallStatuses").type().map().values().stringType().noDefault()
                .name("statuses").type().map().values().map().values().stringType().noDefault()
                .name("messages").type().map().values().map().values().stringType().noDefault()
                .name("results").type().map().values().map().values().map().values().stringType().noDefault()
                .name("binResults").type().map().values().map().values().map().values().bytesType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    public static final class OverallStatuses {

        public static final String RUNNING = "running";

        public static final String COMPLETE = "complete";

        public static final String KILLED = "killed";

        public static final String ERROR = "error";


        private OverallStatuses() {  }
    }


    public static final class Statuses {

        public static final String RUNNING = "running";

        public static final String COMPLETE = "complete";

        public static final String KILLED = "killed";

        public static final String ERROR = "error";


        private Statuses() {  }
    }


    private Map<String, String> procNames;
    private Map<String, Map<String, String>> params;
    private Map<String, Map<String, ByteBuffer>> binParams;
    private Map<String, List<String>> inputTableNames;
    private Map<String, Map<String, List<String>>> inputColumnNames;
    private Map<String, List<String>> outputTableNames;
    private Map<String, String> overallStatuses;
    private Map<String, Map<String, String>> statuses;
    private Map<String, Map<String, String>> messages;
    private Map<String, Map<String, Map<String, String>>> results;
    private Map<String, Map<String, Map<String, ByteBuffer>>> binResults;


    public ShowProcStatusResponse() {
    }

    public Map<String, String> getProcNames() {
        return procNames;
    }

    public ShowProcStatusResponse setProcNames(Map<String, String> procNames) {
        this.procNames = (procNames == null) ? new LinkedHashMap<String, String>() : procNames;
        return this;
    }

    public Map<String, Map<String, String>> getParams() {
        return params;
    }

    public ShowProcStatusResponse setParams(Map<String, Map<String, String>> params) {
        this.params = (params == null) ? new LinkedHashMap<String, Map<String, String>>() : params;
        return this;
    }

    public Map<String, Map<String, ByteBuffer>> getBinParams() {
        return binParams;
    }

    public ShowProcStatusResponse setBinParams(Map<String, Map<String, ByteBuffer>> binParams) {
        this.binParams = (binParams == null) ? new LinkedHashMap<String, Map<String, ByteBuffer>>() : binParams;
        return this;
    }

    public Map<String, List<String>> getInputTableNames() {
        return inputTableNames;
    }

    public ShowProcStatusResponse setInputTableNames(Map<String, List<String>> inputTableNames) {
        this.inputTableNames = (inputTableNames == null) ? new LinkedHashMap<String, List<String>>() : inputTableNames;
        return this;
    }

    public Map<String, Map<String, List<String>>> getInputColumnNames() {
        return inputColumnNames;
    }

    public ShowProcStatusResponse setInputColumnNames(Map<String, Map<String, List<String>>> inputColumnNames) {
        this.inputColumnNames = (inputColumnNames == null) ? new LinkedHashMap<String, Map<String, List<String>>>() : inputColumnNames;
        return this;
    }

    public Map<String, List<String>> getOutputTableNames() {
        return outputTableNames;
    }

    public ShowProcStatusResponse setOutputTableNames(Map<String, List<String>> outputTableNames) {
        this.outputTableNames = (outputTableNames == null) ? new LinkedHashMap<String, List<String>>() : outputTableNames;
        return this;
    }

    public Map<String, String> getOverallStatuses() {
        return overallStatuses;
    }

    public ShowProcStatusResponse setOverallStatuses(Map<String, String> overallStatuses) {
        this.overallStatuses = (overallStatuses == null) ? new LinkedHashMap<String, String>() : overallStatuses;
        return this;
    }

    public Map<String, Map<String, String>> getStatuses() {
        return statuses;
    }

    public ShowProcStatusResponse setStatuses(Map<String, Map<String, String>> statuses) {
        this.statuses = (statuses == null) ? new LinkedHashMap<String, Map<String, String>>() : statuses;
        return this;
    }

    public Map<String, Map<String, String>> getMessages() {
        return messages;
    }

    public ShowProcStatusResponse setMessages(Map<String, Map<String, String>> messages) {
        this.messages = (messages == null) ? new LinkedHashMap<String, Map<String, String>>() : messages;
        return this;
    }

    public Map<String, Map<String, Map<String, String>>> getResults() {
        return results;
    }

    public ShowProcStatusResponse setResults(Map<String, Map<String, Map<String, String>>> results) {
        this.results = (results == null) ? new LinkedHashMap<String, Map<String, Map<String, String>>>() : results;
        return this;
    }

    public Map<String, Map<String, Map<String, ByteBuffer>>> getBinResults() {
        return binResults;
    }

    public ShowProcStatusResponse setBinResults(Map<String, Map<String, Map<String, ByteBuffer>>> binResults) {
        this.binResults = (binResults == null) ? new LinkedHashMap<String, Map<String, Map<String, ByteBuffer>>>() : binResults;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.procNames;

            case 1:
                return this.params;

            case 2:
                return this.binParams;

            case 3:
                return this.inputTableNames;

            case 4:
                return this.inputColumnNames;

            case 5:
                return this.outputTableNames;

            case 6:
                return this.overallStatuses;

            case 7:
                return this.statuses;

            case 8:
                return this.messages;

            case 9:
                return this.results;

            case 10:
                return this.binResults;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.procNames = (Map<String, String>)value;
                break;

            case 1:
                this.params = (Map<String, Map<String, String>>)value;
                break;

            case 2:
                this.binParams = (Map<String, Map<String, ByteBuffer>>)value;
                break;

            case 3:
                this.inputTableNames = (Map<String, List<String>>)value;
                break;

            case 4:
                this.inputColumnNames = (Map<String, Map<String, List<String>>>)value;
                break;

            case 5:
                this.outputTableNames = (Map<String, List<String>>)value;
                break;

            case 6:
                this.overallStatuses = (Map<String, String>)value;
                break;

            case 7:
                this.statuses = (Map<String, Map<String, String>>)value;
                break;

            case 8:
                this.messages = (Map<String, Map<String, String>>)value;
                break;

            case 9:
                this.results = (Map<String, Map<String, Map<String, String>>>)value;
                break;

            case 10:
                this.binResults = (Map<String, Map<String, Map<String, ByteBuffer>>>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowProcStatusResponse that = (ShowProcStatusResponse)obj;

        return ( this.procNames.equals( that.procNames )
                 && this.params.equals( that.params )
                 && this.binParams.equals( that.binParams )
                 && this.inputTableNames.equals( that.inputTableNames )
                 && this.inputColumnNames.equals( that.inputColumnNames )
                 && this.outputTableNames.equals( that.outputTableNames )
                 && this.overallStatuses.equals( that.overallStatuses )
                 && this.statuses.equals( that.statuses )
                 && this.messages.equals( that.messages )
                 && this.results.equals( that.results )
                 && this.binResults.equals( that.binResults ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "procNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.procNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "params" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.params ) );
        builder.append( ", " );
        builder.append( gd.toString( "binParams" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.binParams ) );
        builder.append( ", " );
        builder.append( gd.toString( "inputTableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inputTableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "inputColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inputColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "outputTableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.outputTableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "overallStatuses" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.overallStatuses ) );
        builder.append( ", " );
        builder.append( gd.toString( "statuses" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.statuses ) );
        builder.append( ", " );
        builder.append( gd.toString( "messages" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.messages ) );
        builder.append( ", " );
        builder.append( gd.toString( "results" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.results ) );
        builder.append( ", " );
        builder.append( gd.toString( "binResults" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.binResults ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.procNames.hashCode();
        hashCode = (31 * hashCode) + this.params.hashCode();
        hashCode = (31 * hashCode) + this.binParams.hashCode();
        hashCode = (31 * hashCode) + this.inputTableNames.hashCode();
        hashCode = (31 * hashCode) + this.inputColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.outputTableNames.hashCode();
        hashCode = (31 * hashCode) + this.overallStatuses.hashCode();
        hashCode = (31 * hashCode) + this.statuses.hashCode();
        hashCode = (31 * hashCode) + this.messages.hashCode();
        hashCode = (31 * hashCode) + this.results.hashCode();
        hashCode = (31 * hashCode) + this.binResults.hashCode();
        return hashCode;
    }


}
