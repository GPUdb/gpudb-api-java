/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#showSchema(ShowSchemaRequest)}.
 */
public class ShowSchemaResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowSchemaResponse")
            .namespace("com.gpudb")
            .fields()
                .name("schemaName").type().stringType().noDefault()
                .name("schemaNames").type().array().items().stringType().noDefault()
                .name("schemaTables").type().array().items().array().items().stringType().noDefault()
                .name("additionalInfo").type().array().items().map().values().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String schemaName;
    private List<String> schemaNames;
    private List<List<String>> schemaTables;
    private List<Map<String, String>> additionalInfo;
    private Map<String, String> info;


    /**
     * Constructs a ShowSchemaResponse object with default parameters.
     */
    public ShowSchemaResponse() {
    }

    /**
     * 
     * @return Value of {@code schemaName}.
     * 
     */
    public String getSchemaName() {
        return schemaName;
    }

    /**
     * 
     * @param schemaName  Value of {@code schemaName}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowSchemaResponse setSchemaName(String schemaName) {
        this.schemaName = (schemaName == null) ? "" : schemaName;
        return this;
    }

    /**
     * 
     * @return A list of all schema names for which information is returned
     * 
     */
    public List<String> getSchemaNames() {
        return schemaNames;
    }

    /**
     * 
     * @param schemaNames  A list of all schema names for which information is
     *                     returned
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowSchemaResponse setSchemaNames(List<String> schemaNames) {
        this.schemaNames = (schemaNames == null) ? new ArrayList<String>() : schemaNames;
        return this;
    }

    /**
     * 
     * @return An array of arrays containing a list of tables in each of the
     *         respective {@code schemaNames}.
     * 
     */
    public List<List<String>> getSchemaTables() {
        return schemaTables;
    }

    /**
     * 
     * @param schemaTables  An array of arrays containing a list of tables in
     *                      each of the respective {@code schemaNames}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowSchemaResponse setSchemaTables(List<List<String>> schemaTables) {
        this.schemaTables = (schemaTables == null) ? new ArrayList<List<String>>() : schemaTables;
        return this;
    }

    /**
     * 
     * @return Additional information about the respective tables in {@code
     *         schemaNames}.
     * 
     */
    public List<Map<String, String>> getAdditionalInfo() {
        return additionalInfo;
    }

    /**
     * 
     * @param additionalInfo  Additional information about the respective
     *                        tables in {@code schemaNames}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowSchemaResponse setAdditionalInfo(List<Map<String, String>> additionalInfo) {
        this.additionalInfo = (additionalInfo == null) ? new ArrayList<Map<String, String>>() : additionalInfo;
        return this;
    }

    /**
     * 
     * @return Additional information.
     * 
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * 
     * @param info  Additional information.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowSchemaResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.schemaName;

            case 1:
                return this.schemaNames;

            case 2:
                return this.schemaTables;

            case 3:
                return this.additionalInfo;

            case 4:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.schemaName = (String)value;
                break;

            case 1:
                this.schemaNames = (List<String>)value;
                break;

            case 2:
                this.schemaTables = (List<List<String>>)value;
                break;

            case 3:
                this.additionalInfo = (List<Map<String, String>>)value;
                break;

            case 4:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowSchemaResponse that = (ShowSchemaResponse)obj;

        return ( this.schemaName.equals( that.schemaName )
                 && this.schemaNames.equals( that.schemaNames )
                 && this.schemaTables.equals( that.schemaTables )
                 && this.additionalInfo.equals( that.additionalInfo )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "schemaName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.schemaName ) );
        builder.append( ", " );
        builder.append( gd.toString( "schemaNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.schemaNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "schemaTables" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.schemaTables ) );
        builder.append( ", " );
        builder.append( gd.toString( "additionalInfo" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.additionalInfo ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.schemaName.hashCode();
        hashCode = (31 * hashCode) + this.schemaNames.hashCode();
        hashCode = (31 * hashCode) + this.schemaTables.hashCode();
        hashCode = (31 * hashCode) + this.additionalInfo.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }

}
