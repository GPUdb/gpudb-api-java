/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createProjection(CreateProjectionRequest)}.
 * <p>
 * Creates a new projection of an existing table.  A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 */
public class CreateProjectionRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateProjectionRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("projectionName").type().stringType().noDefault()
                .name("columnNames").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> collection_name: Name of a collection to which the
     * projection is to be assigned as a child. If the collection provided is
     * non-existent, the collection will be automatically created.
     *         <li> expression: An optional filter expression to be applied to
     * the source table prior to the projection.
     *         <li> limit: The number of records to keep.
     *         <li> order_by: Comma-separated list of the columns to be sorted
     * by; e.g. 'timestamp asc, x desc'.  The columns specified must be present
     * in {@code columnNames}.  If any alias is given for any column name, the
     * alias must be used, rather than the original column name.
     *         <li> materialize_on_gpu: If 'true' then the columns of the
     * projection will be cached on the GPU. Values: true, false.
     * <p>
     *         <li> ttl: Sets the TTL of the table, view, or collection
     * specified in {@code tableName}. The value must be the desired TTL in
     * minutes.
     * </ul>
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Name of a collection to which the projection is to be assigned as a
         * child. If the collection provided is non-existent, the collection
         * will be automatically created.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * An optional filter expression to be applied to the source table
         * prior to the projection.
         */
        public static final String EXPRESSION = "expression";

        /**
         * The number of records to keep.
         */
        public static final String LIMIT = "limit";

        /**
         * Comma-separated list of the columns to be sorted by; e.g. 'timestamp
         * asc, x desc'.  The columns specified must be present in {@code
         * columnNames}.  If any alias is given for any column name, the alias
         * must be used, rather than the original column name.
         */
        public static final String ORDER_BY = "order_by";

        /**
         * If 'true' then the columns of the projection will be cached on the
         * GPU. Values: true, false.
         */
        public static final String MATERIALIZE_ON_GPU = "materialize_on_gpu";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Sets the TTL of the table, view, or collection specified in {@code
         * tableName}. The value must be the desired TTL in minutes.
         */
        public static final String TTL = "ttl";

        private Options() {  }
    }

    private String tableName;
    private String projectionName;
    private List<String> columnNames;
    private Map<String, String> options;


    /**
     * Constructs a CreateProjectionRequest object with default parameters.
     */
    public CreateProjectionRequest() {
        tableName = "";
        projectionName = "";
        columnNames = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateProjectionRequest object with the specified
     * parameters.
     * 
     * @param tableName  Name of the existing table on which the projection is
     *                   to be applied.
     * @param projectionName  Name of the projection to be created. Has the
     *                        same naming restrictions as <a
     *                        href="../../../../../concepts/tables.html"
     *                        target="_top">tables</a>.
     * @param columnNames  List of columns from {@code tableName} to be
     *                     included in the projection. Can include derived
     *                     columns. Can be specified as aliased via the syntax
     *                     '<column_name> as <alias>.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> collection_name: Name of a collection to
     *                 which the projection is to be assigned as a child. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created.
     *                         <li> expression: An optional filter expression
     *                 to be applied to the source table prior to the
     *                 projection.
     *                         <li> limit: The number of records to keep.
     *                         <li> order_by: Comma-separated list of the
     *                 columns to be sorted by; e.g. 'timestamp asc, x desc'.
     *                 The columns specified must be present in {@code
     *                 columnNames}.  If any alias is given for any column
     *                 name, the alias must be used, rather than the original
     *                 column name.
     *                         <li> materialize_on_gpu: If 'true' then the
     *                 columns of the projection will be cached on the GPU.
     *                 Values: true, false.
     *                         <li> ttl: Sets the TTL of the table, view, or
     *                 collection specified in {@code tableName}. The value
     *                 must be the desired TTL in minutes.
     *                 </ul>
     * 
     */
    public CreateProjectionRequest(String tableName, String projectionName, List<String> columnNames, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.projectionName = (projectionName == null) ? "" : projectionName;
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the existing table on which the projection is to be
     *         applied.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Name of the existing table on which the projection is
     *                   to be applied.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateProjectionRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Name of the projection to be created. Has the same naming
     *         restrictions as <a href="../../../../../concepts/tables.html"
     *         target="_top">tables</a>.
     * 
     */
    public String getProjectionName() {
        return projectionName;
    }

    /**
     * 
     * @param projectionName  Name of the projection to be created. Has the
     *                        same naming restrictions as <a
     *                        href="../../../../../concepts/tables.html"
     *                        target="_top">tables</a>.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateProjectionRequest setProjectionName(String projectionName) {
        this.projectionName = (projectionName == null) ? "" : projectionName;
        return this;
    }

    /**
     * 
     * @return List of columns from {@code tableName} to be included in the
     *         projection. Can include derived columns. Can be specified as
     *         aliased via the syntax '<column_name> as <alias>.
     * 
     */
    public List<String> getColumnNames() {
        return columnNames;
    }

    /**
     * 
     * @param columnNames  List of columns from {@code tableName} to be
     *                     included in the projection. Can include derived
     *                     columns. Can be specified as aliased via the syntax
     *                     '<column_name> as <alias>.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateProjectionRequest setColumnNames(List<String> columnNames) {
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> collection_name: Name of a collection to which the
     *         projection is to be assigned as a child. If the collection
     *         provided is non-existent, the collection will be automatically
     *         created.
     *                 <li> expression: An optional filter expression to be
     *         applied to the source table prior to the projection.
     *                 <li> limit: The number of records to keep.
     *                 <li> order_by: Comma-separated list of the columns to be
     *         sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
     *         must be present in {@code columnNames}.  If any alias is given
     *         for any column name, the alias must be used, rather than the
     *         original column name.
     *                 <li> materialize_on_gpu: If 'true' then the columns of
     *         the projection will be cached on the GPU. Values: true, false.
     *                 <li> ttl: Sets the TTL of the table, view, or collection
     *         specified in {@code tableName}. The value must be the desired
     *         TTL in minutes.
     *         </ul>
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> collection_name: Name of a collection to
     *                 which the projection is to be assigned as a child. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created.
     *                         <li> expression: An optional filter expression
     *                 to be applied to the source table prior to the
     *                 projection.
     *                         <li> limit: The number of records to keep.
     *                         <li> order_by: Comma-separated list of the
     *                 columns to be sorted by; e.g. 'timestamp asc, x desc'.
     *                 The columns specified must be present in {@code
     *                 columnNames}.  If any alias is given for any column
     *                 name, the alias must be used, rather than the original
     *                 column name.
     *                         <li> materialize_on_gpu: If 'true' then the
     *                 columns of the projection will be cached on the GPU.
     *                 Values: true, false.
     *                         <li> ttl: Sets the TTL of the table, view, or
     *                 collection specified in {@code tableName}. The value
     *                 must be the desired TTL in minutes.
     *                 </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateProjectionRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.projectionName;

            case 2:
                return this.columnNames;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.projectionName = (String)value;
                break;

            case 2:
                this.columnNames = (List<String>)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateProjectionRequest that = (CreateProjectionRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.projectionName.equals( that.projectionName )
                 && this.columnNames.equals( that.columnNames )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "projectionName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.projectionName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.projectionName.hashCode();
        hashCode = (31 * hashCode) + this.columnNames.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
