/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#insertRecordsRandom(InsertRecordsRandomRequest)}.
 * <p>
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 * <p>
 * This operation is synchronous, meaning that GPUdb will not return until all
 * random records are fully available.
 */
public class InsertRecordsRandomRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("InsertRecordsRandomRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("count").type().longType().noDefault()
                .name("options").type().map().values().map().values().doubleType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameter to pass in specifications for the randomness of the
     * values.  This map is different from the *options* parameter of most
     * other endpoints in that it is a map of string to map of string to
     * doubles, while most others are maps of string to string.  In this map,
     * the top level keys represent which column's parameters are being
     * specified, while the internal keys represents which parameter is being
     * specified.  The parameters that can be specified are: *min*, *max*, and
     * *interval*.  These parameters take on different meanings depending on
     * the type of the column.  Below follows a more detailed description of
     * the map:
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * This key indicates that the specifications relayed in the internal
         * map are to be applied to all columns of the records.
         */
        public static final String ALL = "all";

        /**
         * Minimum possible length for generated series; default is 100 records
         * per series. Must be an integral value within the range [1, 500]. If
         * both min and max are specified, min must be less than or equal to
         * max.
         */
        public static final String MIN = "min";

        /**
         * Maximum possible length for generated series; default is 500 records
         * per series. Must be an integral value within the range [1, 500]. If
         * both min and max are specified, max must be greater than or equal to
         * min.
         */
        public static final String MAX = "max";

        /**
         * If specified, then generate values for all columns linearly and
         * evenly spaced with the given interval value starting at the minimum
         * value (instead of generating random data). *Any provided max value
         * is disregarded.*  For string-type columns, the interval value is
         * ignored but the string values would be generated following the
         * pattern: 'attrname_creationIndex#', i.e. the column name suffixed
         * with an underscore and a running counter (starting at 0).
         */
        public static final String INTERVAL = "interval";

        /**
         * Set the following parameters for the column specified by the key.
         * This overrides any parameter set by {@code all}.
         */
        public static final String ATTR_NAME = "attr_name";

        /**
         * This key-map pair is only valid for track type data sets (GPUdb
         * throws an error otherwise).
         */
        public static final String TRACK_LENGTH = "track_length";

        private Options() {  }
    }

    private String tableName;
    private long count;
    private Map<String, Map<String, Double>> options;


    /**
     * Constructs an InsertRecordsRandomRequest object with default parameters.
     */
    public InsertRecordsRandomRequest() {
        tableName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an InsertRecordsRandomRequest object with the specified
     * parameters.
     * 
     * @param tableName  Table to which random records will be added. Must be
     *                   an existing table.  Also, must be an individual table,
     *                   not a collection of tables, nor a view of a table.
     * @param count  Number of records to generate.
     * @param options  Optional parameter to pass in specifications for the
     *                 randomness of the values.  This map is different from
     *                 the *options* parameter of most other endpoints in that
     *                 it is a map of string to map of string to doubles, while
     *                 most others are maps of string to string.  In this map,
     *                 the top level keys represent which column's parameters
     *                 are being specified, while the internal keys represents
     *                 which parameter is being specified.  The parameters that
     *                 can be specified are: *min*, *max*, and *interval*.
     *                 These parameters take on different meanings depending on
     *                 the type of the column.  Below follows a more detailed
     *                 description of the map:
     * 
     */
    public InsertRecordsRandomRequest(String tableName, long count, Map<String, Map<String, Double>> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.count = count;
        this.options = (options == null) ? new LinkedHashMap<String, Map<String, Double>>() : options;
    }

    /**
     * 
     * @return Table to which random records will be added. Must be an existing
     *         table.  Also, must be an individual table, not a collection of
     *         tables, nor a view of a table.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Table to which random records will be added. Must be
     *                   an existing table.  Also, must be an individual table,
     *                   not a collection of tables, nor a view of a table.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public InsertRecordsRandomRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Number of records to generate.
     * 
     */
    public long getCount() {
        return count;
    }

    /**
     * 
     * @param count  Number of records to generate.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public InsertRecordsRandomRequest setCount(long count) {
        this.count = count;
        return this;
    }

    /**
     * 
     * @return Optional parameter to pass in specifications for the randomness
     *         of the values.  This map is different from the *options*
     *         parameter of most other endpoints in that it is a map of string
     *         to map of string to doubles, while most others are maps of
     *         string to string.  In this map, the top level keys represent
     *         which column's parameters are being specified, while the
     *         internal keys represents which parameter is being specified.
     *         The parameters that can be specified are: *min*, *max*, and
     *         *interval*.  These parameters take on different meanings
     *         depending on the type of the column.  Below follows a more
     *         detailed description of the map:
     * 
     */
    public Map<String, Map<String, Double>> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameter to pass in specifications for the
     *                 randomness of the values.  This map is different from
     *                 the *options* parameter of most other endpoints in that
     *                 it is a map of string to map of string to doubles, while
     *                 most others are maps of string to string.  In this map,
     *                 the top level keys represent which column's parameters
     *                 are being specified, while the internal keys represents
     *                 which parameter is being specified.  The parameters that
     *                 can be specified are: *min*, *max*, and *interval*.
     *                 These parameters take on different meanings depending on
     *                 the type of the column.  Below follows a more detailed
     *                 description of the map:
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public InsertRecordsRandomRequest setOptions(Map<String, Map<String, Double>> options) {
        this.options = (options == null) ? new LinkedHashMap<String, Map<String, Double>>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.count;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.count = (Long)value;
                break;

            case 2:
                this.options = (Map<String, Map<String, Double>>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        InsertRecordsRandomRequest that = (InsertRecordsRandomRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && ( this.count == that.count )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "count" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.count ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.count).hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
