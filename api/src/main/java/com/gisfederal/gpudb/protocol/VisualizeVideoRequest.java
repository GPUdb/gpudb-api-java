/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gisfederal.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gisfederal.gpudb.GPUdb#visualizeVideo(VisualizeVideoRequest)}.
 * <p>
 * Creates raster images of data in the given table based on provided input
 * parameters. Numerous parameters are required to call this function. Some of
 * the important parameters are the attributes of the generated images ({@code
 * bgColor}, {@code width}, @{input height{), the collection of GPUdb table
 * names on which this function is to be applied, for which shapes (point,
 * polygon, tracks) the images are to be created and a user specified session
 * key. This session key is later used to fetch the generated images stored by
 * GPUdb. The operation is synchronous meaning that GPUdb will not return the
 * request until the images for all the frames of the video are fully
 * available.
 * <p>
 * Once the request has been processed then the generated video frames are
 * available for download via WMS using STYLES=cached. In this request the
 * LAYERS parameter should be populated with the session key passed in {@code
 * sessionKey} of the visualize video request and the FRAME parameter indicates
 * which 0-based frame of the video should be returned. All other WMS
 * parameters are ignored for this mode.
 * <p>
 * For instance, if a 20 frame video with the session key 'MY-SESSION-KEY' was
 * generated, the first frame could be retrieved with the URL::
 * <p>
 *      http://<gpudb-ip-address>:9191/wms?REQUEST=GetMap&STYLES=cached&LAYERS
 * =MY-SESSION-KEY&FRAME=0
 * <p>
 * and the last frame could be retrieved with::
 * <p>
 *     http://gpudb-ip-address:9191/wms?REQUEST=GetMap&STYLES=cached&LAYERS=MY-
 * SESSION-KEY&FRAME=19
 * <p>

 * <p>

 * The response payload provides, among other things, the number of frames
 * which were created by GPUdb.
 */
public class VisualizeVideoRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeVideoRequest")
            .namespace("com.gisfederal.gpudb")
            .fields()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("worldTableNames").type().array().items().stringType().noDefault()
                .name("trackIds").type().array().items().array().items().stringType().noDefault()
                .name("xColumnName").type().stringType().noDefault()
                .name("yColumnName").type().stringType().noDefault()
                .name("minX").type().doubleType().noDefault()
                .name("maxX").type().doubleType().noDefault()
                .name("minY").type().doubleType().noDefault()
                .name("maxY").type().doubleType().noDefault()
                .name("width").type().intType().noDefault()
                .name("height").type().intType().noDefault()
                .name("projection").type().stringType().noDefault()
                .name("bgColor").type().longType().noDefault()
                .name("doPoints").type().array().items().booleanType().noDefault()
                .name("doShapes").type().array().items().booleanType().noDefault()
                .name("doTracks").type().array().items().booleanType().noDefault()
                .name("pointcolors").type().array().items().longType().noDefault()
                .name("pointsizes").type().array().items().intType().noDefault()
                .name("pointshapes").type().array().items().stringType().noDefault()
                .name("shapelinewidths").type().array().items().intType().noDefault()
                .name("shapelinecolors").type().array().items().longType().noDefault()
                .name("shapefillcolors").type().array().items().longType().noDefault()
                .name("tracklinewidths").type().array().items().intType().noDefault()
                .name("tracklinecolors").type().array().items().longType().noDefault()
                .name("trackmarkersizes").type().array().items().intType().noDefault()
                .name("trackmarkercolors").type().array().items().longType().noDefault()
                .name("trackmarkershapes").type().array().items().stringType().noDefault()
                .name("trackheadcolors").type().array().items().longType().noDefault()
                .name("trackheadsizes").type().array().items().intType().noDefault()
                .name("trackheadshapes").type().array().items().stringType().noDefault()
                .name("timeIntervals").type().array().items().array().items().doubleType().noDefault()
                .name("videoStyle").type().stringType().noDefault()
                .name("sessionKey").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Spatial Reference System (i.e. EPSG Code).
     * A set of string constants for the parameter {@code projection}.
     */
    public static final class Projection {
        public static final String EPSG_4326 = "EPSG:4326";
        public static final String PLATE_CARREE = "PLATE_CARREE";
        public static final String _900913 = "900913";
        public static final String EPSG_900913 = "EPSG:900913";
        public static final String _102100 = "102100";
        public static final String EPSG_102100 = "EPSG:102100";
        public static final String _3857 = "3857";
        public static final String EPSG_3857 = "EPSG:3857";
        public static final String WEB_MERCATOR = "WEB_MERCATOR";

        private Projection() {  }
    }


    /**
     * Rasterize point data toggle.
     * A set of string constants for the parameter {@code doPoints}.
     */
    public static final class DoPoints {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private DoPoints() {  }
    }


    /**
     * Rasterize shapes toggle.
     * A set of string constants for the parameter {@code doShapes}.
     */
    public static final class DoShapes {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private DoShapes() {  }
    }


    /**
     * Rasterize tracks toggle.
     * A set of string constants for the parameter {@code doTracks}.
     */
    public static final class DoTracks {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private DoTracks() {  }
    }


    /**
     * Shape of the point.
     * A set of string constants for the parameter {@code pointshapes}.
     */
    public static final class Pointshapes {
        public static final String NONE = "none";
        public static final String CIRCLE = "circle";
        public static final String SQUARE = "square";
        public static final String DIAMOND = "diamond";
        public static final String HOLLOWCIRCLE = "hollowcircle";
        public static final String HOLLOWSQUARE = "hollowsquare";
        public static final String HOLLOWDIAMOND = "hollowdiamond";
        public static final String SYMBOLCODE = "SYMBOLCODE";

        private Pointshapes() {  }
    }


    /**
     * Shape of track point markers.
     * A set of string constants for the parameter {@code trackmarkershapes}.
     */
    public static final class Trackmarkershapes {
        public static final String NONE = "none";
        public static final String CIRCLE = "circle";
        public static final String SQUARE = "square";
        public static final String DIAMOND = "diamond";
        public static final String HOLLOWCIRCLE = "hollowcircle";
        public static final String HOLLOWSQUARE = "hollowsquare";
        public static final String HOLLOWDIAMOND = "hollowdiamond";
        public static final String SYMBOLCODE = "SYMBOLCODE";

        private Trackmarkershapes() {  }
    }


    /**
     * Shape of track head markers.
     * A set of string constants for the parameter {@code trackheadshapes}.
     */
    public static final class Trackheadshapes {
        public static final String NONE = "none";
        public static final String CIRCLE = "circle";
        public static final String SQUARE = "square";
        public static final String DIAMOND = "diamond";
        public static final String HOLLOWCIRCLE = "hollowcircle";
        public static final String HOLLOWSQUARE = "hollowsquare";
        public static final String HOLLOWDIAMOND = "hollowdiamond";
        public static final String SYMBOLCODE = "SYMBOLCODE";

        private Trackheadshapes() {  }
    }

    private List<String> tableNames;
    private List<String> worldTableNames;
    private List<List<String>> trackIds;
    private String xColumnName;
    private String yColumnName;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private int width;
    private int height;
    private String projection;
    private long bgColor;
    private List<Boolean> doPoints;
    private List<Boolean> doShapes;
    private List<Boolean> doTracks;
    private List<Long> pointcolors;
    private List<Integer> pointsizes;
    private List<String> pointshapes;
    private List<Integer> shapelinewidths;
    private List<Long> shapelinecolors;
    private List<Long> shapefillcolors;
    private List<Integer> tracklinewidths;
    private List<Long> tracklinecolors;
    private List<Integer> trackmarkersizes;
    private List<Long> trackmarkercolors;
    private List<String> trackmarkershapes;
    private List<Long> trackheadcolors;
    private List<Integer> trackheadsizes;
    private List<String> trackheadshapes;
    private List<List<Double>> timeIntervals;
    private String videoStyle;
    private String sessionKey;
    private Map<String, String> options;


    /**
     * Constructs a VisualizeVideoRequest object with default parameters.
     */
    public VisualizeVideoRequest() {
        tableNames = new ArrayList<>();
        worldTableNames = new ArrayList<>();
        trackIds = new ArrayList<>();
        xColumnName = "";
        yColumnName = "";
        projection = "";
        doPoints = new ArrayList<>();
        doShapes = new ArrayList<>();
        doTracks = new ArrayList<>();
        pointcolors = new ArrayList<>();
        pointsizes = new ArrayList<>();
        pointshapes = new ArrayList<>();
        shapelinewidths = new ArrayList<>();
        shapelinecolors = new ArrayList<>();
        shapefillcolors = new ArrayList<>();
        tracklinewidths = new ArrayList<>();
        tracklinecolors = new ArrayList<>();
        trackmarkersizes = new ArrayList<>();
        trackmarkercolors = new ArrayList<>();
        trackmarkershapes = new ArrayList<>();
        trackheadcolors = new ArrayList<>();
        trackheadsizes = new ArrayList<>();
        trackheadshapes = new ArrayList<>();
        timeIntervals = new ArrayList<>();
        videoStyle = "";
        sessionKey = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a VisualizeVideoRequest object with the specified parameters.
     * 
     * @param tableNames  Names of the tables containing the data for various
     *                    layers of the resulting video.
     * @param worldTableNames  Optional name of the tables containing the data
     *                         for the entire track when the {@code tableNames}
     *                         contains only part of the track data, but the
     *                         entire track has to be rendered. The number of
     *                         tables should match the number of tables in the
     *                         {@code tableNames}
     * @param trackIds  Tracks from the {@code tableNames} to be rendered.
     * @param xColumnName  Name of the column containing the x coordinates.
     * @param yColumnName  Name of the column containing the y coordinates.
     * @param minX  Lower bound for the x values.
     * @param maxX  Upper bound for the x values.
     * @param minY  Lower bound for the y values.
     * @param maxY  Upper bound for the y values.
     * @param width  Width of the generated image.
     * @param height  Height of the generated image.
     * @param projection  Spatial Reference System (i.e. EPSG Code).
     * @param bgColor  Background color of the generated image.
     * @param doPoints  Rasterize point data toggle.
     * @param doShapes  Rasterize shapes toggle.
     * @param doTracks  Rasterize tracks toggle.
     * @param pointcolors  RGB color value in hex for the points.
     * @param pointsizes  Size of points.  The minimum allowed value is 0. The
     *                    maximum allowed value is 20.
     * @param pointshapes  Shape of the point.
     * @param shapelinewidths  Width of the lines.  The minimum allowed value
     *                         is 0. The maximum allowed value is 20.
     * @param shapelinecolors  RGB color values in hex for the line. Default is
     *                         yellow.
     * @param shapefillcolors  RGB color values in hex for the fill color of
     *                         the shapes. Use '-1' for no fill.
     * @param tracklinewidths  Width of the track lines. '0' implies do not
     *                         draw track lines.  The minimum allowed value is
     *                         0. The maximum allowed value is 20.
     * @param tracklinecolors  RGB color values for the track lines.
     * @param trackmarkersizes  Size of the track point markers.  The minimum
     *                          allowed value is 0. The maximum allowed value
     *                          is 20.
     * @param trackmarkercolors  Color of the track point markers.
     * @param trackmarkershapes  Shape of track point markers.
     * @param trackheadcolors  Color of track head markers.
     * @param trackheadsizes  Size of track head markers.  The minimum allowed
     *                        value is 0. The maximum allowed value is 20.
     * @param trackheadshapes  Shape of track head markers.
     * @param timeIntervals
     * @param videoStyle
     * @param sessionKey  User Provided session key that is later used to
     *                    retrieve the generated video from the WMS.
     * @param options  Optional parameters.
     * 
     */
    public VisualizeVideoRequest(List<String> tableNames, List<String> worldTableNames, List<List<String>> trackIds, String xColumnName, String yColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, List<Boolean> doPoints, List<Boolean> doShapes, List<Boolean> doTracks, List<Long> pointcolors, List<Integer> pointsizes, List<String> pointshapes, List<Integer> shapelinewidths, List<Long> shapelinecolors, List<Long> shapefillcolors, List<Integer> tracklinewidths, List<Long> tracklinecolors, List<Integer> trackmarkersizes, List<Long> trackmarkercolors, List<String> trackmarkershapes, List<Long> trackheadcolors, List<Integer> trackheadsizes, List<String> trackheadshapes, List<List<Double>> timeIntervals, String videoStyle, String sessionKey, Map<String, String> options) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.worldTableNames = (worldTableNames == null) ? new ArrayList<String>() : worldTableNames;
        this.trackIds = (trackIds == null) ? new ArrayList<List<String>>() : trackIds;
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
        this.width = width;
        this.height = height;
        this.projection = (projection == null) ? "" : projection;
        this.bgColor = bgColor;
        this.doPoints = (doPoints == null) ? new ArrayList<Boolean>() : doPoints;
        this.doShapes = (doShapes == null) ? new ArrayList<Boolean>() : doShapes;
        this.doTracks = (doTracks == null) ? new ArrayList<Boolean>() : doTracks;
        this.pointcolors = (pointcolors == null) ? new ArrayList<Long>() : pointcolors;
        this.pointsizes = (pointsizes == null) ? new ArrayList<Integer>() : pointsizes;
        this.pointshapes = (pointshapes == null) ? new ArrayList<String>() : pointshapes;
        this.shapelinewidths = (shapelinewidths == null) ? new ArrayList<Integer>() : shapelinewidths;
        this.shapelinecolors = (shapelinecolors == null) ? new ArrayList<Long>() : shapelinecolors;
        this.shapefillcolors = (shapefillcolors == null) ? new ArrayList<Long>() : shapefillcolors;
        this.tracklinewidths = (tracklinewidths == null) ? new ArrayList<Integer>() : tracklinewidths;
        this.tracklinecolors = (tracklinecolors == null) ? new ArrayList<Long>() : tracklinecolors;
        this.trackmarkersizes = (trackmarkersizes == null) ? new ArrayList<Integer>() : trackmarkersizes;
        this.trackmarkercolors = (trackmarkercolors == null) ? new ArrayList<Long>() : trackmarkercolors;
        this.trackmarkershapes = (trackmarkershapes == null) ? new ArrayList<String>() : trackmarkershapes;
        this.trackheadcolors = (trackheadcolors == null) ? new ArrayList<Long>() : trackheadcolors;
        this.trackheadsizes = (trackheadsizes == null) ? new ArrayList<Integer>() : trackheadsizes;
        this.trackheadshapes = (trackheadshapes == null) ? new ArrayList<String>() : trackheadshapes;
        this.timeIntervals = (timeIntervals == null) ? new ArrayList<List<Double>>() : timeIntervals;
        this.videoStyle = (videoStyle == null) ? "" : videoStyle;
        this.sessionKey = (sessionKey == null) ? "" : sessionKey;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Names of the tables containing the data for various layers of
     *         the resulting video.
     * 
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * 
     * @param tableNames  Names of the tables containing the data for various
     *                    layers of the resulting video.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * 
     * @return Optional name of the tables containing the data for the entire
     *         track when the {@code tableNames} contains only part of the
     *         track data, but the entire track has to be rendered. The number
     *         of tables should match the number of tables in the {@code
     *         tableNames}
     * 
     */
    public List<String> getWorldTableNames() {
        return worldTableNames;
    }

    /**
     * 
     * @param worldTableNames  Optional name of the tables containing the data
     *                         for the entire track when the {@code tableNames}
     *                         contains only part of the track data, but the
     *                         entire track has to be rendered. The number of
     *                         tables should match the number of tables in the
     *                         {@code tableNames}
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setWorldTableNames(List<String> worldTableNames) {
        this.worldTableNames = (worldTableNames == null) ? new ArrayList<String>() : worldTableNames;
        return this;
    }

    /**
     * 
     * @return Tracks from the {@code tableNames} to be rendered.
     * 
     */
    public List<List<String>> getTrackIds() {
        return trackIds;
    }

    /**
     * 
     * @param trackIds  Tracks from the {@code tableNames} to be rendered.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackIds(List<List<String>> trackIds) {
        this.trackIds = (trackIds == null) ? new ArrayList<List<String>>() : trackIds;
        return this;
    }

    /**
     * 
     * @return Name of the column containing the x coordinates.
     * 
     */
    public String getXColumnName() {
        return xColumnName;
    }

    /**
     * 
     * @param xColumnName  Name of the column containing the x coordinates.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setXColumnName(String xColumnName) {
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        return this;
    }

    /**
     * 
     * @return Name of the column containing the y coordinates.
     * 
     */
    public String getYColumnName() {
        return yColumnName;
    }

    /**
     * 
     * @param yColumnName  Name of the column containing the y coordinates.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setYColumnName(String yColumnName) {
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        return this;
    }

    /**
     * 
     * @return Lower bound for the x values.
     * 
     */
    public double getMinX() {
        return minX;
    }

    /**
     * 
     * @param minX  Lower bound for the x values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setMinX(double minX) {
        this.minX = minX;
        return this;
    }

    /**
     * 
     * @return Upper bound for the x values.
     * 
     */
    public double getMaxX() {
        return maxX;
    }

    /**
     * 
     * @param maxX  Upper bound for the x values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setMaxX(double maxX) {
        this.maxX = maxX;
        return this;
    }

    /**
     * 
     * @return Lower bound for the y values.
     * 
     */
    public double getMinY() {
        return minY;
    }

    /**
     * 
     * @param minY  Lower bound for the y values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setMinY(double minY) {
        this.minY = minY;
        return this;
    }

    /**
     * 
     * @return Upper bound for the y values.
     * 
     */
    public double getMaxY() {
        return maxY;
    }

    /**
     * 
     * @param maxY  Upper bound for the y values.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setMaxY(double maxY) {
        this.maxY = maxY;
        return this;
    }

    /**
     * 
     * @return Width of the generated image.
     * 
     */
    public int getWidth() {
        return width;
    }

    /**
     * 
     * @param width  Width of the generated image.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setWidth(int width) {
        this.width = width;
        return this;
    }

    /**
     * 
     * @return Height of the generated image.
     * 
     */
    public int getHeight() {
        return height;
    }

    /**
     * 
     * @param height  Height of the generated image.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setHeight(int height) {
        this.height = height;
        return this;
    }

    /**
     * 
     * @return Spatial Reference System (i.e. EPSG Code).
     * 
     */
    public String getProjection() {
        return projection;
    }

    /**
     * 
     * @param projection  Spatial Reference System (i.e. EPSG Code).
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setProjection(String projection) {
        this.projection = (projection == null) ? "" : projection;
        return this;
    }

    /**
     * 
     * @return Background color of the generated image.
     * 
     */
    public long getBgColor() {
        return bgColor;
    }

    /**
     * 
     * @param bgColor  Background color of the generated image.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setBgColor(long bgColor) {
        this.bgColor = bgColor;
        return this;
    }

    /**
     * 
     * @return Rasterize point data toggle.
     * 
     */
    public List<Boolean> getDoPoints() {
        return doPoints;
    }

    /**
     * 
     * @param doPoints  Rasterize point data toggle.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setDoPoints(List<Boolean> doPoints) {
        this.doPoints = (doPoints == null) ? new ArrayList<Boolean>() : doPoints;
        return this;
    }

    /**
     * 
     * @return Rasterize shapes toggle.
     * 
     */
    public List<Boolean> getDoShapes() {
        return doShapes;
    }

    /**
     * 
     * @param doShapes  Rasterize shapes toggle.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setDoShapes(List<Boolean> doShapes) {
        this.doShapes = (doShapes == null) ? new ArrayList<Boolean>() : doShapes;
        return this;
    }

    /**
     * 
     * @return Rasterize tracks toggle.
     * 
     */
    public List<Boolean> getDoTracks() {
        return doTracks;
    }

    /**
     * 
     * @param doTracks  Rasterize tracks toggle.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setDoTracks(List<Boolean> doTracks) {
        this.doTracks = (doTracks == null) ? new ArrayList<Boolean>() : doTracks;
        return this;
    }

    /**
     * 
     * @return RGB color value in hex for the points.
     * 
     */
    public List<Long> getPointcolors() {
        return pointcolors;
    }

    /**
     * 
     * @param pointcolors  RGB color value in hex for the points.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setPointcolors(List<Long> pointcolors) {
        this.pointcolors = (pointcolors == null) ? new ArrayList<Long>() : pointcolors;
        return this;
    }

    /**
     * 
     * @return Size of points.  The minimum allowed value is 0. The maximum
     *         allowed value is 20.
     * 
     */
    public List<Integer> getPointsizes() {
        return pointsizes;
    }

    /**
     * 
     * @param pointsizes  Size of points.  The minimum allowed value is 0. The
     *                    maximum allowed value is 20.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setPointsizes(List<Integer> pointsizes) {
        this.pointsizes = (pointsizes == null) ? new ArrayList<Integer>() : pointsizes;
        return this;
    }

    /**
     * 
     * @return Shape of the point.
     * 
     */
    public List<String> getPointshapes() {
        return pointshapes;
    }

    /**
     * 
     * @param pointshapes  Shape of the point.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setPointshapes(List<String> pointshapes) {
        this.pointshapes = (pointshapes == null) ? new ArrayList<String>() : pointshapes;
        return this;
    }

    /**
     * 
     * @return Width of the lines.  The minimum allowed value is 0. The maximum
     *         allowed value is 20.
     * 
     */
    public List<Integer> getShapelinewidths() {
        return shapelinewidths;
    }

    /**
     * 
     * @param shapelinewidths  Width of the lines.  The minimum allowed value
     *                         is 0. The maximum allowed value is 20.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setShapelinewidths(List<Integer> shapelinewidths) {
        this.shapelinewidths = (shapelinewidths == null) ? new ArrayList<Integer>() : shapelinewidths;
        return this;
    }

    /**
     * 
     * @return RGB color values in hex for the line. Default is yellow.
     * 
     */
    public List<Long> getShapelinecolors() {
        return shapelinecolors;
    }

    /**
     * 
     * @param shapelinecolors  RGB color values in hex for the line. Default is
     *                         yellow.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setShapelinecolors(List<Long> shapelinecolors) {
        this.shapelinecolors = (shapelinecolors == null) ? new ArrayList<Long>() : shapelinecolors;
        return this;
    }

    /**
     * 
     * @return RGB color values in hex for the fill color of the shapes. Use
     *         '-1' for no fill.
     * 
     */
    public List<Long> getShapefillcolors() {
        return shapefillcolors;
    }

    /**
     * 
     * @param shapefillcolors  RGB color values in hex for the fill color of
     *                         the shapes. Use '-1' for no fill.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setShapefillcolors(List<Long> shapefillcolors) {
        this.shapefillcolors = (shapefillcolors == null) ? new ArrayList<Long>() : shapefillcolors;
        return this;
    }

    /**
     * 
     * @return Width of the track lines. '0' implies do not draw track lines.
     *         The minimum allowed value is 0. The maximum allowed value is 20.
     * 
     */
    public List<Integer> getTracklinewidths() {
        return tracklinewidths;
    }

    /**
     * 
     * @param tracklinewidths  Width of the track lines. '0' implies do not
     *                         draw track lines.  The minimum allowed value is
     *                         0. The maximum allowed value is 20.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTracklinewidths(List<Integer> tracklinewidths) {
        this.tracklinewidths = (tracklinewidths == null) ? new ArrayList<Integer>() : tracklinewidths;
        return this;
    }

    /**
     * 
     * @return RGB color values for the track lines.
     * 
     */
    public List<Long> getTracklinecolors() {
        return tracklinecolors;
    }

    /**
     * 
     * @param tracklinecolors  RGB color values for the track lines.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTracklinecolors(List<Long> tracklinecolors) {
        this.tracklinecolors = (tracklinecolors == null) ? new ArrayList<Long>() : tracklinecolors;
        return this;
    }

    /**
     * 
     * @return Size of the track point markers.  The minimum allowed value is
     *         0. The maximum allowed value is 20.
     * 
     */
    public List<Integer> getTrackmarkersizes() {
        return trackmarkersizes;
    }

    /**
     * 
     * @param trackmarkersizes  Size of the track point markers.  The minimum
     *                          allowed value is 0. The maximum allowed value
     *                          is 20.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackmarkersizes(List<Integer> trackmarkersizes) {
        this.trackmarkersizes = (trackmarkersizes == null) ? new ArrayList<Integer>() : trackmarkersizes;
        return this;
    }

    /**
     * 
     * @return Color of the track point markers.
     * 
     */
    public List<Long> getTrackmarkercolors() {
        return trackmarkercolors;
    }

    /**
     * 
     * @param trackmarkercolors  Color of the track point markers.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackmarkercolors(List<Long> trackmarkercolors) {
        this.trackmarkercolors = (trackmarkercolors == null) ? new ArrayList<Long>() : trackmarkercolors;
        return this;
    }

    /**
     * 
     * @return Shape of track point markers.
     * 
     */
    public List<String> getTrackmarkershapes() {
        return trackmarkershapes;
    }

    /**
     * 
     * @param trackmarkershapes  Shape of track point markers.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackmarkershapes(List<String> trackmarkershapes) {
        this.trackmarkershapes = (trackmarkershapes == null) ? new ArrayList<String>() : trackmarkershapes;
        return this;
    }

    /**
     * 
     * @return Color of track head markers.
     * 
     */
    public List<Long> getTrackheadcolors() {
        return trackheadcolors;
    }

    /**
     * 
     * @param trackheadcolors  Color of track head markers.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackheadcolors(List<Long> trackheadcolors) {
        this.trackheadcolors = (trackheadcolors == null) ? new ArrayList<Long>() : trackheadcolors;
        return this;
    }

    /**
     * 
     * @return Size of track head markers.  The minimum allowed value is 0. The
     *         maximum allowed value is 20.
     * 
     */
    public List<Integer> getTrackheadsizes() {
        return trackheadsizes;
    }

    /**
     * 
     * @param trackheadsizes  Size of track head markers.  The minimum allowed
     *                        value is 0. The maximum allowed value is 20.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackheadsizes(List<Integer> trackheadsizes) {
        this.trackheadsizes = (trackheadsizes == null) ? new ArrayList<Integer>() : trackheadsizes;
        return this;
    }

    /**
     * 
     * @return Shape of track head markers.
     * 
     */
    public List<String> getTrackheadshapes() {
        return trackheadshapes;
    }

    /**
     * 
     * @param trackheadshapes  Shape of track head markers.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTrackheadshapes(List<String> trackheadshapes) {
        this.trackheadshapes = (trackheadshapes == null) ? new ArrayList<String>() : trackheadshapes;
        return this;
    }
    public List<List<Double>> getTimeIntervals() {
        return timeIntervals;
    }

    /**
     * 
     * @param timeIntervals
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setTimeIntervals(List<List<Double>> timeIntervals) {
        this.timeIntervals = (timeIntervals == null) ? new ArrayList<List<Double>>() : timeIntervals;
        return this;
    }
    public String getVideoStyle() {
        return videoStyle;
    }

    /**
     * 
     * @param videoStyle
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setVideoStyle(String videoStyle) {
        this.videoStyle = (videoStyle == null) ? "" : videoStyle;
        return this;
    }

    /**
     * 
     * @return User Provided session key that is later used to retrieve the
     *         generated video from the WMS.
     * 
     */
    public String getSessionKey() {
        return sessionKey;
    }

    /**
     * 
     * @param sessionKey  User Provided session key that is later used to
     *                    retrieve the generated video from the WMS.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setSessionKey(String sessionKey) {
        this.sessionKey = (sessionKey == null) ? "" : sessionKey;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public VisualizeVideoRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.worldTableNames;

            case 2:
                return this.trackIds;

            case 3:
                return this.xColumnName;

            case 4:
                return this.yColumnName;

            case 5:
                return this.minX;

            case 6:
                return this.maxX;

            case 7:
                return this.minY;

            case 8:
                return this.maxY;

            case 9:
                return this.width;

            case 10:
                return this.height;

            case 11:
                return this.projection;

            case 12:
                return this.bgColor;

            case 13:
                return this.doPoints;

            case 14:
                return this.doShapes;

            case 15:
                return this.doTracks;

            case 16:
                return this.pointcolors;

            case 17:
                return this.pointsizes;

            case 18:
                return this.pointshapes;

            case 19:
                return this.shapelinewidths;

            case 20:
                return this.shapelinecolors;

            case 21:
                return this.shapefillcolors;

            case 22:
                return this.tracklinewidths;

            case 23:
                return this.tracklinecolors;

            case 24:
                return this.trackmarkersizes;

            case 25:
                return this.trackmarkercolors;

            case 26:
                return this.trackmarkershapes;

            case 27:
                return this.trackheadcolors;

            case 28:
                return this.trackheadsizes;

            case 29:
                return this.trackheadshapes;

            case 30:
                return this.timeIntervals;

            case 31:
                return this.videoStyle;

            case 32:
                return this.sessionKey;

            case 33:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>)value;
                break;

            case 1:
                this.worldTableNames = (List<String>)value;
                break;

            case 2:
                this.trackIds = (List<List<String>>)value;
                break;

            case 3:
                this.xColumnName = (String)value;
                break;

            case 4:
                this.yColumnName = (String)value;
                break;

            case 5:
                this.minX = (Double)value;
                break;

            case 6:
                this.maxX = (Double)value;
                break;

            case 7:
                this.minY = (Double)value;
                break;

            case 8:
                this.maxY = (Double)value;
                break;

            case 9:
                this.width = (Integer)value;
                break;

            case 10:
                this.height = (Integer)value;
                break;

            case 11:
                this.projection = (String)value;
                break;

            case 12:
                this.bgColor = (Long)value;
                break;

            case 13:
                this.doPoints = (List<Boolean>)value;
                break;

            case 14:
                this.doShapes = (List<Boolean>)value;
                break;

            case 15:
                this.doTracks = (List<Boolean>)value;
                break;

            case 16:
                this.pointcolors = (List<Long>)value;
                break;

            case 17:
                this.pointsizes = (List<Integer>)value;
                break;

            case 18:
                this.pointshapes = (List<String>)value;
                break;

            case 19:
                this.shapelinewidths = (List<Integer>)value;
                break;

            case 20:
                this.shapelinecolors = (List<Long>)value;
                break;

            case 21:
                this.shapefillcolors = (List<Long>)value;
                break;

            case 22:
                this.tracklinewidths = (List<Integer>)value;
                break;

            case 23:
                this.tracklinecolors = (List<Long>)value;
                break;

            case 24:
                this.trackmarkersizes = (List<Integer>)value;
                break;

            case 25:
                this.trackmarkercolors = (List<Long>)value;
                break;

            case 26:
                this.trackmarkershapes = (List<String>)value;
                break;

            case 27:
                this.trackheadcolors = (List<Long>)value;
                break;

            case 28:
                this.trackheadsizes = (List<Integer>)value;
                break;

            case 29:
                this.trackheadshapes = (List<String>)value;
                break;

            case 30:
                this.timeIntervals = (List<List<Double>>)value;
                break;

            case 31:
                this.videoStyle = (String)value;
                break;

            case 32:
                this.sessionKey = (String)value;
                break;

            case 33:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        VisualizeVideoRequest that = (VisualizeVideoRequest)obj;

        return ( this.tableNames.equals( that.tableNames )
                 && this.worldTableNames.equals( that.worldTableNames )
                 && this.trackIds.equals( that.trackIds )
                 && this.xColumnName.equals( that.xColumnName )
                 && this.yColumnName.equals( that.yColumnName )
                 && ( (Double)this.minX ).equals( (Double)that.minX )
                 && ( (Double)this.maxX ).equals( (Double)that.maxX )
                 && ( (Double)this.minY ).equals( (Double)that.minY )
                 && ( (Double)this.maxY ).equals( (Double)that.maxY )
                 && ( this.width == that.width )
                 && ( this.height == that.height )
                 && this.projection.equals( that.projection )
                 && ( this.bgColor == that.bgColor )
                 && this.doPoints.equals( that.doPoints )
                 && this.doShapes.equals( that.doShapes )
                 && this.doTracks.equals( that.doTracks )
                 && this.pointcolors.equals( that.pointcolors )
                 && this.pointsizes.equals( that.pointsizes )
                 && this.pointshapes.equals( that.pointshapes )
                 && this.shapelinewidths.equals( that.shapelinewidths )
                 && this.shapelinecolors.equals( that.shapelinecolors )
                 && this.shapefillcolors.equals( that.shapefillcolors )
                 && this.tracklinewidths.equals( that.tracklinewidths )
                 && this.tracklinecolors.equals( that.tracklinecolors )
                 && this.trackmarkersizes.equals( that.trackmarkersizes )
                 && this.trackmarkercolors.equals( that.trackmarkercolors )
                 && this.trackmarkershapes.equals( that.trackmarkershapes )
                 && this.trackheadcolors.equals( that.trackheadcolors )
                 && this.trackheadsizes.equals( that.trackheadsizes )
                 && this.trackheadshapes.equals( that.trackheadshapes )
                 && this.timeIntervals.equals( that.timeIntervals )
                 && this.videoStyle.equals( that.videoStyle )
                 && this.sessionKey.equals( that.sessionKey )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( gd.toString( "tableNames" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "worldTableNames" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.worldTableNames ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackIds" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackIds ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "xColumnName" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.xColumnName ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "yColumnName" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.yColumnName ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "minX" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.minX ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "maxX" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.maxX ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "minY" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.minY ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "maxY" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.maxY ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "width" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.width ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "height" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.height ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "projection" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.projection ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "bgColor" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.bgColor ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "doPoints" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.doPoints ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "doShapes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.doShapes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "doTracks" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.doTracks ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "pointcolors" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.pointcolors ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "pointsizes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.pointsizes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "pointshapes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.pointshapes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "shapelinewidths" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.shapelinewidths ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "shapelinecolors" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.shapelinecolors ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "shapefillcolors" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.shapefillcolors ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "tracklinewidths" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.tracklinewidths ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "tracklinecolors" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.tracklinecolors ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackmarkersizes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackmarkersizes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackmarkercolors" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackmarkercolors ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackmarkershapes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackmarkershapes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackheadcolors" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackheadcolors ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackheadsizes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackheadsizes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "trackheadshapes" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.trackheadshapes ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "timeIntervals" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.timeIntervals ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "videoStyle" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.videoStyle ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "sessionKey" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.sessionKey ) );
        builder.append( gd.toString( "," ) );
        builder.append( gd.toString( "options" ) );
        builder.append( gd.toString( ":" ) );
        builder.append( gd.toString( this.options ) );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.worldTableNames.hashCode();
        hashCode = (31 * hashCode) + this.trackIds.hashCode();
        hashCode = (31 * hashCode) + this.xColumnName.hashCode();
        hashCode = (31 * hashCode) + this.yColumnName.hashCode();
        hashCode = (31 * hashCode) + ((Double)this.minX).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxX).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.minY).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxY).hashCode();
        hashCode = (31 * hashCode) + this.width;
        hashCode = (31 * hashCode) + this.height;
        hashCode = (31 * hashCode) + this.projection.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.bgColor).hashCode();
        hashCode = (31 * hashCode) + this.doPoints.hashCode();
        hashCode = (31 * hashCode) + this.doShapes.hashCode();
        hashCode = (31 * hashCode) + this.doTracks.hashCode();
        hashCode = (31 * hashCode) + this.pointcolors.hashCode();
        hashCode = (31 * hashCode) + this.pointsizes.hashCode();
        hashCode = (31 * hashCode) + this.pointshapes.hashCode();
        hashCode = (31 * hashCode) + this.shapelinewidths.hashCode();
        hashCode = (31 * hashCode) + this.shapelinecolors.hashCode();
        hashCode = (31 * hashCode) + this.shapefillcolors.hashCode();
        hashCode = (31 * hashCode) + this.tracklinewidths.hashCode();
        hashCode = (31 * hashCode) + this.tracklinecolors.hashCode();
        hashCode = (31 * hashCode) + this.trackmarkersizes.hashCode();
        hashCode = (31 * hashCode) + this.trackmarkercolors.hashCode();
        hashCode = (31 * hashCode) + this.trackmarkershapes.hashCode();
        hashCode = (31 * hashCode) + this.trackheadcolors.hashCode();
        hashCode = (31 * hashCode) + this.trackheadsizes.hashCode();
        hashCode = (31 * hashCode) + this.trackheadshapes.hashCode();
        hashCode = (31 * hashCode) + this.timeIntervals.hashCode();
        hashCode = (31 * hashCode) + this.videoStyle.hashCode();
        hashCode = (31 * hashCode) + this.sessionKey.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
